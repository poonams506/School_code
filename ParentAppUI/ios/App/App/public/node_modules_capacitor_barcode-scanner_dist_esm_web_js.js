"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_capacitor_barcode-scanner_dist_esm_web_js"],{

/***/ 18464:
/*!*****************************************************************!*\
  !*** ./node_modules/@capacitor/barcode-scanner/dist/esm/web.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CapacitorBarcodeScannerWeb: () => (/* binding */ CapacitorBarcodeScannerWeb)
/* harmony export */ });
/* harmony import */ var _Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 89204);
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @capacitor/core */ 14070);
/* harmony import */ var html5_qrcode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! html5-qrcode */ 48068);
/* harmony import */ var _definitions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./definitions */ 75372);




/**
 * Implements OSBarcodePlugin to provide web functionality for barcode scanning.
 */
class CapacitorBarcodeScannerWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_1__.WebPlugin {
  /**
   * Stops the barcode scanner and hides its UI.
   * @private
   * @returns {Promise<void>} A promise that resolves when the scanner has stopped and its UI is hidden.
   */
  stopAndHideScanner() {
    return (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      console.log(window.OSBarcodeWebScanner);
      if (window.OSBarcodeWebScanner) {
        yield window.OSBarcodeWebScanner.stop();
        window.OSBarcodeWebScanner = null;
      }
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      document.getElementById('cap-os-barcode-scanner-container-dialog').style.display = 'none';
    })();
  }
  /**
   * Builds the HTML elements necessary for the barcode scanner UI.
   * This method checks if the scanner container exists before creating it to avoid duplicates.
   * It also sets up the close button to stop and hide the scanner on click.
   * @private
   */
  buildScannerElement() {
    if (document.getElementById('cap-os-barcode-scanner-container')) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      document.getElementById('cap-os-barcode-scanner-container').className = 'scanner-container-display';
      return;
    }
    // Create and configure scanner container elements
    const caposbarcodescannercontainer = document.body.appendChild(document.createElement('div'));
    caposbarcodescannercontainer.id = 'cap-os-barcode-scanner-container';
    const caposbarcodescannercontainerdialog = document.createElement('div');
    caposbarcodescannercontainerdialog.id = 'cap-os-barcode-scanner-container-dialog';
    caposbarcodescannercontainerdialog.className = 'scanner-dialog';
    // Inner dialog elements including the close button and scanner view
    const caposbarcodescannercontainerdialoginner = document.createElement('div');
    caposbarcodescannercontainerdialoginner.className = 'scanner-dialog-inner';
    const caposbarcodescannercontainerdialoginnerclose = document.createElement('span');
    caposbarcodescannercontainerdialoginnerclose.className = 'close-button';
    caposbarcodescannercontainerdialoginnerclose.innerHTML = '&times;';
    caposbarcodescannercontainerdialoginner.appendChild(caposbarcodescannercontainerdialoginnerclose);
    const caposbarcodescannercontainerdialoginnercontainerp = document.createElement('p');
    caposbarcodescannercontainerdialoginnercontainerp.innerHTML = '&nbsp;';
    caposbarcodescannercontainerdialoginner.appendChild(caposbarcodescannercontainerdialoginnercontainerp);
    const caposbarcodescannercontainerdialoginnercontainer = document.createElement('div');
    caposbarcodescannercontainerdialoginnercontainer.className = 'scanner-container-full-width';
    caposbarcodescannercontainerdialoginnercontainer.id = 'cap-os-barcode-scanner-container-scanner';
    caposbarcodescannercontainerdialoginner.appendChild(caposbarcodescannercontainerdialoginnercontainer);
    caposbarcodescannercontainerdialog.appendChild(caposbarcodescannercontainerdialoginner);
    caposbarcodescannercontainer.appendChild(caposbarcodescannercontainerdialog);
    caposbarcodescannercontainerdialoginnerclose.onclick = this.stopAndHideScanner;
  }
  /**
   * Initiates a barcode scan using the user's camera and HTML5 QR code scanner.
   * Displays the scanner UI and waits for a scan to complete or fail.
   * @param {OSBarcodeScanOptions} options Configuration options for the scan, including camera direction and UI preferences.
   * @returns {Promise<OSBarcodeScanResult>} A promise that resolves with the scan result or rejects with an error.
   */
  scanBarcode(options) {
    var _this = this;
    return (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.buildScannerElement();
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      document.getElementById('cap-os-barcode-scanner-container-dialog').style.display = 'block';
      return new Promise((resolve, reject) => {
        var _a, _b;
        const param = {
          facingMode: options.cameraDirection === 1 ? 'environment' : 'user',
          hasScannerButton: false,
          scanButton: options.scanButton === undefined ? false : options.scanButton,
          showScanLine: false,
          scanInstructions: options.scanInstructions ? options.scanInstructions : '',
          orientation: options.scanOrientation ? options.scanOrientation : _definitions__WEBPACK_IMPORTED_MODULE_3__.CapacitorBarcodeScannerScanOrientation.PORTRAIT,
          showCameraSelection: ((_a = options.web) === null || _a === void 0 ? void 0 : _a.showCameraSelection) ? options.web.showCameraSelection : false,
          typeHint: options.hint === 17 ? undefined : options.hint,
          scannerFPS: ((_b = options.web) === null || _b === void 0 ? void 0 : _b.scannerFPS) ? options.web.scannerFPS : 50
        };
        // Set up and start the scanner
        const scannerElement = document.getElementById('cap-os-barcode-scanner-container-scanner');
        if (!scannerElement) {
          throw new Error('Scanner Element is required for web');
        }
        window.OSBarcodeWebScanner = new html5_qrcode__WEBPACK_IMPORTED_MODULE_2__.Html5Qrcode(scannerElement.id);
        const Html5QrcodeConfig = {
          fps: param.scannerFPS,
          qrbox: scannerElement.getBoundingClientRect().width * (9 / 16) - 10,
          aspectRatio: 16 / 9,
          videoConstraints: {
            focusMode: 'continuous',
            height: {
              min: 576,
              ideal: 1920
            },
            deviceId: undefined,
            facingMode: undefined
          }
        };
        // Success and error callbacks for the scanner
        const OSBarcodeWebScannerSuccessCallback = (decodedText, _decodedResult) => {
          _this.stopAndHideScanner();
          resolve({
            ScanResult: decodedText
          });
        };
        const OSBarcodeWebScannerErrorCallback = error => {
          if (error.indexOf('NotFoundException') === -1) {
            _this.stopAndHideScanner();
            console.error(`[Scanner Web Error] ${error}`);
            reject(error);
          }
        };
        window.OSBarcodeWebScanner.start({
          facingMode: param.facingMode
        }, Html5QrcodeConfig, OSBarcodeWebScannerSuccessCallback, OSBarcodeWebScannerErrorCallback);
      });
    })();
  }
}

/***/ })

}]);
//# sourceMappingURL=node_modules_capacitor_barcode-scanner_dist_esm_web_js.js.map