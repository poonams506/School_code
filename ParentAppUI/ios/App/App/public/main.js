(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["main"],{

/***/ 23218:
/*!**********************************!*\
  !*** ./src/app/api.providers.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   API_PROVIDERS: () => (/* binding */ API_PROVIDERS)
/* harmony export */ });
/* harmony import */ var _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/school-api-service */ 37020);

const API_PROVIDERS = [{
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.AuthServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.AuthServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.SchoolServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.SchoolServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.MasterServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.MasterServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.StudentServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.StudentServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.ParentServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.ParentServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.GradeServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.GradeServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.DivisionServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.DivisionServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.ClerkServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.ClerkServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.AdminServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.AdminServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.TeacherServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.TeacherServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.CabDriverServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.CabDriverServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.AccessServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.AccessServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.GradeDivisionMatrixServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.GradeDivisionMatrixServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.FeePaymentServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.FeePaymentServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.FeeParticularServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.FeeParticularServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.FeeWavierTypeServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.FeeWavierTypeServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.StudentAttendanceServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.StudentAttendanceServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.HomeworkServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.HomeworkServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.DashBoardServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.DashBoardServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.NoticeServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.NoticeServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.StudentDocumentServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.StudentDocumentServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.ClassTimeTableServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.ClassTimeTableServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.StudentAttendanceReportServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.StudentAttendanceReportServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.CommonAppServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.CommonAppServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.StudentProfileServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.StudentProfileServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.TeacherProfileServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.TeacherProfileServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.SchoolCalendarServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.SchoolCalendarServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.ParentAppServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.ParentAppServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.CabDriverAppServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.CabDriverAppServiceProxy
}, {
  provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.GalleryServiceProxy,
  useClass: _services_school_api_service__WEBPACK_IMPORTED_MODULE_0__.GalleryServiceProxy
}];

/***/ }),

/***/ 94114:
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AppRoutingModule: () => (/* binding */ AppRoutingModule)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ 95072);
/* harmony import */ var _services_auth_guard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/auth.guard */ 55438);




const routes = [{
  path: '',
  redirectTo: 'signin',
  pathMatch: 'full'
}, {
  path: 'teacher-app',
  loadChildren: () => __webpack_require__.e(/*! import() */ "src_app_pages_teacherApp_teacher-app_module_ts").then(__webpack_require__.bind(__webpack_require__, /*! ./pages/teacherApp/teacher-app.module */ 16413)).then(m => m.TeacherAppModule)
  // canActivate: [AuthGuard] // Secure all child pages
}, {
  path: 'parent-app',
  loadChildren: () => __webpack_require__.e(/*! import() */ "src_app_pages_parentApp_parent-app_module_ts").then(__webpack_require__.bind(__webpack_require__, /*! ./pages/parentApp/parent-app.module */ 25145)).then(m => m.ParentAppModule)
  // canActivate: [AuthGuard] // Secure all child pages
}, {
  path: 'driver-app',
  loadChildren: () => __webpack_require__.e(/*! import() */ "src_app_pages_driverApp_driver-app_module_ts").then(__webpack_require__.bind(__webpack_require__, /*! ./pages/driverApp/driver-app.module */ 51741)).then(m => m.DriverAppModule)
  // canActivate: [AuthGuard] // Secure all child pages
}, {
  path: 'role',
  loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-node_modules_swiper_angular_fesm2015_swiper_angular_mjs"), __webpack_require__.e("src_app_pages_public_role_role_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ./pages/public/role/role.module */ 74738)).then(m => m.RolePageModule),
  canActivate: [_services_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard]
}, {
  path: 'welcome',
  loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-node_modules_swiper_angular_fesm2015_swiper_angular_mjs"), __webpack_require__.e("src_app_pages_public_welcome_welcome_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ./pages/public/welcome/welcome.module */ 1340)).then(m => m.WelcomePageModule)
  // canActivate: [PublicGuard] // Prevent for signed in users
}, {
  path: 'signin',
  loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-src_app_pages_public_password-reset_password-reset_page_ts"), __webpack_require__.e("src_app_pages_public_signin_signin_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ./pages/public/signin/signin.module */ 27006)).then(m => m.SigninPageModule),
  canActivate: [_services_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard]
}, {
  path: 'signup',
  loadChildren: () => __webpack_require__.e(/*! import() */ "src_app_pages_public_signup_signup_module_ts").then(__webpack_require__.bind(__webpack_require__, /*! ./pages/public/signup/signup.module */ 56822)).then(m => m.SignupPageModule)
  // canActivate: [PublicGuard] // Prevent for signed in users
}, {
  path: 'password-reset',
  loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-src_app_pages_public_password-reset_password-reset_page_ts"), __webpack_require__.e("src_app_pages_public_password-reset_password-reset_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ./pages/public/password-reset/password-reset.module */ 59180)).then(m => m.PasswordResetPageModule)
  // canActivate: [PublicGuard] // Prevent for signed in users
}];
let AppRoutingModule = class AppRoutingModule {};
AppRoutingModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
  imports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule.forRoot(routes, {
    preloadingStrategy: _angular_router__WEBPACK_IMPORTED_MODULE_3__.PreloadAllModules
  })],
  exports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule]
})], AppRoutingModule);


/***/ }),

/***/ 20092:
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AppComponent: () => (/* binding */ AppComponent)
/* harmony export */ });
/* harmony import */ var _Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 89204);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _app_component_html_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app.component.html?ngResource */ 61584);
/* harmony import */ var _app_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app.component.scss?ngResource */ 37282);
/* harmony import */ var _app_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_app_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ngx-translate/core */ 90852);
/* harmony import */ var _services_user_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/user-service */ 4286);
/* harmony import */ var _services_school_api_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/school-api-service */ 37020);
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/environments/environment */ 45312);
/* harmony import */ var _capacitor_network__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @capacitor/network */ 5477);
/* harmony import */ var _services_storage_storage_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./services/storage/storage.service */ 85217);











let AppComponent = class AppComponent {
  constructor(translate, userService, schoolService, ngZone, storageService) {
    this.translate = translate;
    this.userService = userService;
    this.schoolService = schoolService;
    this.ngZone = ngZone;
    this.storageService = storageService;
    this.isAppAccessible = true;
    this.model = {};
    translate.addLangs(['en', 'mr']);
    translate.setDefaultLang('en');
  }
  switchLang(lang) {
    this.translate.use(lang);
  }
  switchLanguage(language) {
    this.translate.use(language);
  }
  redirectToPlayStore() {
    window.open('https://play.google.com/store/apps/details?id=com.schoolhub360.schoolApp', '_system');
  }
  ngOnInit() {
    var _this = this;
    return (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.networkListener = yield _capacitor_network__WEBPACK_IMPORTED_MODULE_6__.Network.addListener('networkStatusChange', status => {
        console.log('Network status changed', status);
        _this.ngZone.run(() => {
          _this.changeStatus(status);
        });
      });
      const status = yield _capacitor_network__WEBPACK_IMPORTED_MODULE_6__.Network.getStatus();
      console.log('Network status:', status);
      _this.changeStatus(status);
      console.log('Network status:', _this.status);
      _this.storageService.setStorage("APIUrl", src_environments_environment__WEBPACK_IMPORTED_MODULE_5__.environment.API_BASE_URL);
    })();
  }
  changeStatus(status) {
    this.status = status?.connected;
    if (!this.status) {
      this.model = {
        title: 'No Connection',
        subtitle: 'Your internet connection was',
        description: "interrupted, Please retry.",
        titleColor: 'dark',
        color: 'medium',
        button: 'RETRY',
        buttonColor: 'dark'
      };
      this.ngOnDestroy();
    }
  }
  checkStatus(event) {
    this.ngOnInit();
  }
  ngOnDestroy() {
    if (this.networkListener) this.networkListener.remove();
  }
  static #_ = this.ctorParameters = () => [{
    type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__.TranslateService
  }, {
    type: _services_user_service__WEBPACK_IMPORTED_MODULE_3__.UserService
  }, {
    type: _services_school_api_service__WEBPACK_IMPORTED_MODULE_4__.SchoolServiceProxy
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_9__.NgZone
  }, {
    type: _services_storage_storage_service__WEBPACK_IMPORTED_MODULE_7__.StorageService
  }];
};
AppComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_9__.Component)({
  selector: 'app-root',
  template: _app_component_html_ngResource__WEBPACK_IMPORTED_MODULE_1__,
  styles: [(_app_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_2___default())]
})], AppComponent);


/***/ }),

/***/ 50635:
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AppModule: () => (/* binding */ AppModule),
/* harmony export */   createTranslateLoader: () => (/* binding */ createTranslateLoader)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/platform-browser */ 80436);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @angular/router */ 95072);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @ngx-translate/core */ 90852);
/* harmony import */ var _ngx_translate_http_loader__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @ngx-translate/http-loader */ 18952);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @angular/common/http */ 46443);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @ionic/angular */ 37401);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @ionic/angular */ 78205);
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app-routing.module */ 94114);
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app.component */ 20092);
/* harmony import */ var _ng_icons_core__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @ng-icons/core */ 38233);
/* harmony import */ var _ng_icons_feather_icons__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @ng-icons/feather-icons */ 64115);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @angular/forms */ 34456);
/* harmony import */ var ng2_charts__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ng2-charts */ 16045);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @angular/common */ 60316);
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/environments/environment */ 45312);
/* harmony import */ var _services_common_method_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/common-method-service */ 38336);
/* harmony import */ var _services_file_chunk_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/file-chunk-service */ 96999);
/* harmony import */ var _services_loader_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/loader-service */ 65894);
/* harmony import */ var _services_location_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./services/location-service */ 71570);
/* harmony import */ var _services_school_api_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./services/school-api-service */ 37020);
/* harmony import */ var _services_user_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./services/user-service */ 4286);
/* harmony import */ var ngx_spinner__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ngx-spinner */ 61249);
/* harmony import */ var _interceptors_auth_interceptor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./interceptors/auth-interceptor */ 34947);
/* harmony import */ var _interceptors_loader_interceptor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./interceptors/loader-interceptor */ 57182);
/* harmony import */ var _interceptors_location_interceptor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./interceptors/location-interceptor */ 97826);
/* harmony import */ var _interceptors_unauthorized_interceptor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./interceptors/unauthorized-interceptor */ 84275);
/* harmony import */ var _api_providers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./api.providers */ 23218);
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @angular/platform-browser/animations */ 43835);
/* harmony import */ var _pages_teacherApp_tabs_teacher_tabs_module__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./pages/teacherApp/tabs/teacher-tabs.module */ 9713);
/* harmony import */ var _shared_shared_module__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./shared/shared.module */ 93887);
/* harmony import */ var _awesome_cordova_plugins_location_accuracy_ngx__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @awesome-cordova-plugins/location-accuracy/ngx */ 62732);
/* harmony import */ var _pages_public_empty_screen_empty_screen_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./pages/public/empty-screen/empty-screen.component */ 30535);













// ReactiveForms

// NgCharts




















function createTranslateLoader(http) {
  return new _ngx_translate_http_loader__WEBPACK_IMPORTED_MODULE_18__.TranslateHttpLoader(http, './assets/i18n/', '.json');
}
let AppModule = class AppModule {};
AppModule = (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_20__.NgModule)({
  declarations: [_app_component__WEBPACK_IMPORTED_MODULE_1__.AppComponent, _pages_public_empty_screen_empty_screen_component__WEBPACK_IMPORTED_MODULE_17__.EmptyScreenComponent],
  imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_21__.BrowserModule, _ionic_angular__WEBPACK_IMPORTED_MODULE_22__.IonicModule.forRoot(), _angular_forms__WEBPACK_IMPORTED_MODULE_23__.ReactiveFormsModule, _app_routing_module__WEBPACK_IMPORTED_MODULE_0__.AppRoutingModule, ng2_charts__WEBPACK_IMPORTED_MODULE_24__.NgChartsModule, _ng_icons_core__WEBPACK_IMPORTED_MODULE_25__.NgIconComponent, _ng_icons_core__WEBPACK_IMPORTED_MODULE_25__.NgIconsModule, _angular_common_http__WEBPACK_IMPORTED_MODULE_26__.HttpClientModule, _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_27__.BrowserAnimationsModule, _pages_teacherApp_tabs_teacher_tabs_module__WEBPACK_IMPORTED_MODULE_14__.TeacherTabsPageModule, ngx_spinner__WEBPACK_IMPORTED_MODULE_28__.NgxSpinnerModule.forRoot({
    type: 'ball-scale-multiple'
  }), _ngx_translate_core__WEBPACK_IMPORTED_MODULE_29__.TranslateModule.forRoot({
    loader: {
      provide: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_29__.TranslateLoader,
      useFactory: createTranslateLoader,
      deps: [_angular_common_http__WEBPACK_IMPORTED_MODULE_26__.HttpClient]
    }
  }), _shared_shared_module__WEBPACK_IMPORTED_MODULE_15__.SharedModule],
  exports: [_shared_shared_module__WEBPACK_IMPORTED_MODULE_15__.SharedModule],
  providers: [{
    provide: _angular_router__WEBPACK_IMPORTED_MODULE_30__.RouteReuseStrategy,
    useClass: _ionic_angular__WEBPACK_IMPORTED_MODULE_31__.IonicRouteStrategy
  }, (0,_ng_icons_core__WEBPACK_IMPORTED_MODULE_25__.provideIcons)({
    featherAirplay: _ng_icons_feather_icons__WEBPACK_IMPORTED_MODULE_32__.featherAirplay
  }), _services_user_service__WEBPACK_IMPORTED_MODULE_8__.UserService, _services_location_service__WEBPACK_IMPORTED_MODULE_6__.LocationService, _services_loader_service__WEBPACK_IMPORTED_MODULE_5__.LoaderService, _services_common_method_service__WEBPACK_IMPORTED_MODULE_3__.CommonMethodService, _services_file_chunk_service__WEBPACK_IMPORTED_MODULE_4__.FileChunkService, {
    provide: _angular_common__WEBPACK_IMPORTED_MODULE_33__.LocationStrategy,
    useClass: _angular_common__WEBPACK_IMPORTED_MODULE_33__.HashLocationStrategy
  }, {
    provide: _angular_common_http__WEBPACK_IMPORTED_MODULE_26__.HTTP_INTERCEPTORS,
    useClass: _interceptors_auth_interceptor__WEBPACK_IMPORTED_MODULE_9__.AuthInterceptor,
    multi: true
  }, {
    provide: _angular_common_http__WEBPACK_IMPORTED_MODULE_26__.HTTP_INTERCEPTORS,
    useClass: _interceptors_unauthorized_interceptor__WEBPACK_IMPORTED_MODULE_12__.UnauthorizedInterceptor,
    multi: true
  }, {
    provide: _angular_common_http__WEBPACK_IMPORTED_MODULE_26__.HTTP_INTERCEPTORS,
    useClass: _interceptors_loader_interceptor__WEBPACK_IMPORTED_MODULE_10__.LoaderInterceptor,
    multi: true
  }, {
    provide: _angular_common_http__WEBPACK_IMPORTED_MODULE_26__.HTTP_INTERCEPTORS,
    useClass: _interceptors_location_interceptor__WEBPACK_IMPORTED_MODULE_11__.LocationInterceptor,
    multi: true
  }, {
    provide: _services_school_api_service__WEBPACK_IMPORTED_MODULE_7__.API_BASE_URL,
    useValue: src_environments_environment__WEBPACK_IMPORTED_MODULE_2__.environment.API_BASE_URL
  }, _api_providers__WEBPACK_IMPORTED_MODULE_13__.API_PROVIDERS, _awesome_cordova_plugins_location_accuracy_ngx__WEBPACK_IMPORTED_MODULE_16__.LocationAccuracy],
  bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_1__.AppComponent]
})], AppModule);


/***/ }),

/***/ 34947:
/*!**************************************************!*\
  !*** ./src/app/interceptors/auth-interceptor.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AuthInterceptor: () => (/* binding */ AuthInterceptor)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ 95072);
/* harmony import */ var _services_user_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services/user-service */ 4286);




let AuthInterceptor = class AuthInterceptor {
  constructor(router, injector) {
    this.router = router;
    this.injector = injector;
  }
  intercept(req, next) {
    const userService = this.injector.get(_services_user_service__WEBPACK_IMPORTED_MODULE_0__.UserService);
    const token = userService.UserToken;
    if (token) {
      const authReq = req.clone({
        headers: req.headers.set('Authorization', `Bearer ${token}`)
      });
      return next.handle(authReq);
    }
    return next.handle(req);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_router__WEBPACK_IMPORTED_MODULE_1__.Router
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injector
  }];
};
AuthInterceptor = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable)()], AuthInterceptor);


/***/ }),

/***/ 57182:
/*!****************************************************!*\
  !*** ./src/app/interceptors/loader-interceptor.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LoaderInterceptor: () => (/* binding */ LoaderInterceptor)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ 46443);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ 95072);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 77919);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ 70271);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ 61318);
/* harmony import */ var src_app_services_loader_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/app/services/loader-service */ 65894);







let LoaderInterceptor = class LoaderInterceptor {
  constructor(router, injector) {
    this.router = router;
    this.injector = injector;
    this.ignorePaths = ['/api/CabDriverApp/UpdateCabDriverLocationByTrip', '/api/ParentApp/GetVehicleTrackListSelect'];
  }
  intercept(req, next) {
    // Check if the request URL matches any of the ignore paths
    const shouldIgnore = this.ignorePaths.some(path => req.url.includes(path));
    if (shouldIgnore) {
      // If the URL matches, bypass the interceptor logic
      return next.handle(req);
    }
    const loaderService = this.injector.get(src_app_services_loader_service__WEBPACK_IMPORTED_MODULE_0__.LoaderService);
    loaderService.addAPI();
    //console.log(`Added ${req.url} with ${req.body} body`)
    return next.handle(req).pipe(
    // timeout(15000),
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.map)(event => {
      if (event instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse) {
        loaderService.removeAPI();
        //console.log(`Removed ${req.url} after response ${event.status} with ${event.body}`);
      }
      return event;
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)(error => {
      console.log(error);
      let data = {};
      data = {
        reason: error && error.error && error.error.reason ? error.error.reason : '',
        status: error.status
      };
      loaderService.removeAPI();
      //console.log(`Removed: ${req.url} after error response ${error.status} with ${error.error}`);
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.throwError)(error);
    }));
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_router__WEBPACK_IMPORTED_MODULE_5__.Router
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_6__.Injector
  }];
};
LoaderInterceptor = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_6__.Injectable)({
  providedIn: 'root'
})], LoaderInterceptor);


/***/ }),

/***/ 97826:
/*!******************************************************!*\
  !*** ./src/app/interceptors/location-interceptor.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LocationInterceptor: () => (/* binding */ LocationInterceptor)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _services_location_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services/location-service */ 71570);



let LocationInterceptor = class LocationInterceptor {
  constructor(injector) {
    this.injector = injector;
  }
  intercept(request, next) {
    const locationService = this.injector.get(_services_location_service__WEBPACK_IMPORTED_MODULE_0__.LocationService);
    // Get Public IP Address
    let publicIpAddress = locationService.GetClientIPAddress(); // You need to retrieve the public IP address here
    // Get Latitude and Longitude
    let latitude = locationService.GetClientLatitude(); // You need to retrieve the latitude here
    let longitude = locationService.GetClientLongitude(); // You need to retrieve the longitude here
    // Clone the request and add custom headers
    const modifiedRequest = request.clone({
      setHeaders: {
        'X-Public-IP': publicIpAddress,
        'X-Latitude': latitude.toString(),
        'X-Longitude': longitude.toString()
      }
    });
    return next.handle(modifiedRequest);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injector
  }];
};
LocationInterceptor = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], LocationInterceptor);


/***/ }),

/***/ 84275:
/*!**********************************************************!*\
  !*** ./src/app/interceptors/unauthorized-interceptor.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UnauthorizedInterceptor: () => (/* binding */ UnauthorizedInterceptor)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ 95072);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs/operators */ 61318);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ 77919);





let UnauthorizedInterceptor = class UnauthorizedInterceptor {
  constructor(router) {
    this.router = router;
  }
  intercept(req, next) {
    return next.handle(req).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_0__.catchError)(error => {
      if (error.status === 401 && this.router.url.indexOf('role') == -1) {
        // If the response status code is 401 (Unauthorized), navigate to the login page
        this.router.navigate(['/signin']);
      }
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.throwError)(error);
    }));
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_router__WEBPACK_IMPORTED_MODULE_2__.Router
  }];
};
UnauthorizedInterceptor = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable)()], UnauthorizedInterceptor);


/***/ }),

/***/ 30535:
/*!*********************************************************************!*\
  !*** ./src/app/pages/public/empty-screen/empty-screen.component.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EmptyScreenComponent: () => (/* binding */ EmptyScreenComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _empty_screen_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./empty-screen.component.html?ngResource */ 88973);
/* harmony import */ var _empty_screen_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./empty-screen.component.scss?ngResource */ 27229);
/* harmony import */ var _empty_screen_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_empty_screen_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37580);




let EmptyScreenComponent = class EmptyScreenComponent {
  constructor() {
    this.retry = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();
  }
  retryButton() {
    this.retry.emit(true);
  }
  ngOnInit() {}
  static #_ = this.ctorParameters = () => [];
  static #_2 = this.propDecorators = {
    model: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    retry: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Output
    }]
  };
};
EmptyScreenComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Component)({
  selector: 'app-empty-screen',
  template: _empty_screen_component_html_ngResource__WEBPACK_IMPORTED_MODULE_0__,
  styles: [(_empty_screen_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_1___default())]
})], EmptyScreenComponent);


/***/ }),

/***/ 66343:
/*!**************************************************************************!*\
  !*** ./src/app/pages/teacherApp/tabs/header/teacher-header.component.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TeacherHeaderComponent: () => (/* binding */ TeacherHeaderComponent)
/* harmony export */ });
/* harmony import */ var _Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 89204);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _teacher_header_component_html_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./teacher-header.component.html?ngResource */ 44677);
/* harmony import */ var _teacher_header_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./teacher-header.component.scss?ngResource */ 51887);
/* harmony import */ var _teacher_header_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_teacher_header_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ 95072);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ionic/angular */ 37401);
/* harmony import */ var src_app_services_common_method_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/common-method-service */ 38336);
/* harmony import */ var src_app_services_fcm_fcm_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/fcm/fcm.service */ 93881);
/* harmony import */ var src_app_services_user_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/user-service */ 4286);










let TeacherHeaderComponent = class TeacherHeaderComponent {
  constructor(commonMethod, userService, fcmService, router) {
    this.commonMethod = commonMethod;
    this.userService = userService;
    this.fcmService = fcmService;
    this.router = router;
  }
  ngOnInit() {
    this.updateUserDetail();
  }
  ionViewDidEnter() {
    this.updateUserDetail();
  }
  updateUserDetail() {
    this.userService.getUser(true).subscribe(result => {
      this.currentUserFullName = result.userFullNameByRole;
      this.profileImageURL = result.profileImageURL;
    });
  }
  logout() {
    var _this = this;
    return (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      localStorage.clear();
      sessionStorage.clear();
      _this.userService.setAcademicYear(0);
      _this.userService.setSchoolId(0);
      _this.userService.CurrentSiblingClassId = 0;
      _this.userService.CurrentSiblingId = 0;
      _this.userService.CurrentUserRoleId = null;
      _this.userService.UserToken = null;
      yield _this.fcmService.clearFCMTokenAndRemoveListener();
      _this.router.navigate(['signin']);
    })();
  }
  GoBack() {
    this.router.navigate(['teacher-app/teacherTab/home']);
  }
  OpenMenu() {
    this.ionMenu.open();
  }
  backButtonVisible() {
    const defaultHref = '/teacher-app/teacherTab/home';
    return this.router.url !== defaultHref;
  }
  static #_ = this.ctorParameters = () => [{
    type: src_app_services_common_method_service__WEBPACK_IMPORTED_MODULE_3__.CommonMethodService
  }, {
    type: src_app_services_user_service__WEBPACK_IMPORTED_MODULE_5__.UserService
  }, {
    type: src_app_services_fcm_fcm_service__WEBPACK_IMPORTED_MODULE_4__.FcmService
  }, {
    type: _angular_router__WEBPACK_IMPORTED_MODULE_6__.Router
  }];
  static #_2 = this.propDecorators = {
    ionMenu: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ViewChild,
      args: [_ionic_angular__WEBPACK_IMPORTED_MODULE_8__.IonMenu, {
        static: true
      }]
    }]
  };
};
TeacherHeaderComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.Component)({
  selector: 'teacher-app-header',
  template: _teacher_header_component_html_ngResource__WEBPACK_IMPORTED_MODULE_1__,
  styles: [(_teacher_header_component_scss_ngResource__WEBPACK_IMPORTED_MODULE_2___default())]
})], TeacherHeaderComponent);


/***/ }),

/***/ 27520:
/*!**********************************************************************!*\
  !*** ./src/app/pages/teacherApp/tabs/teacher-tabs-routing.module.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TeacherTabsPageRoutingModule: () => (/* binding */ TeacherTabsPageRoutingModule)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ 95072);
/* harmony import */ var _teacher_tabs_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./teacher-tabs.page */ 41482);




const routes = [{
  path: '',
  component: _teacher_tabs_page__WEBPACK_IMPORTED_MODULE_0__.TeacherTabsPage,
  children: [{
    path: 'dashboard',
    loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-node_modules_highcharts_highcharts_js"), __webpack_require__.e("default-node_modules_highcharts_highcharts-3d_js-node_modules_highcharts-angular_fesm2020_hig-258897"), __webpack_require__.e("src_app_pages_teacherApp_teacher-dashboard_teacher-dashboard_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ../teacher-dashboard/teacher-dashboard.module */ 20136)).then(m => m.TeacherDashboardModule)
  }, {
    path: 'home',
    loadChildren: () => __webpack_require__.e(/*! import() */ "src_app_pages_teacherApp_home_home_module_ts").then(__webpack_require__.bind(__webpack_require__, /*! ../home/home.module */ 7280)).then(m => m.HomePageModule)
  }, {
    path: 'profile',
    loadChildren: () => __webpack_require__.e(/*! import() */ "src_app_pages_teacherApp_profile_teacher-profile-page_module_ts").then(__webpack_require__.bind(__webpack_require__, /*! ../profile/teacher-profile-page.module */ 8941)).then(m => m.TeacherProfilePageModule)
  }, {
    path: 'attendance',
    loadChildren: () => __webpack_require__.e(/*! import() */ "src_app_pages_teacherApp_attendance_attendance_module_ts").then(__webpack_require__.bind(__webpack_require__, /*! ../attendance/attendance.module */ 42544)).then(m => m.AttendanceModule)
  }, {
    path: 'calendar',
    loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-src_app_pages_teacherApp_calendar_calendar-event-detail-modal_calendar-event-detail-m-80a610"), __webpack_require__.e("src_app_pages_teacherApp_calendar_calendar_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ../calendar/calendar.module */ 91358)).then(m => m.CalendarModule)
  }, {
    path: 'timetable',
    loadChildren: () => __webpack_require__.e(/*! import() */ "src_app_pages_teacherApp_timetable_timetable_module_ts").then(__webpack_require__.bind(__webpack_require__, /*! ../timetable/timetable.module */ 14240)).then(m => m.TimetableModule)
  }, {
    path: 'homework',
    loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-src_app_services_toast_toast_service_ts-node_modules_capacitor_camera_dist_esm_index_-edc8b0"), __webpack_require__.e("src_app_pages_teacherApp_homework_homework_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ../homework/homework.module */ 7670)).then(m => m.HomeworkModule)
  }, {
    path: 'notice',
    loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-src_app_services_toast_toast_service_ts-node_modules_capacitor_camera_dist_esm_index_-edc8b0"), __webpack_require__.e("src_app_pages_teacherApp_notice_notice_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ../notice/notice.module */ 14258)).then(m => m.NoticeModule)
  }, {
    path: 'students',
    loadChildren: () => __webpack_require__.e(/*! import() */ "src_app_pages_teacherApp_student_student_module_ts").then(__webpack_require__.bind(__webpack_require__, /*! ../student/student.module */ 36880)).then(m => m.StudentModule)
  }, {
    path: 'gallery',
    loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-src_app_services_toast_toast_service_ts-node_modules_capacitor_camera_dist_esm_index_-edc8b0"), __webpack_require__.e("src_app_pages_teacherApp_gallery_gallery_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ../gallery/gallery.module */ 77648)).then(m => m.GalleryModule)
  }, {
    path: '',
    redirectTo: 'dashboard',
    pathMatch: 'full'
  }]
}];
let TeacherTabsPageRoutingModule = class TeacherTabsPageRoutingModule {};
TeacherTabsPageRoutingModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
  imports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule.forChild(routes)],
  exports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule]
})], TeacherTabsPageRoutingModule);


/***/ }),

/***/ 9713:
/*!**************************************************************!*\
  !*** ./src/app/pages/teacherApp/tabs/teacher-tabs.module.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TeacherTabsPageModule: () => (/* binding */ TeacherTabsPageModule)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic/angular */ 37401);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 60316);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/forms */ 34456);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ngx-translate/core */ 90852);
/* harmony import */ var _teacher_tabs_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./teacher-tabs.page */ 41482);
/* harmony import */ var _teacher_tabs_routing_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./teacher-tabs-routing.module */ 27520);
/* harmony import */ var _header_teacher_header_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./header/teacher-header.component */ 66343);









let TeacherTabsPageModule = class TeacherTabsPageModule {};
TeacherTabsPageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.NgModule)({
  imports: [_ionic_angular__WEBPACK_IMPORTED_MODULE_5__.IonicModule, _angular_common__WEBPACK_IMPORTED_MODULE_6__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_7__.FormsModule, _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__.TranslateModule, _teacher_tabs_routing_module__WEBPACK_IMPORTED_MODULE_1__.TeacherTabsPageRoutingModule],
  declarations: [_teacher_tabs_page__WEBPACK_IMPORTED_MODULE_0__.TeacherTabsPage, _header_teacher_header_component__WEBPACK_IMPORTED_MODULE_2__.TeacherHeaderComponent],
  exports: [_teacher_tabs_page__WEBPACK_IMPORTED_MODULE_0__.TeacherTabsPage]
})], TeacherTabsPageModule);


/***/ }),

/***/ 41482:
/*!************************************************************!*\
  !*** ./src/app/pages/teacherApp/tabs/teacher-tabs.page.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TeacherTabsPage: () => (/* binding */ TeacherTabsPage)
/* harmony export */ });
/* harmony import */ var _Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 89204);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _teacher_tabs_page_html_ngResource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./teacher-tabs.page.html?ngResource */ 54754);
/* harmony import */ var _teacher_tabs_page_scss_ngResource__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./teacher-tabs.page.scss?ngResource */ 14180);
/* harmony import */ var _teacher_tabs_page_scss_ngResource__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_teacher_tabs_page_scss_ngResource__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic/angular */ 37401);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ngx-translate/core */ 90852);
/* harmony import */ var src_app_services_user_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/user-service */ 4286);
/* harmony import */ var src_app_translate_config_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/translate-config.service */ 57394);









let TeacherTabsPage = class TeacherTabsPage {
  constructor(actionSheetController, translate, translateConfigService, userService) {
    this.actionSheetController = actionSheetController;
    this.translate = translate;
    this.translateConfigService = translateConfigService;
    this.userService = userService;
    this.show = true;
    this.translateConfigService.getDefaultLanguage();
    this.language = this.translateConfigService.getCurrentLang();
  }
  ngOnInit() {}
  ionViewDidEnter() {
    this.show = false;
    setTimeout(() => {
      this.show = true;
    }, 100);
  }
  // Select action
  changeLanguage() {
    var _this = this;
    return (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const actionSheet = yield _this.actionSheetController.create({
        header: 'Select Languages',
        cssClass: 'custom-action-sheet',
        buttons: [{
          text: 'English',
          icon: 'language-outline',
          handler: () => {
            _this.language = 'en';
            _this.translateConfigService.setLanguage('en');
          }
        }, {
          text: 'Marathi',
          icon: 'language-outline',
          handler: () => {
            _this.language = 'mr';
            _this.translateConfigService.setLanguage('mr');
          }
        }, {
          text: 'Hindi',
          icon: 'language-outline',
          handler: () => {
            _this.language = 'hn';
            _this.translateConfigService.setLanguage('hn');
          }
        }, {
          text: 'Cancel',
          //icon: 'close',
          role: 'cancel',
          handler: () => {
            console.log('Cancel clicked');
          }
        }]
      });
      yield actionSheet.present();
      const {
        role,
        data
      } = yield actionSheet.onDidDismiss();
      console.log('onDidDismiss resolved with role and data', role, data);
    })();
  }
  selectAction() {
    var _this2 = this;
    return (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const actionSheet = yield _this2.actionSheetController.create({
        header: 'Choose an action',
        buttons: [{
          text: 'Add something',
          icon: 'wallet',
          handler: () => {
            // Put in logic ...
          }
        }, {
          text: 'Change something',
          icon: 'swap-horizontal-outline',
          handler: () => {
            // Put in logic ...
          }
        }, {
          text: 'Set something',
          icon: 'calculator',
          handler: () => {
            // Put in logic ...
          }
        }, {
          text: 'Cancel',
          icon: 'close',
          role: 'cancel'
        }]
      });
      yield actionSheet.present();
    })();
  }
  GoToDashboard() {}
  static #_ = this.ctorParameters = () => [{
    type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__.ActionSheetController
  }, {
    type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_6__.TranslateService
  }, {
    type: src_app_translate_config_service__WEBPACK_IMPORTED_MODULE_4__.TranslateConfigService
  }, {
    type: src_app_services_user_service__WEBPACK_IMPORTED_MODULE_3__.UserService
  }];
};
TeacherTabsPage = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.Component)({
  selector: 'teacher-app-tabs',
  template: _teacher_tabs_page_html_ngResource__WEBPACK_IMPORTED_MODULE_1__,
  styles: [(_teacher_tabs_page_scss_ngResource__WEBPACK_IMPORTED_MODULE_2___default())]
})], TeacherTabsPage);


/***/ }),

/***/ 55438:
/*!****************************************!*\
  !*** ./src/app/services/auth.guard.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AuthGuard: () => (/* binding */ AuthGuard)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ 95072);
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./user-service */ 4286);
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/environments/environment */ 45312);
/* harmony import */ var crypto_js___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto-js/ */ 75720);
/* harmony import */ var crypto_js___WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto_js___WEBPACK_IMPORTED_MODULE_2__);





const AuthGuard = (route, state) => {
  const userService = (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.inject)(_user_service__WEBPACK_IMPORTED_MODULE_0__.UserService);
  const router = (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.inject)(_angular_router__WEBPACK_IMPORTED_MODULE_4__.Router);
  if (userService.isAuthenticated()) {
    userService.getUser().subscribe(result => {
      let roleId = localStorage.getItem("id");
      if (roleId && roleId != '') {
        let decryptedString = crypto_js___WEBPACK_IMPORTED_MODULE_2__.AES.decrypt(roleId, src_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.ENCRYPTION_PASSWORD).toString(crypto_js___WEBPACK_IMPORTED_MODULE_2__.enc.Utf8);
        if (decryptedString == "3") {
          router.navigate(['/teacher-app']);
        } else if (decryptedString == "5") {
          router.navigate(['/parent-app']);
        } else if (decryptedString == "6") {
          router.navigate(['/driver-app']);
        }
      } else {
        return true;
      }
    });
  } else {
    return true;
  }
};

/***/ }),

/***/ 38336:
/*!***************************************************!*\
  !*** ./src/app/services/common-method-service.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CommonMethodService: () => (/* binding */ CommonMethodService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 37580);


let CommonMethodService = class CommonMethodService {
  constructor() {
    this.headerTitle = "";
  }
  markAllFormgroupDirty(formGroup) {
    Object.keys(formGroup.controls).forEach(key => {
      formGroup.get(key)?.markAsDirty();
    });
    return true;
  }
  setHeaderTitle(title) {
    this.headerTitle = title;
  }
  getHeaderTitle() {
    return this.headerTitle;
  }
  setAttendanceDate(classAttendanceMissing) {
    this.classAttendanceMissing = classAttendanceMissing;
  }
  getAttendanceDate() {
    return this.classAttendanceMissing;
  }
  static #_ = this.ctorParameters = () => [];
};
CommonMethodService = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)({
  providedIn: 'root'
})], CommonMethodService);


/***/ }),

/***/ 93881:
/*!*********************************************!*\
  !*** ./src/app/services/fcm/fcm.service.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FCM_TOKEN: () => (/* binding */ FCM_TOKEN),
/* harmony export */   FcmService: () => (/* binding */ FcmService)
/* harmony export */ });
/* harmony import */ var _Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 89204);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @capacitor/core */ 14070);
/* harmony import */ var _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @capacitor/push-notifications */ 92132);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ 75797);
/* harmony import */ var _storage_storage_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../storage/storage.service */ 85217);
/* harmony import */ var _school_api_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../school-api-service */ 37020);








const FCM_TOKEN = 'push_notification_token';
let FcmService = class FcmService {
  get redirect() {
    return this._redirect.asObservable();
  }
  constructor(storage, AuthService) {
    this.storage = storage;
    this.AuthService = AuthService;
    this._redirect = new rxjs__WEBPACK_IMPORTED_MODULE_5__.BehaviorSubject(null);
  }
  registerPush() {
    var _this = this;
    return (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      try {
        yield _this.addListeners();
        let permStatus = yield _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_2__.PushNotifications.checkPermissions();
        if (permStatus.receive === 'prompt') {
          permStatus = yield _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_2__.PushNotifications.requestPermissions();
        }
        if (permStatus.receive !== 'granted') {
          throw new Error('User denied permissions!');
        }
        yield _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_2__.PushNotifications.register();
      } catch (e) {
        console.log(e);
      }
    })();
  }
  getDeliveredNotifications() {
    return (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const notificationList = yield _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_2__.PushNotifications.getDeliveredNotifications();
      console.log('delivered notifications', notificationList);
    })();
  }
  addListeners() {
    var _this2 = this;
    _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_2__.PushNotifications.addListener('registration', /*#__PURE__*/function () {
      var _ref = (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (token) {
        _this2.AuthService.saveFCMToken(token?.value).subscribe(result => {
          console.log("saved_token" + token?.value);
        });
      });
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_2__.PushNotifications.addListener('registrationError', error => {
      console.log('Error: ' + JSON.stringify(error));
    });
    _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_2__.PushNotifications.addListener('pushNotificationReceived', /*#__PURE__*/function () {
      var _ref2 = (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (notification) {
        console.log('Push received: ' + JSON.stringify(notification));
        const data = notification?.data;
        if (data?.redirect) _this2._redirect.next(data?.redirect);
      });
      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_2__.PushNotifications.addListener('pushNotificationActionPerformed', /*#__PURE__*/function () {
      var _ref3 = (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (notification) {
        const data = notification.notification.data;
        console.log('Action performed: ' + JSON.stringify(notification.notification));
        console.log('push data: ', data);
        if (data?.redirect) _this2._redirect.next(data?.redirect);
      });
      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
  }
  removeFcmToken() {
    var _this3 = this;
    return (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      try {
        const saved_token = JSON.parse((yield _this3.storage.getStorage(FCM_TOKEN)).value);
        _this3.storage.removeStorage(saved_token);
      } catch (e) {
        console.log(e);
        throw e;
      }
    })();
  }
  removeAllListener() {
    return (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_capacitor_core__WEBPACK_IMPORTED_MODULE_1__.Capacitor.getPlatform() !== 'web') {
        yield _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_2__.PushNotifications.removeAllListeners();
      }
    })();
  }
  clearFCMTokenAndRemoveListener() {
    var _this4 = this;
    return (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield _this4.removeFcmToken();
      yield _this4.removeAllListener();
    })();
  }
  static #_ = this.ctorParameters = () => [{
    type: _storage_storage_service__WEBPACK_IMPORTED_MODULE_3__.StorageService
  }, {
    type: _school_api_service__WEBPACK_IMPORTED_MODULE_4__.AuthServiceProxy
  }];
};
FcmService = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable)({
  providedIn: 'root'
})], FcmService);


/***/ }),

/***/ 96999:
/*!************************************************!*\
  !*** ./src/app/services/file-chunk-service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FileChunkService: () => (/* binding */ FileChunkService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 37580);


let FileChunkService = class FileChunkService {
  constructor() {}
  chunkFile(file, chunkSize) {
    const chunks = [];
    let offset = 0;
    while (offset < file.size) {
      const chunk = file.slice(offset, offset + chunkSize);
      chunks.push(chunk);
      offset += chunkSize;
    }
    return chunks;
  }
  static #_ = this.ctorParameters = () => [];
};
FileChunkService = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)({
  providedIn: 'root'
})], FileChunkService);


/***/ }),

/***/ 65894:
/*!********************************************!*\
  !*** ./src/app/services/loader-service.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LoaderService: () => (/* binding */ LoaderService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var ngx_spinner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ngx-spinner */ 61249);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ 75797);
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/environments/environment */ 45312);





let LoaderService = class LoaderService {
  constructor(spinner) {
    this.spinner = spinner;
    this.apiCount = 0;
    this.api = new rxjs__WEBPACK_IMPORTED_MODULE_1__.BehaviorSubject(this.apiCount);
    this.apiCountObservable = this.api.asObservable();
  }
  addAPI() {
    this.apiCount += 1;
    this.api.next(this.apiCount);
    if (this.apiCount != 0) {
      this.spinner.show();
    }
    console.log(src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.API_BASE_URL);
    console.log(`Ongoing API count ${this.apiCount}`);
  }
  removeAPI() {
    this.apiCount -= 1;
    this.api.next(this.apiCount);
    if (this.apiCount == 0) {
      this.spinner.hide();
    }
    console.log(`Ongoing API count ${this.apiCount}`);
  }
  static #_ = this.ctorParameters = () => [{
    type: ngx_spinner__WEBPACK_IMPORTED_MODULE_2__.NgxSpinnerService
  }];
};
LoaderService = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable)({
  providedIn: 'root'
})], LoaderService);


/***/ }),

/***/ 71570:
/*!**********************************************!*\
  !*** ./src/app/services/location-service.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LocationService: () => (/* binding */ LocationService)
/* harmony export */ });
/* harmony import */ var _Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 89204);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/environments/environment */ 45312);
/* harmony import */ var crypto_js___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto-js/ */ 75720);
/* harmony import */ var crypto_js___WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto_js___WEBPACK_IMPORTED_MODULE_2__);





let LocationService = class LocationService {
  constructor() {
    this.clientIPAddress = '';
    this.clientLatitude = '';
    this.clientLongitude = '';
  }
  getCurrentLocation() {
    return (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return new Promise((resolve, reject) => {
        if ('geolocation' in navigator) {
          navigator.geolocation.getCurrentPosition(position => {
            resolve(position);
          }, error => {
            reject(error);
          });
        } else {
          reject(new Error('Geolocation is not available.'));
        }
      });
    })();
  }
  fetchIpAddress() {
    return (0,_Users_admin_Documents_schoolhub_asm_code_ParentAppUI_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // Logic to fetch the public IP address using an API or other method
      const response = yield fetch(src_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.CLIENT_IPADDRESS_SERVICE);
      const data = yield response.json();
      return data.ip;
    })();
  }
  GetClientIPAddress() {
    if (this.clientIPAddress && this.clientIPAddress.length > 0) {
      return this.clientIPAddress;
    } else {
      let encryptedClientIPAddress = localStorage.getItem('ipAddress');
      if (encryptedClientIPAddress && encryptedClientIPAddress.length > 0) {
        let decryptedString = crypto_js___WEBPACK_IMPORTED_MODULE_2__.AES.decrypt(encryptedClientIPAddress, src_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.ENCRYPTION_PASSWORD).toString(crypto_js___WEBPACK_IMPORTED_MODULE_2__.enc.Utf8);
        return decryptedString;
      }
    }
    return '';
  }
  GetClientLatitude() {
    if (this.clientLatitude && this.clientLatitude.length > 0) {
      return this.clientLatitude;
    } else {
      let encryptedClientLatitude = localStorage.getItem('latitude');
      if (encryptedClientLatitude && encryptedClientLatitude.length > 0) {
        let decryptedString = crypto_js___WEBPACK_IMPORTED_MODULE_2__.AES.decrypt(encryptedClientLatitude, src_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.ENCRYPTION_PASSWORD).toString(crypto_js___WEBPACK_IMPORTED_MODULE_2__.enc.Utf8);
        return decryptedString;
      }
    }
    return '';
  }
  GetClientLongitude() {
    if (this.clientLongitude && this.clientLongitude.length > 0) {
      return this.clientLongitude;
    } else {
      let encryptedClientLongitude = localStorage.getItem('longitude');
      if (encryptedClientLongitude && encryptedClientLongitude.length > 0) {
        let decryptedString = crypto_js___WEBPACK_IMPORTED_MODULE_2__.AES.decrypt(encryptedClientLongitude, src_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.ENCRYPTION_PASSWORD).toString(crypto_js___WEBPACK_IMPORTED_MODULE_2__.enc.Utf8);
        return decryptedString;
      }
    }
    return '';
  }
  SetClientIPAddress(ipAddress) {
    this.clientIPAddress = ipAddress;
    let encryptedIPAddressString = crypto_js___WEBPACK_IMPORTED_MODULE_2__.AES.encrypt(ipAddress, src_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.ENCRYPTION_PASSWORD).toString();
    localStorage.setItem('ipAddress', encryptedIPAddressString);
  }
  SetClientLatitude(position) {
    this.clientLatitude = position.coords.latitude.toString();
    let encryptedLatitudeString = crypto_js___WEBPACK_IMPORTED_MODULE_2__.AES.encrypt(position.coords.latitude.toString(), src_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.ENCRYPTION_PASSWORD).toString();
    localStorage.setItem('latitude:', encryptedLatitudeString);
  }
  SetClientLongitude(position) {
    this.clientLongitude = position.coords.longitude.toString();
    let encryptedLongitudeString = crypto_js___WEBPACK_IMPORTED_MODULE_2__.AES.encrypt(position.coords.longitude.toString(), src_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.ENCRYPTION_PASSWORD).toString();
    localStorage.setItem('longitude:', encryptedLongitudeString);
  }
};
LocationService = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable)({
  providedIn: 'root'
})], LocationService);


/***/ }),

/***/ 37020:
/*!************************************************!*\
  !*** ./src/app/services/school-api-service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   API_BASE_URL: () => (/* binding */ API_BASE_URL),
/* harmony export */   AcademicYear: () => (/* binding */ AcademicYear),
/* harmony export */   AcademicYearResponse: () => (/* binding */ AcademicYearResponse),
/* harmony export */   AccessServiceProxy: () => (/* binding */ AccessServiceProxy),
/* harmony export */   ActiceInActiveVehicleDto: () => (/* binding */ ActiceInActiveVehicleDto),
/* harmony export */   AddmissionCount: () => (/* binding */ AddmissionCount),
/* harmony export */   AddressMasterDto: () => (/* binding */ AddressMasterDto),
/* harmony export */   AdhocFeePaymentDaywiseReportDto: () => (/* binding */ AdhocFeePaymentDaywiseReportDto),
/* harmony export */   AdhocFeePaymentHistorySelectDto: () => (/* binding */ AdhocFeePaymentHistorySelectDto),
/* harmony export */   AdhocFeePaymentSelectDto: () => (/* binding */ AdhocFeePaymentSelectDto),
/* harmony export */   AdhocFeePaymentServiceProxy: () => (/* binding */ AdhocFeePaymentServiceProxy),
/* harmony export */   AdhocFeePaymentUpsertDto: () => (/* binding */ AdhocFeePaymentUpsertDto),
/* harmony export */   AdhocParticularMasterDto: () => (/* binding */ AdhocParticularMasterDto),
/* harmony export */   AdhocParticularMasterDtoInsertRespose: () => (/* binding */ AdhocParticularMasterDtoInsertRespose),
/* harmony export */   AdhocParticularMasterDtoListRespose: () => (/* binding */ AdhocParticularMasterDtoListRespose),
/* harmony export */   AdhocParticularMasterServiceProxy: () => (/* binding */ AdhocParticularMasterServiceProxy),
/* harmony export */   AdminDashboardCountDto: () => (/* binding */ AdminDashboardCountDto),
/* harmony export */   AdminDeleteRespose: () => (/* binding */ AdminDeleteRespose),
/* harmony export */   AdminDto: () => (/* binding */ AdminDto),
/* harmony export */   AdminServiceProxy: () => (/* binding */ AdminServiceProxy),
/* harmony export */   ApiException: () => (/* binding */ ApiException),
/* harmony export */   ApiServiceProxy: () => (/* binding */ ApiServiceProxy),
/* harmony export */   AppVersionDto: () => (/* binding */ AppVersionDto),
/* harmony export */   AreaDeleteRespose: () => (/* binding */ AreaDeleteRespose),
/* harmony export */   AreaDto: () => (/* binding */ AreaDto),
/* harmony export */   AreaNameDropDownReasponseDto: () => (/* binding */ AreaNameDropDownReasponseDto),
/* harmony export */   AttendancePercentage: () => (/* binding */ AttendancePercentage),
/* harmony export */   AuthServiceProxy: () => (/* binding */ AuthServiceProxy),
/* harmony export */   AvailFeeWavierDiscByInstallmentDto: () => (/* binding */ AvailFeeWavierDiscByInstallmentDto),
/* harmony export */   AvailFeeWavierDiscDto: () => (/* binding */ AvailFeeWavierDiscDto),
/* harmony export */   BonafiedDto: () => (/* binding */ BonafiedDto),
/* harmony export */   CabDriverActiveTripDto: () => (/* binding */ CabDriverActiveTripDto),
/* harmony export */   CabDriverActiveTripRequestDto: () => (/* binding */ CabDriverActiveTripRequestDto),
/* harmony export */   CabDriverAppRouteDto: () => (/* binding */ CabDriverAppRouteDto),
/* harmony export */   CabDriverAppServiceProxy: () => (/* binding */ CabDriverAppServiceProxy),
/* harmony export */   CabDriverAppTripDetailsDto: () => (/* binding */ CabDriverAppTripDetailsDto),
/* harmony export */   CabDriverDeleteRespose: () => (/* binding */ CabDriverDeleteRespose),
/* harmony export */   CabDriverDropDownReasponseDto: () => (/* binding */ CabDriverDropDownReasponseDto),
/* harmony export */   CabDriverDto: () => (/* binding */ CabDriverDto),
/* harmony export */   CabDriverLocationDto: () => (/* binding */ CabDriverLocationDto),
/* harmony export */   CabDriverProfileAppDto: () => (/* binding */ CabDriverProfileAppDto),
/* harmony export */   CabDriverRouteListDto: () => (/* binding */ CabDriverRouteListDto),
/* harmony export */   CabDriverServiceProxy: () => (/* binding */ CabDriverServiceProxy),
/* harmony export */   CabDriverTripDto: () => (/* binding */ CabDriverTripDto),
/* harmony export */   CabDriverTripNotificationDto: () => (/* binding */ CabDriverTripNotificationDto),
/* harmony export */   CabDriverTripNotificationResponceDto: () => (/* binding */ CabDriverTripNotificationResponceDto),
/* harmony export */   CabdriverAppStoppageDto: () => (/* binding */ CabdriverAppStoppageDto),
/* harmony export */   CabdriverAppStoppageStudentDto: () => (/* binding */ CabdriverAppStoppageStudentDto),
/* harmony export */   CabdriverAppStudentDto: () => (/* binding */ CabdriverAppStudentDto),
/* harmony export */   CalendarDateRequestDto: () => (/* binding */ CalendarDateRequestDto),
/* harmony export */   CalendarParentAppModuleDto: () => (/* binding */ CalendarParentAppModuleDto),
/* harmony export */   CardDaywiseAdhocPaymentReport: () => (/* binding */ CardDaywiseAdhocPaymentReport),
/* harmony export */   CardDaywisePaymentReport: () => (/* binding */ CardDaywisePaymentReport),
/* harmony export */   CardDaywiseTransportPaymentReport: () => (/* binding */ CardDaywiseTransportPaymentReport),
/* harmony export */   CardStudentKitDaywisePaymentReport: () => (/* binding */ CardStudentKitDaywisePaymentReport),
/* harmony export */   CashDaywiseAdhocPaymentReport: () => (/* binding */ CashDaywiseAdhocPaymentReport),
/* harmony export */   CashDaywisePaymentReport: () => (/* binding */ CashDaywisePaymentReport),
/* harmony export */   CashDaywiseTransportPaymentReport: () => (/* binding */ CashDaywiseTransportPaymentReport),
/* harmony export */   CashStudentKitDaywisePaymentReport: () => (/* binding */ CashStudentKitDaywisePaymentReport),
/* harmony export */   CasteWiseStudentCountResponseDto: () => (/* binding */ CasteWiseStudentCountResponseDto),
/* harmony export */   CategoryWiseStudentCountReportDTO: () => (/* binding */ CategoryWiseStudentCountReportDTO),
/* harmony export */   CategoryWiseStudentCountReportResponseDTO: () => (/* binding */ CategoryWiseStudentCountReportResponseDTO),
/* harmony export */   CertificateAuditDto: () => (/* binding */ CertificateAuditDto),
/* harmony export */   CertificateDto: () => (/* binding */ CertificateDto),
/* harmony export */   CertificateIdModelResponse: () => (/* binding */ CertificateIdModelResponse),
/* harmony export */   CertificateServiceProxy: () => (/* binding */ CertificateServiceProxy),
/* harmony export */   CharacterCertificateDto: () => (/* binding */ CharacterCertificateDto),
/* harmony export */   ChequeDaywiseAdhocPaymentReport: () => (/* binding */ ChequeDaywiseAdhocPaymentReport),
/* harmony export */   ChequeDaywisePaymentReport: () => (/* binding */ ChequeDaywisePaymentReport),
/* harmony export */   ChequeDaywiseTransportPaymentReport: () => (/* binding */ ChequeDaywiseTransportPaymentReport),
/* harmony export */   ChequeStudentKitDaywisePaymentReport: () => (/* binding */ ChequeStudentKitDaywisePaymentReport),
/* harmony export */   ClassAttendanceMissingReportDto: () => (/* binding */ ClassAttendanceMissingReportDto),
/* harmony export */   ClassAttendanceMissingReportResponseDto: () => (/* binding */ ClassAttendanceMissingReportResponseDto),
/* harmony export */   ClassAttendanceMissingReportServiceProxy: () => (/* binding */ ClassAttendanceMissingReportServiceProxy),
/* harmony export */   ClassTeacherDataDto: () => (/* binding */ ClassTeacherDataDto),
/* harmony export */   ClassTeacherDataServiceProxy: () => (/* binding */ ClassTeacherDataServiceProxy),
/* harmony export */   ClassTeacherDto: () => (/* binding */ ClassTeacherDto),
/* harmony export */   ClassTeacherGradeDivisionListDto: () => (/* binding */ ClassTeacherGradeDivisionListDto),
/* harmony export */   ClassTeacherListDto: () => (/* binding */ ClassTeacherListDto),
/* harmony export */   ClassTeacherResponseDto: () => (/* binding */ ClassTeacherResponseDto),
/* harmony export */   ClassTimeTableColumnDetailDto: () => (/* binding */ ClassTimeTableColumnDetailDto),
/* harmony export */   ClassTimeTableDto: () => (/* binding */ ClassTimeTableDto),
/* harmony export */   ClassTimeTableRowDetailDto: () => (/* binding */ ClassTimeTableRowDetailDto),
/* harmony export */   ClassTimeTableSelectResponseDto: () => (/* binding */ ClassTimeTableSelectResponseDto),
/* harmony export */   ClassTimeTableServiceProxy: () => (/* binding */ ClassTimeTableServiceProxy),
/* harmony export */   ClassWiseStudentDto: () => (/* binding */ ClassWiseStudentDto),
/* harmony export */   ClassWiseStudentResponseDto: () => (/* binding */ ClassWiseStudentResponseDto),
/* harmony export */   ClassWiseTeacherAndStudentServiceProxy: () => (/* binding */ ClassWiseTeacherAndStudentServiceProxy),
/* harmony export */   ClerkDeleteRespose: () => (/* binding */ ClerkDeleteRespose),
/* harmony export */   ClerkDto: () => (/* binding */ ClerkDto),
/* harmony export */   ClerkServiceProxy: () => (/* binding */ ClerkServiceProxy),
/* harmony export */   Columns: () => (/* binding */ Columns),
/* harmony export */   CommonAppServiceProxy: () => (/* binding */ CommonAppServiceProxy),
/* harmony export */   CommonDivisionWithDisabled: () => (/* binding */ CommonDivisionWithDisabled),
/* harmony export */   CommonDropdownSelectListItemDto: () => (/* binding */ CommonDropdownSelectListItemDto),
/* harmony export */   CommonDropdownSelectListItemResponseDto: () => (/* binding */ CommonDropdownSelectListItemResponseDto),
/* harmony export */   CommonSuccessResponse: () => (/* binding */ CommonSuccessResponse),
/* harmony export */   CommonSuccessResponseEnum: () => (/* binding */ CommonSuccessResponseEnum),
/* harmony export */   ConsumerByStoppageIdInputDto: () => (/* binding */ ConsumerByStoppageIdInputDto),
/* harmony export */   ConsumerDeleteResposeDto: () => (/* binding */ ConsumerDeleteResposeDto),
/* harmony export */   ConsumerTransportMappingDto: () => (/* binding */ ConsumerTransportMappingDto),
/* harmony export */   ConsumerTransportMappingUpsertDto: () => (/* binding */ ConsumerTransportMappingUpsertDto),
/* harmony export */   CountryMasterDto: () => (/* binding */ CountryMasterDto),
/* harmony export */   CreateTimeTableResponse: () => (/* binding */ CreateTimeTableResponse),
/* harmony export */   CreateTransportConsumerResponse: () => (/* binding */ CreateTransportConsumerResponse),
/* harmony export */   DDDaywiseAdhocPaymentReport: () => (/* binding */ DDDaywiseAdhocPaymentReport),
/* harmony export */   DDDaywisePaymentReport: () => (/* binding */ DDDaywisePaymentReport),
/* harmony export */   DDDaywiseTransportPaymentReport: () => (/* binding */ DDDaywiseTransportPaymentReport),
/* harmony export */   DDStudentKitDaywisePaymentReport: () => (/* binding */ DDStudentKitDaywisePaymentReport),
/* harmony export */   DashBoardServiceProxy: () => (/* binding */ DashBoardServiceProxy),
/* harmony export */   DashBoardStaffDetails: () => (/* binding */ DashBoardStaffDetails),
/* harmony export */   DashBoardStaffDetailsDto: () => (/* binding */ DashBoardStaffDetailsDto),
/* harmony export */   DashboardCountDto: () => (/* binding */ DashboardCountDto),
/* harmony export */   DatatableRequestModel: () => (/* binding */ DatatableRequestModel),
/* harmony export */   DatatableRequestWrapper: () => (/* binding */ DatatableRequestWrapper),
/* harmony export */   DatatableResponseModel: () => (/* binding */ DatatableResponseModel),
/* harmony export */   DaywiseAdhocPaymentReport: () => (/* binding */ DaywiseAdhocPaymentReport),
/* harmony export */   DaywiseAdhocPaymentReportRequest: () => (/* binding */ DaywiseAdhocPaymentReportRequest),
/* harmony export */   DaywiseAdhocPaymentReportTotal: () => (/* binding */ DaywiseAdhocPaymentReportTotal),
/* harmony export */   DaywisePaymentReport: () => (/* binding */ DaywisePaymentReport),
/* harmony export */   DaywisePaymentReportDTO: () => (/* binding */ DaywisePaymentReportDTO),
/* harmony export */   DaywisePaymentReportRequest: () => (/* binding */ DaywisePaymentReportRequest),
/* harmony export */   DaywisePaymentReportTotal: () => (/* binding */ DaywisePaymentReportTotal),
/* harmony export */   DaywiseTransportPaymentReport: () => (/* binding */ DaywiseTransportPaymentReport),
/* harmony export */   DaywiseTransportPaymentReportRequest: () => (/* binding */ DaywiseTransportPaymentReportRequest),
/* harmony export */   DaywiseTransportPaymentReportTotal: () => (/* binding */ DaywiseTransportPaymentReportTotal),
/* harmony export */   DistrictMasterDto: () => (/* binding */ DistrictMasterDto),
/* harmony export */   Division: () => (/* binding */ Division),
/* harmony export */   DivisionDeleteRespose: () => (/* binding */ DivisionDeleteRespose),
/* harmony export */   DivisionDto: () => (/* binding */ DivisionDto),
/* harmony export */   DivisionServiceProxy: () => (/* binding */ DivisionServiceProxy),
/* harmony export */   DivisionUpdateleteRespose: () => (/* binding */ DivisionUpdateleteRespose),
/* harmony export */   DropdownResponseDto: () => (/* binding */ DropdownResponseDto),
/* harmony export */   ExistResposeDto: () => (/* binding */ ExistResposeDto),
/* harmony export */   FeeCollectionPercentage: () => (/* binding */ FeeCollectionPercentage),
/* harmony export */   FeeInstallmentDetailDto: () => (/* binding */ FeeInstallmentDetailDto),
/* harmony export */   FeeParticularCloneDto: () => (/* binding */ FeeParticularCloneDto),
/* harmony export */   FeeParticularServiceProxy: () => (/* binding */ FeeParticularServiceProxy),
/* harmony export */   FeeParticularsDto: () => (/* binding */ FeeParticularsDto),
/* harmony export */   FeeParticularsSelectDto: () => (/* binding */ FeeParticularsSelectDto),
/* harmony export */   FeePaymentAdditionalDiscount: () => (/* binding */ FeePaymentAdditionalDiscount),
/* harmony export */   FeePaymentAndDiscountSectionDto: () => (/* binding */ FeePaymentAndDiscountSectionDto),
/* harmony export */   FeePaymentAppliedWavierMappingTypeUpsertDto: () => (/* binding */ FeePaymentAppliedWavierMappingTypeUpsertDto),
/* harmony export */   FeePaymentDetailTypeUpsertDto: () => (/* binding */ FeePaymentDetailTypeUpsertDto),
/* harmony export */   FeePaymentDiscount: () => (/* binding */ FeePaymentDiscount),
/* harmony export */   FeePaymentHistorySelectDto: () => (/* binding */ FeePaymentHistorySelectDto),
/* harmony export */   FeePaymentParticularSectionDto: () => (/* binding */ FeePaymentParticularSectionDto),
/* harmony export */   FeePaymentParticulars: () => (/* binding */ FeePaymentParticulars),
/* harmony export */   FeePaymentSelectDto: () => (/* binding */ FeePaymentSelectDto),
/* harmony export */   FeePaymentServiceProxy: () => (/* binding */ FeePaymentServiceProxy),
/* harmony export */   FeePaymentTopSectionDto: () => (/* binding */ FeePaymentTopSectionDto),
/* harmony export */   FeePaymentUpsertDto: () => (/* binding */ FeePaymentUpsertDto),
/* harmony export */   FeeStructureDto: () => (/* binding */ FeeStructureDto),
/* harmony export */   FeeWaiverDto: () => (/* binding */ FeeWaiverDto),
/* harmony export */   FeeWaiverResponseDto: () => (/* binding */ FeeWaiverResponseDto),
/* harmony export */   FeeWavierTypeDeleteResponseDto: () => (/* binding */ FeeWavierTypeDeleteResponseDto),
/* harmony export */   FeeWavierTypeSelectDto: () => (/* binding */ FeeWavierTypeSelectDto),
/* harmony export */   FeeWavierTypeServiceProxy: () => (/* binding */ FeeWavierTypeServiceProxy),
/* harmony export */   FeeWavierTypeUpsertDto: () => (/* binding */ FeeWavierTypeUpsertDto),
/* harmony export */   FeeWavierTypesInstallmentsDetailsTypeDto: () => (/* binding */ FeeWavierTypesInstallmentsDetailsTypeDto),
/* harmony export */   ForgotPasswordRequestDto: () => (/* binding */ ForgotPasswordRequestDto),
/* harmony export */   GalleryDto: () => (/* binding */ GalleryDto),
/* harmony export */   GalleryFileDto: () => (/* binding */ GalleryFileDto),
/* harmony export */   GalleryListDto: () => (/* binding */ GalleryListDto),
/* harmony export */   GalleryMediaContentDto: () => (/* binding */ GalleryMediaContentDto),
/* harmony export */   GalleryServiceProxy: () => (/* binding */ GalleryServiceProxy),
/* harmony export */   GalleryUpsertDto: () => (/* binding */ GalleryUpsertDto),
/* harmony export */   GirlsBoysCount: () => (/* binding */ GirlsBoysCount),
/* harmony export */   GirlsBoysCountDto: () => (/* binding */ GirlsBoysCountDto),
/* harmony export */   Grade: () => (/* binding */ Grade),
/* harmony export */   GradeDeleteRespose: () => (/* binding */ GradeDeleteRespose),
/* harmony export */   GradeDivisionMasterDto: () => (/* binding */ GradeDivisionMasterDto),
/* harmony export */   GradeDivisionMatrixDeleteRespose: () => (/* binding */ GradeDivisionMatrixDeleteRespose),
/* harmony export */   GradeDivisionMatrixDto: () => (/* binding */ GradeDivisionMatrixDto),
/* harmony export */   GradeDivisionMatrixServiceProxy: () => (/* binding */ GradeDivisionMatrixServiceProxy),
/* harmony export */   GradeDivisionWithDisabledCommonMasterDto: () => (/* binding */ GradeDivisionWithDisabledCommonMasterDto),
/* harmony export */   GradeDto: () => (/* binding */ GradeDto),
/* harmony export */   GradeServiceProxy: () => (/* binding */ GradeServiceProxy),
/* harmony export */   GradeUpdateRespose: () => (/* binding */ GradeUpdateRespose),
/* harmony export */   HomeworkDto: () => (/* binding */ HomeworkDto),
/* harmony export */   HomeworkFileDto: () => (/* binding */ HomeworkFileDto),
/* harmony export */   HomeworkListDto: () => (/* binding */ HomeworkListDto),
/* harmony export */   HomeworkMediaContentDto: () => (/* binding */ HomeworkMediaContentDto),
/* harmony export */   HomeworkServiceProxy: () => (/* binding */ HomeworkServiceProxy),
/* harmony export */   HomeworkUpsertDto: () => (/* binding */ HomeworkUpsertDto),
/* harmony export */   IdCardDto: () => (/* binding */ IdCardDto),
/* harmony export */   IdealTeacher: () => (/* binding */ IdealTeacher),
/* harmony export */   IdealTeacherListResponseDto: () => (/* binding */ IdealTeacherListResponseDto),
/* harmony export */   IdealTeachersWithHrsAndMinsDto: () => (/* binding */ IdealTeachersWithHrsAndMinsDto),
/* harmony export */   ImportStudentDataDto: () => (/* binding */ ImportStudentDataDto),
/* harmony export */   ImportSubjectDataDto: () => (/* binding */ ImportSubjectDataDto),
/* harmony export */   ImportTeacherDataDto: () => (/* binding */ ImportTeacherDataDto),
/* harmony export */   LeavingCertificateDto: () => (/* binding */ LeavingCertificateDto),
/* harmony export */   LeavingCertificateGridDto: () => (/* binding */ LeavingCertificateGridDto),
/* harmony export */   LeavingCertificateHistory: () => (/* binding */ LeavingCertificateHistory),
/* harmony export */   LoginDto: () => (/* binding */ LoginDto),
/* harmony export */   MarkTimeTableActiveRequestModel: () => (/* binding */ MarkTimeTableActiveRequestModel),
/* harmony export */   MarkTimeTableActiveSelectModel: () => (/* binding */ MarkTimeTableActiveSelectModel),
/* harmony export */   MasterServiceProxy: () => (/* binding */ MasterServiceProxy),
/* harmony export */   MediaContentType: () => (/* binding */ MediaContentType),
/* harmony export */   MediaContentType2: () => (/* binding */ MediaContentType2),
/* harmony export */   MediaContentType3: () => (/* binding */ MediaContentType3),
/* harmony export */   MediaContentType4: () => (/* binding */ MediaContentType4),
/* harmony export */   MediaGalleryContentDto: () => (/* binding */ MediaGalleryContentDto),
/* harmony export */   MediumType: () => (/* binding */ MediumType),
/* harmony export */   MediumTypeResponse: () => (/* binding */ MediumTypeResponse),
/* harmony export */   MissingAttendanceParentAppDto: () => (/* binding */ MissingAttendanceParentAppDto),
/* harmony export */   Module: () => (/* binding */ Module),
/* harmony export */   ModuleDto: () => (/* binding */ ModuleDto),
/* harmony export */   ModuleMasterDto: () => (/* binding */ ModuleMasterDto),
/* harmony export */   ModulePermissionDto: () => (/* binding */ ModulePermissionDto),
/* harmony export */   MonthMasterDto: () => (/* binding */ MonthMasterDto),
/* harmony export */   MonthMasterResponse: () => (/* binding */ MonthMasterResponse),
/* harmony export */   NetBankingAdhocDaywisePaymentReport: () => (/* binding */ NetBankingAdhocDaywisePaymentReport),
/* harmony export */   NetBankingDaywisePaymentReport: () => (/* binding */ NetBankingDaywisePaymentReport),
/* harmony export */   NetBankingStudentKitDaywisePaymentReport: () => (/* binding */ NetBankingStudentKitDaywisePaymentReport),
/* harmony export */   NetBankingTransportDaywisePaymentReport: () => (/* binding */ NetBankingTransportDaywisePaymentReport),
/* harmony export */   NoticeDto: () => (/* binding */ NoticeDto),
/* harmony export */   NoticeFileDto: () => (/* binding */ NoticeFileDto),
/* harmony export */   NoticeListDto: () => (/* binding */ NoticeListDto),
/* harmony export */   NoticeServiceProxy: () => (/* binding */ NoticeServiceProxy),
/* harmony export */   NoticeUpsertDto: () => (/* binding */ NoticeUpsertDto),
/* harmony export */   NoticetMediaContentDto: () => (/* binding */ NoticetMediaContentDto),
/* harmony export */   OneMonthEventDateParentAppDto: () => (/* binding */ OneMonthEventDateParentAppDto),
/* harmony export */   OneMonthEventDateTeacherAppDto: () => (/* binding */ OneMonthEventDateTeacherAppDto),
/* harmony export */   OneMonthEventFileDetailsParentAppDto: () => (/* binding */ OneMonthEventFileDetailsParentAppDto),
/* harmony export */   OneMonthEventFileDetailsTeacherAppDto: () => (/* binding */ OneMonthEventFileDetailsTeacherAppDto),
/* harmony export */   OneMonthEventParentAppDto: () => (/* binding */ OneMonthEventParentAppDto),
/* harmony export */   OneMonthEventParentAppResponseDto: () => (/* binding */ OneMonthEventParentAppResponseDto),
/* harmony export */   Order: () => (/* binding */ Order),
/* harmony export */   ParentAppGalleryDetailDto: () => (/* binding */ ParentAppGalleryDetailDto),
/* harmony export */   ParentAppGalleryDto: () => (/* binding */ ParentAppGalleryDto),
/* harmony export */   ParentAppGalleryRequestDto: () => (/* binding */ ParentAppGalleryRequestDto),
/* harmony export */   ParentAppGalleryResponseDto: () => (/* binding */ ParentAppGalleryResponseDto),
/* harmony export */   ParentAppHomeworkDetailDto: () => (/* binding */ ParentAppHomeworkDetailDto),
/* harmony export */   ParentAppHomeworkDto: () => (/* binding */ ParentAppHomeworkDto),
/* harmony export */   ParentAppHomeworkMediaContentDto: () => (/* binding */ ParentAppHomeworkMediaContentDto),
/* harmony export */   ParentAppHomeworkRequestDto: () => (/* binding */ ParentAppHomeworkRequestDto),
/* harmony export */   ParentAppHomeworkResponseDto: () => (/* binding */ ParentAppHomeworkResponseDto),
/* harmony export */   ParentAppNoticeDetailDto: () => (/* binding */ ParentAppNoticeDetailDto),
/* harmony export */   ParentAppNoticeDto: () => (/* binding */ ParentAppNoticeDto),
/* harmony export */   ParentAppNoticeRequestDto: () => (/* binding */ ParentAppNoticeRequestDto),
/* harmony export */   ParentAppNoticeResponseDto: () => (/* binding */ ParentAppNoticeResponseDto),
/* harmony export */   ParentAppServiceProxy: () => (/* binding */ ParentAppServiceProxy),
/* harmony export */   ParentDeleteRespose: () => (/* binding */ ParentDeleteRespose),
/* harmony export */   ParentDto: () => (/* binding */ ParentDto),
/* harmony export */   ParentProfileMobileDto: () => (/* binding */ ParentProfileMobileDto),
/* harmony export */   ParentProfileMobileResponseDto: () => (/* binding */ ParentProfileMobileResponseDto),
/* harmony export */   ParentServiceProxy: () => (/* binding */ ParentServiceProxy),
/* harmony export */   PaymentAnalyticsDivisionDto: () => (/* binding */ PaymentAnalyticsDivisionDto),
/* harmony export */   PaymentAnalyticsDivisionExportDto: () => (/* binding */ PaymentAnalyticsDivisionExportDto),
/* harmony export */   PaymentAnalyticsDto: () => (/* binding */ PaymentAnalyticsDto),
/* harmony export */   PaymentAnalyticsExportDto: () => (/* binding */ PaymentAnalyticsExportDto),
/* harmony export */   PaymentAnalyticsExportServiceProxy: () => (/* binding */ PaymentAnalyticsExportServiceProxy),
/* harmony export */   PaymentAnalyticsGradeDto: () => (/* binding */ PaymentAnalyticsGradeDto),
/* harmony export */   PaymentAnalyticsGradeExportDto: () => (/* binding */ PaymentAnalyticsGradeExportDto),
/* harmony export */   PaymentAnalyticsSchoolDto: () => (/* binding */ PaymentAnalyticsSchoolDto),
/* harmony export */   PaymentAnalyticsSchoolExportDto: () => (/* binding */ PaymentAnalyticsSchoolExportDto),
/* harmony export */   PaymentAnalyticsServiceProxy: () => (/* binding */ PaymentAnalyticsServiceProxy),
/* harmony export */   PaymentAnalyticsStudentDto: () => (/* binding */ PaymentAnalyticsStudentDto),
/* harmony export */   PaymentFeePageMasterActivityList: () => (/* binding */ PaymentFeePageMasterActivityList),
/* harmony export */   PaymentHistoryReceiptDto: () => (/* binding */ PaymentHistoryReceiptDto),
/* harmony export */   Permission: () => (/* binding */ Permission),
/* harmony export */   PermissionDto: () => (/* binding */ PermissionDto),
/* harmony export */   PermissionMasterDto: () => (/* binding */ PermissionMasterDto),
/* harmony export */   ProjectMediaContentDto: () => (/* binding */ ProjectMediaContentDto),
/* harmony export */   PromoteGridDto: () => (/* binding */ PromoteGridDto),
/* harmony export */   PromoteGridRequestDto: () => (/* binding */ PromoteGridRequestDto),
/* harmony export */   PromoteGridResponseDto: () => (/* binding */ PromoteGridResponseDto),
/* harmony export */   PromoteServiceProxy: () => (/* binding */ PromoteServiceProxy),
/* harmony export */   PublishUnpublishGalleryDto: () => (/* binding */ PublishUnpublishGalleryDto),
/* harmony export */   PublishUnpublishHomeworkDto: () => (/* binding */ PublishUnpublishHomeworkDto),
/* harmony export */   PublishUnpublishNoticeDto: () => (/* binding */ PublishUnpublishNoticeDto),
/* harmony export */   PublishUnpublishParticularDto: () => (/* binding */ PublishUnpublishParticularDto),
/* harmony export */   PublishUnpublishSchoolEventDto: () => (/* binding */ PublishUnpublishSchoolEventDto),
/* harmony export */   PublishUnpublishSurveyDto: () => (/* binding */ PublishUnpublishSurveyDto),
/* harmony export */   RTEStudentCountReportDTO: () => (/* binding */ RTEStudentCountReportDTO),
/* harmony export */   RTEStudentCountReportResponseDto: () => (/* binding */ RTEStudentCountReportResponseDto),
/* harmony export */   ReligionWiseStudentCountReporResponsetDTO: () => (/* binding */ ReligionWiseStudentCountReporResponsetDTO),
/* harmony export */   ReligionWiseStudentCountReportDTO: () => (/* binding */ ReligionWiseStudentCountReportDTO),
/* harmony export */   RequestReportDto: () => (/* binding */ RequestReportDto),
/* harmony export */   ResetPasswordRequestDto: () => (/* binding */ ResetPasswordRequestDto),
/* harmony export */   ResponseExportStudentDataDto: () => (/* binding */ ResponseExportStudentDataDto),
/* harmony export */   ResponseExportTeacherDataDto: () => (/* binding */ ResponseExportTeacherDataDto),
/* harmony export */   ResponseImportStudentDataDto: () => (/* binding */ ResponseImportStudentDataDto),
/* harmony export */   ResponseImportSubjectDataDto: () => (/* binding */ ResponseImportSubjectDataDto),
/* harmony export */   ResponseImportTeacherDataDto: () => (/* binding */ ResponseImportTeacherDataDto),
/* harmony export */   ResposnseDublicateGenRegNo: () => (/* binding */ ResposnseDublicateGenRegNo),
/* harmony export */   ResposnsePaymentHistory: () => (/* binding */ ResposnsePaymentHistory),
/* harmony export */   RoleMasterDto: () => (/* binding */ RoleMasterDto),
/* harmony export */   RoleModuleDto: () => (/* binding */ RoleModuleDto),
/* harmony export */   RouteDeleteRespose: () => (/* binding */ RouteDeleteRespose),
/* harmony export */   RouteDto: () => (/* binding */ RouteDto),
/* harmony export */   RouteGridInputRequestDto: () => (/* binding */ RouteGridInputRequestDto),
/* harmony export */   RouteListResponse: () => (/* binding */ RouteListResponse),
/* harmony export */   SchoolCalendarAppResponseDto: () => (/* binding */ SchoolCalendarAppResponseDto),
/* harmony export */   SchoolCalendarDto: () => (/* binding */ SchoolCalendarDto),
/* harmony export */   SchoolCalendarEventDetailAppDto: () => (/* binding */ SchoolCalendarEventDetailAppDto),
/* harmony export */   SchoolCalendarResponseDto: () => (/* binding */ SchoolCalendarResponseDto),
/* harmony export */   SchoolCalendarServiceProxy: () => (/* binding */ SchoolCalendarServiceProxy),
/* harmony export */   SchoolDetailMobileDto: () => (/* binding */ SchoolDetailMobileDto),
/* harmony export */   SchoolDto: () => (/* binding */ SchoolDto),
/* harmony export */   SchoolEventDto: () => (/* binding */ SchoolEventDto),
/* harmony export */   SchoolEventFileDto: () => (/* binding */ SchoolEventFileDto),
/* harmony export */   SchoolEventServiceProxy: () => (/* binding */ SchoolEventServiceProxy),
/* harmony export */   SchoolGradeDivisionMatrixDto: () => (/* binding */ SchoolGradeDivisionMatrixDto),
/* harmony export */   SchoolGradeDivisionMatrixWithDisabledDto: () => (/* binding */ SchoolGradeDivisionMatrixWithDisabledDto),
/* harmony export */   SchoolHolidayDetailDto: () => (/* binding */ SchoolHolidayDetailDto),
/* harmony export */   SchoolHolidayResponseDto: () => (/* binding */ SchoolHolidayResponseDto),
/* harmony export */   SchoolHolidayServiceProxy: () => (/* binding */ SchoolHolidayServiceProxy),
/* harmony export */   SchoolMonthEventDto: () => (/* binding */ SchoolMonthEventDto),
/* harmony export */   SchoolMonthEventResponseDto: () => (/* binding */ SchoolMonthEventResponseDto),
/* harmony export */   SchoolMonthEventServiceProxy: () => (/* binding */ SchoolMonthEventServiceProxy),
/* harmony export */   SchoolNgbDateModel: () => (/* binding */ SchoolNgbDateModel),
/* harmony export */   SchoolNgbTimeModel: () => (/* binding */ SchoolNgbTimeModel),
/* harmony export */   SchoolParentCalendarEventDetailAppDto: () => (/* binding */ SchoolParentCalendarEventDetailAppDto),
/* harmony export */   SchoolParentCalendarResponseDto: () => (/* binding */ SchoolParentCalendarResponseDto),
/* harmony export */   SchoolServiceProxy: () => (/* binding */ SchoolServiceProxy),
/* harmony export */   SchoolSettingDto: () => (/* binding */ SchoolSettingDto),
/* harmony export */   SchoolTreeviewItem: () => (/* binding */ SchoolTreeviewItem),
/* harmony export */   SchoolTreeviewItemResponseDto: () => (/* binding */ SchoolTreeviewItemResponseDto),
/* harmony export */   SchoolVacationDto: () => (/* binding */ SchoolVacationDto),
/* harmony export */   SchoolVacationServiceProxy: () => (/* binding */ SchoolVacationServiceProxy),
/* harmony export */   Search: () => (/* binding */ Search),
/* harmony export */   StateMasterDto: () => (/* binding */ StateMasterDto),
/* harmony export */   StoppageConsumerTreeviewRequestDto: () => (/* binding */ StoppageConsumerTreeviewRequestDto),
/* harmony export */   StoppageDeleteRespose: () => (/* binding */ StoppageDeleteRespose),
/* harmony export */   StoppageDto: () => (/* binding */ StoppageDto),
/* harmony export */   StoppageGridInputDto: () => (/* binding */ StoppageGridInputDto),
/* harmony export */   StoppageListResponse: () => (/* binding */ StoppageListResponse),
/* harmony export */   StoppageTrackResponseDto: () => (/* binding */ StoppageTrackResponseDto),
/* harmony export */   StudentAttendanceDateWiseServiceProxy: () => (/* binding */ StudentAttendanceDateWiseServiceProxy),
/* harmony export */   StudentAttendanceGridDto: () => (/* binding */ StudentAttendanceGridDto),
/* harmony export */   StudentAttendanceGridResponseDto: () => (/* binding */ StudentAttendanceGridResponseDto),
/* harmony export */   StudentAttendanceMobileDto: () => (/* binding */ StudentAttendanceMobileDto),
/* harmony export */   StudentAttendanceMobileResponseDto: () => (/* binding */ StudentAttendanceMobileResponseDto),
/* harmony export */   StudentAttendanceReportServiceProxy: () => (/* binding */ StudentAttendanceReportServiceProxy),
/* harmony export */   StudentAttendanceRequestDto: () => (/* binding */ StudentAttendanceRequestDto),
/* harmony export */   StudentAttendanceServiceProxy: () => (/* binding */ StudentAttendanceServiceProxy),
/* harmony export */   StudentAttendanceUpsertDto: () => (/* binding */ StudentAttendanceUpsertDto),
/* harmony export */   StudentAttendanceUpsertListDto: () => (/* binding */ StudentAttendanceUpsertListDto),
/* harmony export */   StudentClassTimeTableRequestDto: () => (/* binding */ StudentClassTimeTableRequestDto),
/* harmony export */   StudentDeleteRespose: () => (/* binding */ StudentDeleteRespose),
/* harmony export */   StudentDetailMobileDto: () => (/* binding */ StudentDetailMobileDto),
/* harmony export */   StudentDetailMobileResponseDto: () => (/* binding */ StudentDetailMobileResponseDto),
/* harmony export */   StudentDocumentDto: () => (/* binding */ StudentDocumentDto),
/* harmony export */   StudentDocumentServiceProxy: () => (/* binding */ StudentDocumentServiceProxy),
/* harmony export */   StudentDocumentTypeDto: () => (/* binding */ StudentDocumentTypeDto),
/* harmony export */   StudentDto: () => (/* binding */ StudentDto),
/* harmony export */   StudentExportDataDto: () => (/* binding */ StudentExportDataDto),
/* harmony export */   StudentExportServiceProxy: () => (/* binding */ StudentExportServiceProxy),
/* harmony export */   StudentGenderCountReportDto: () => (/* binding */ StudentGenderCountReportDto),
/* harmony export */   StudentGenderCountReportResponseDto: () => (/* binding */ StudentGenderCountReportResponseDto),
/* harmony export */   StudentGenderListDto: () => (/* binding */ StudentGenderListDto),
/* harmony export */   StudentGenderListResponseDto: () => (/* binding */ StudentGenderListResponseDto),
/* harmony export */   StudentGradeDivisionParentAppDto: () => (/* binding */ StudentGradeDivisionParentAppDto),
/* harmony export */   StudentIdModelResponse: () => (/* binding */ StudentIdModelResponse),
/* harmony export */   StudentInformationDto: () => (/* binding */ StudentInformationDto),
/* harmony export */   StudentKitAnalyticsPaymentAnalyticsServiceProxy: () => (/* binding */ StudentKitAnalyticsPaymentAnalyticsServiceProxy),
/* harmony export */   StudentKitDaywisePaymentReport: () => (/* binding */ StudentKitDaywisePaymentReport),
/* harmony export */   StudentKitDaywisePaymentReportDto: () => (/* binding */ StudentKitDaywisePaymentReportDto),
/* harmony export */   StudentKitDaywisePaymentReportRequest: () => (/* binding */ StudentKitDaywisePaymentReportRequest),
/* harmony export */   StudentKitDaywisePaymentReportTotal: () => (/* binding */ StudentKitDaywisePaymentReportTotal),
/* harmony export */   StudentKitFeeParticularsDto: () => (/* binding */ StudentKitFeeParticularsDto),
/* harmony export */   StudentKitFeeParticularsSelectDto: () => (/* binding */ StudentKitFeeParticularsSelectDto),
/* harmony export */   StudentKitFeePaymentAdditionalDiscount: () => (/* binding */ StudentKitFeePaymentAdditionalDiscount),
/* harmony export */   StudentKitFeePaymentDetailTypeUpsertDto: () => (/* binding */ StudentKitFeePaymentDetailTypeUpsertDto),
/* harmony export */   StudentKitFeePaymentDueByAYSelectDto: () => (/* binding */ StudentKitFeePaymentDueByAYSelectDto),
/* harmony export */   StudentKitFeePaymentDueByAYSelectResponseDto: () => (/* binding */ StudentKitFeePaymentDueByAYSelectResponseDto),
/* harmony export */   StudentKitFeePaymentParticulars: () => (/* binding */ StudentKitFeePaymentParticulars),
/* harmony export */   StudentKitFeePaymentServiceProxy: () => (/* binding */ StudentKitFeePaymentServiceProxy),
/* harmony export */   StudentKitFeeStructureDto: () => (/* binding */ StudentKitFeeStructureDto),
/* harmony export */   StudentKitFeepaymentHistorySelectDto: () => (/* binding */ StudentKitFeepaymentHistorySelectDto),
/* harmony export */   StudentKitFeepaymentSelectDto: () => (/* binding */ StudentKitFeepaymentSelectDto),
/* harmony export */   StudentKitFeepaymentUpsertDto: () => (/* binding */ StudentKitFeepaymentUpsertDto),
/* harmony export */   StudentKitPaymentAnalyticsDivisionDto: () => (/* binding */ StudentKitPaymentAnalyticsDivisionDto),
/* harmony export */   StudentKitPaymentAnalyticsDivisionExportDto: () => (/* binding */ StudentKitPaymentAnalyticsDivisionExportDto),
/* harmony export */   StudentKitPaymentAnalyticsDto: () => (/* binding */ StudentKitPaymentAnalyticsDto),
/* harmony export */   StudentKitPaymentAnalyticsExportDto: () => (/* binding */ StudentKitPaymentAnalyticsExportDto),
/* harmony export */   StudentKitPaymentAnalyticsExportServiceProxy: () => (/* binding */ StudentKitPaymentAnalyticsExportServiceProxy),
/* harmony export */   StudentKitPaymentAnalyticsGradeDto: () => (/* binding */ StudentKitPaymentAnalyticsGradeDto),
/* harmony export */   StudentKitPaymentAnalyticsGradeExportDto: () => (/* binding */ StudentKitPaymentAnalyticsGradeExportDto),
/* harmony export */   StudentKitPaymentAnalyticsSchoolDto: () => (/* binding */ StudentKitPaymentAnalyticsSchoolDto),
/* harmony export */   StudentKitPaymentAnalyticsSchoolExportDto: () => (/* binding */ StudentKitPaymentAnalyticsSchoolExportDto),
/* harmony export */   StudentKitPaymentAnalyticsStudentDto: () => (/* binding */ StudentKitPaymentAnalyticsStudentDto),
/* harmony export */   StudentNameDto: () => (/* binding */ StudentNameDto),
/* harmony export */   StudentNameModelResponse: () => (/* binding */ StudentNameModelResponse),
/* harmony export */   StudentProfileMobileDto: () => (/* binding */ StudentProfileMobileDto),
/* harmony export */   StudentProfileServiceProxy: () => (/* binding */ StudentProfileServiceProxy),
/* harmony export */   StudentRTEGenderListDto: () => (/* binding */ StudentRTEGenderListDto),
/* harmony export */   StudentRTEGenderListResponseDto: () => (/* binding */ StudentRTEGenderListResponseDto),
/* harmony export */   StudentReportDTO: () => (/* binding */ StudentReportDTO),
/* harmony export */   StudentReportServiceProxy: () => (/* binding */ StudentReportServiceProxy),
/* harmony export */   StudentServiceProxy: () => (/* binding */ StudentServiceProxy),
/* harmony export */   StudentTeacherAppDto: () => (/* binding */ StudentTeacherAppDto),
/* harmony export */   StudentTeacherAppResponseDto: () => (/* binding */ StudentTeacherAppResponseDto),
/* harmony export */   StudentsImportServiceProxy: () => (/* binding */ StudentsImportServiceProxy),
/* harmony export */   SubjectExistResposeDto: () => (/* binding */ SubjectExistResposeDto),
/* harmony export */   SubjectImportServiceProxy: () => (/* binding */ SubjectImportServiceProxy),
/* harmony export */   SubjectMappingDropdownDto: () => (/* binding */ SubjectMappingDropdownDto),
/* harmony export */   SubjectMappingDropdownResponseDto: () => (/* binding */ SubjectMappingDropdownResponseDto),
/* harmony export */   SubjectMappingDto: () => (/* binding */ SubjectMappingDto),
/* harmony export */   SubjectMappingServiceProxy: () => (/* binding */ SubjectMappingServiceProxy),
/* harmony export */   SubjectMappingUpsertDto: () => (/* binding */ SubjectMappingUpsertDto),
/* harmony export */   SubjectMasterDeleteResponceDto: () => (/* binding */ SubjectMasterDeleteResponceDto),
/* harmony export */   SubjectMasterDropdownDto: () => (/* binding */ SubjectMasterDropdownDto),
/* harmony export */   SubjectMasterDto: () => (/* binding */ SubjectMasterDto),
/* harmony export */   SubjectMasterServiceProxy: () => (/* binding */ SubjectMasterServiceProxy),
/* harmony export */   SurveyDto: () => (/* binding */ SurveyDto),
/* harmony export */   SurveyFileDto: () => (/* binding */ SurveyFileDto),
/* harmony export */   SurveyQuestionDto: () => (/* binding */ SurveyQuestionDto),
/* harmony export */   SurveyServiceProxy: () => (/* binding */ SurveyServiceProxy),
/* harmony export */   TalukaMasterDto: () => (/* binding */ TalukaMasterDto),
/* harmony export */   TeacherAttendanceHolidayDto: () => (/* binding */ TeacherAttendanceHolidayDto),
/* harmony export */   TeacherAttendanceHolidayResponseDto: () => (/* binding */ TeacherAttendanceHolidayResponseDto),
/* harmony export */   TeacherAttendanceVacationDto: () => (/* binding */ TeacherAttendanceVacationDto),
/* harmony export */   TeacherAttendanceWeeklyOffDto: () => (/* binding */ TeacherAttendanceWeeklyOffDto),
/* harmony export */   TeacherClassSubjectDto: () => (/* binding */ TeacherClassSubjectDto),
/* harmony export */   TeacherClassSubjectRequestDto: () => (/* binding */ TeacherClassSubjectRequestDto),
/* harmony export */   TeacherClassSubjectResponseDto: () => (/* binding */ TeacherClassSubjectResponseDto),
/* harmony export */   TeacherClassTimeTableRequestDto: () => (/* binding */ TeacherClassTimeTableRequestDto),
/* harmony export */   TeacherCountPerSubjectAnalyzerDto: () => (/* binding */ TeacherCountPerSubjectAnalyzerDto),
/* harmony export */   TeacherCountPerSubjectAnalyzerResponseDto: () => (/* binding */ TeacherCountPerSubjectAnalyzerResponseDto),
/* harmony export */   TeacherCountPerSubjectAnalyzerServiceProxy: () => (/* binding */ TeacherCountPerSubjectAnalyzerServiceProxy),
/* harmony export */   TeacherDashboardCountDto: () => (/* binding */ TeacherDashboardCountDto),
/* harmony export */   TeacherDeleteRespose: () => (/* binding */ TeacherDeleteRespose),
/* harmony export */   TeacherDropDownDto: () => (/* binding */ TeacherDropDownDto),
/* harmony export */   TeacherDropdownResponseDto: () => (/* binding */ TeacherDropdownResponseDto),
/* harmony export */   TeacherDropdownSelectListDto: () => (/* binding */ TeacherDropdownSelectListDto),
/* harmony export */   TeacherDropdownSelectListResponseDto: () => (/* binding */ TeacherDropdownSelectListResponseDto),
/* harmony export */   TeacherDto: () => (/* binding */ TeacherDto),
/* harmony export */   TeacherExportDataDto: () => (/* binding */ TeacherExportDataDto),
/* harmony export */   TeacherExportServiceProxy: () => (/* binding */ TeacherExportServiceProxy),
/* harmony export */   TeacherGradeDivisionMappingDto: () => (/* binding */ TeacherGradeDivisionMappingDto),
/* harmony export */   TeacherGradeDivisionMappingServiceProxy: () => (/* binding */ TeacherGradeDivisionMappingServiceProxy),
/* harmony export */   TeacherImportServiceProxy: () => (/* binding */ TeacherImportServiceProxy),
/* harmony export */   TeacherOneDayLectureDto: () => (/* binding */ TeacherOneDayLectureDto),
/* harmony export */   TeacherOneDayLectureResponseDto: () => (/* binding */ TeacherOneDayLectureResponseDto),
/* harmony export */   TeacherOneDayLectureServiceProxy: () => (/* binding */ TeacherOneDayLectureServiceProxy),
/* harmony export */   TeacherOneDayLecturesParentAppDto: () => (/* binding */ TeacherOneDayLecturesParentAppDto),
/* harmony export */   TeacherOneDayLecturesParentAppResponseDto: () => (/* binding */ TeacherOneDayLecturesParentAppResponseDto),
/* harmony export */   TeacherOverlapComparisonErrorDto: () => (/* binding */ TeacherOverlapComparisonErrorDto),
/* harmony export */   TeacherProfileServiceProxy: () => (/* binding */ TeacherProfileServiceProxy),
/* harmony export */   TeacherServiceProxy: () => (/* binding */ TeacherServiceProxy),
/* harmony export */   TeacherSubjectExistResposeDto: () => (/* binding */ TeacherSubjectExistResposeDto),
/* harmony export */   TeacherSubjectMappingDto: () => (/* binding */ TeacherSubjectMappingDto),
/* harmony export */   TeacherSubjectMappingServiceProxy: () => (/* binding */ TeacherSubjectMappingServiceProxy),
/* harmony export */   TeacherSubjectMappingUpsertDto: () => (/* binding */ TeacherSubjectMappingUpsertDto),
/* harmony export */   TeachingLoadAnalysisDto: () => (/* binding */ TeachingLoadAnalysisDto),
/* harmony export */   TeachingLoadAnalysisResponseDto: () => (/* binding */ TeachingLoadAnalysisResponseDto),
/* harmony export */   TeachingLoadAnalysisServiceProxy: () => (/* binding */ TeachingLoadAnalysisServiceProxy),
/* harmony export */   TimetableSubjectDropdownDto: () => (/* binding */ TimetableSubjectDropdownDto),
/* harmony export */   TimetableSubjectDropdownRequestDto: () => (/* binding */ TimetableSubjectDropdownRequestDto),
/* harmony export */   TimetableSubjectDropdownResponseDto: () => (/* binding */ TimetableSubjectDropdownResponseDto),
/* harmony export */   TransportFeeMonthMasterDto: () => (/* binding */ TransportFeeMonthMasterDto),
/* harmony export */   TransportFeeMonthMastersDto: () => (/* binding */ TransportFeeMonthMastersDto),
/* harmony export */   TransportFeePaymentAdditionalDiscount: () => (/* binding */ TransportFeePaymentAdditionalDiscount),
/* harmony export */   TransportFeePaymentAppliedMonthMappingTypeUpsertDto: () => (/* binding */ TransportFeePaymentAppliedMonthMappingTypeUpsertDto),
/* harmony export */   TransportFeePaymentAppliedMonths: () => (/* binding */ TransportFeePaymentAppliedMonths),
/* harmony export */   TransportFeePaymentDetailTypeUpsertDto: () => (/* binding */ TransportFeePaymentDetailTypeUpsertDto),
/* harmony export */   TransportFeePaymentHistorySelectDto: () => (/* binding */ TransportFeePaymentHistorySelectDto),
/* harmony export */   TransportFeePaymentParticularSectionDto: () => (/* binding */ TransportFeePaymentParticularSectionDto),
/* harmony export */   TransportFeePaymentParticulars: () => (/* binding */ TransportFeePaymentParticulars),
/* harmony export */   TransportFeePaymentSelectDto: () => (/* binding */ TransportFeePaymentSelectDto),
/* harmony export */   TransportFeePaymentServiceProxy: () => (/* binding */ TransportFeePaymentServiceProxy),
/* harmony export */   TransportFeePaymentStoppageDto: () => (/* binding */ TransportFeePaymentStoppageDto),
/* harmony export */   TransportFeePaymentStoppageGridDto: () => (/* binding */ TransportFeePaymentStoppageGridDto),
/* harmony export */   TransportFeePaymentTopSectionDto: () => (/* binding */ TransportFeePaymentTopSectionDto),
/* harmony export */   TransportFeePaymentUpsertDto: () => (/* binding */ TransportFeePaymentUpsertDto),
/* harmony export */   TransportFeeSelectDto: () => (/* binding */ TransportFeeSelectDto),
/* harmony export */   TransportPaymentAnalyticsDivisionDto: () => (/* binding */ TransportPaymentAnalyticsDivisionDto),
/* harmony export */   TransportPaymentAnalyticsDivisionExportDto: () => (/* binding */ TransportPaymentAnalyticsDivisionExportDto),
/* harmony export */   TransportPaymentAnalyticsDto: () => (/* binding */ TransportPaymentAnalyticsDto),
/* harmony export */   TransportPaymentAnalyticsExportDto: () => (/* binding */ TransportPaymentAnalyticsExportDto),
/* harmony export */   TransportPaymentAnalyticsExportServiceProxy: () => (/* binding */ TransportPaymentAnalyticsExportServiceProxy),
/* harmony export */   TransportPaymentAnalyticsGradeDto: () => (/* binding */ TransportPaymentAnalyticsGradeDto),
/* harmony export */   TransportPaymentAnalyticsGradeExportDto: () => (/* binding */ TransportPaymentAnalyticsGradeExportDto),
/* harmony export */   TransportPaymentAnalyticsSchoolDto: () => (/* binding */ TransportPaymentAnalyticsSchoolDto),
/* harmony export */   TransportPaymentAnalyticsSchoolExportDto: () => (/* binding */ TransportPaymentAnalyticsSchoolExportDto),
/* harmony export */   TransportPaymentAnalyticsServiceProxy: () => (/* binding */ TransportPaymentAnalyticsServiceProxy),
/* harmony export */   TransportPaymentAnalyticsStaffDto: () => (/* binding */ TransportPaymentAnalyticsStaffDto),
/* harmony export */   TransportPaymentAnalyticsStaffListDto: () => (/* binding */ TransportPaymentAnalyticsStaffListDto),
/* harmony export */   TransportPaymentAnalyticsStaffListExportDto: () => (/* binding */ TransportPaymentAnalyticsStaffListExportDto),
/* harmony export */   TransportPaymentAnalyticsStudentDto: () => (/* binding */ TransportPaymentAnalyticsStudentDto),
/* harmony export */   TransportPaymentHistoryReceiptDto: () => (/* binding */ TransportPaymentHistoryReceiptDto),
/* harmony export */   TransportPaymentReportDaywiseDto: () => (/* binding */ TransportPaymentReportDaywiseDto),
/* harmony export */   TransportServiceProxy: () => (/* binding */ TransportServiceProxy),
/* harmony export */   TransportStaffDto: () => (/* binding */ TransportStaffDto),
/* harmony export */   TransportStaffResponseDto: () => (/* binding */ TransportStaffResponseDto),
/* harmony export */   UpiAdhocPaymentDaywiseReport: () => (/* binding */ UpiAdhocPaymentDaywiseReport),
/* harmony export */   UpiPaymentDaywisePaymentReport: () => (/* binding */ UpiPaymentDaywisePaymentReport),
/* harmony export */   UpiPaymentDaywiseTransportPaymentReport: () => (/* binding */ UpiPaymentDaywiseTransportPaymentReport),
/* harmony export */   UpiStudentKitDaywisePaymentReport: () => (/* binding */ UpiStudentKitDaywisePaymentReport),
/* harmony export */   UserLoginResponse: () => (/* binding */ UserLoginResponse),
/* harmony export */   UserRoleDetailDto: () => (/* binding */ UserRoleDetailDto),
/* harmony export */   UserRoleModulePermissionDto: () => (/* binding */ UserRoleModulePermissionDto),
/* harmony export */   UserRolesDto: () => (/* binding */ UserRolesDto),
/* harmony export */   VehicleDeleteResposeDto: () => (/* binding */ VehicleDeleteResposeDto),
/* harmony export */   VehicleDropDownReasponseDto: () => (/* binding */ VehicleDropDownReasponseDto),
/* harmony export */   VehicleDto: () => (/* binding */ VehicleDto),
/* harmony export */   VehicleTrackDto: () => (/* binding */ VehicleTrackDto),
/* harmony export */   VehicleTrackResponseDto: () => (/* binding */ VehicleTrackResponseDto),
/* harmony export */   WeeklyDayOffDto: () => (/* binding */ WeeklyDayOffDto),
/* harmony export */   WeeklyDayOffListDto: () => (/* binding */ WeeklyDayOffListDto),
/* harmony export */   WeeklyDayOffServiceProxy: () => (/* binding */ WeeklyDayOffServiceProxy)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ 13255);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ 61318);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ 77919);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ 59452);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ 43942);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ 46443);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ 39545);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming





const API_BASE_URL = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('API_BASE_URL');
let WeeklyDayOffServiceProxy = class WeeklyDayOffServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  weeklyDayOffSelect(academicYearId) {
    let url_ = this.baseUrl + "/api/WeeklyDayOff/WeeklyDayOffSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processWeeklyDayOffSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processWeeklyDayOffSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processWeeklyDayOffSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = WeeklyDayOffDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  weeklyDayOffInsert(obj) {
    let url_ = this.baseUrl + "/api/WeeklyDayOff/WeeklyDayOffInsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(obj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processWeeklyDayOffInsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processWeeklyDayOffInsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processWeeklyDayOffInsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
WeeklyDayOffServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], WeeklyDayOffServiceProxy);

let AuthServiceProxy = class AuthServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  applogin(model) {
    let url_ = this.baseUrl + "/Auth/applogin";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(model);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processApplogin(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processApplogin(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processApplogin(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserLoginResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  saveFCMToken(fCMToken) {
    let url_ = this.baseUrl + "/Auth/SaveFCMToken";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(fCMToken);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSaveFCMToken(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSaveFCMToken(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSaveFCMToken(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  webLogin(model) {
    let url_ = this.baseUrl + "/Auth/WebLogin";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(model);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processWebLogin(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processWebLogin(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processWebLogin(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserLoginResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getUserRoleModulePermissionDetail(roleId) {
    let url_ = this.baseUrl + "/Auth/getUserRoleModulePermissionDetail?";
    if (roleId !== undefined && roleId !== null) url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetUserRoleModulePermissionDetail(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetUserRoleModulePermissionDetail(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetUserRoleModulePermissionDetail(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserRoleModulePermissionDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  forgotPassword(forgotPasswordRequestDto) {
    let url_ = this.baseUrl + "/Auth/ForgotPassword";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(forgotPasswordRequestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processForgotPassword(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processForgotPassword(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processForgotPassword(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  changePassword(resetPasswordRequestDto) {
    let url_ = this.baseUrl + "/Auth/ChangePassword";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(resetPasswordRequestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processChangePassword(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processChangePassword(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processChangePassword(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  resetPasswordByAdmin(userNameEncrpty, roleId) {
    let url_ = this.baseUrl + "/Auth/ResetPasswordByAdmin?";
    if (userNameEncrpty !== undefined && userNameEncrpty !== null) url_ += "userNameEncrpty=" + encodeURIComponent("" + userNameEncrpty) + "&";
    if (roleId === null) throw new Error("The parameter 'roleId' cannot be null.");else if (roleId !== undefined) url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processResetPasswordByAdmin(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processResetPasswordByAdmin(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processResetPasswordByAdmin(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
AuthServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], AuthServiceProxy);

let TransportPaymentAnalyticsServiceProxy = class TransportPaymentAnalyticsServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getTransportPaymentAnalyticsSchool(academicYearId) {
    let url_ = this.baseUrl + "/api/TransportPaymentAnalytics/GetTransportPaymentAnalyticsSchool?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportPaymentAnalyticsSchool(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportPaymentAnalyticsSchool(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportPaymentAnalyticsSchool(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportPaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportPaymentAnalyticsGrade(academicYearId) {
    let url_ = this.baseUrl + "/api/TransportPaymentAnalytics/GetTransportPaymentAnalyticsGrade?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportPaymentAnalyticsGrade(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportPaymentAnalyticsGrade(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportPaymentAnalyticsGrade(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportPaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportPaymentAnalyticsDivision(gradeId, academicYearId) {
    let url_ = this.baseUrl + "/api/TransportPaymentAnalytics/GetTransportPaymentAnalyticsDivision?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportPaymentAnalyticsDivision(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportPaymentAnalyticsDivision(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportPaymentAnalyticsDivision(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportPaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportPaymentAnalyticsStudent(gradeId, divisionId, academicYearId) {
    let url_ = this.baseUrl + "/api/TransportPaymentAnalytics/GetTransportPaymentAnalyticsStudent?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportPaymentAnalyticsStudent(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportPaymentAnalyticsStudent(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportPaymentAnalyticsStudent(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportPaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportPaymentAnalyticsStaff(academicYearId) {
    let url_ = this.baseUrl + "/api/TransportPaymentAnalytics/GetTransportPaymentAnalyticsStaff?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportPaymentAnalyticsStaff(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportPaymentAnalyticsStaff(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportPaymentAnalyticsStaff(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportPaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportPaymentAnalyticsStaffList(academicYearId) {
    let url_ = this.baseUrl + "/api/TransportPaymentAnalytics/GetTransportPaymentAnalyticsStaffList?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportPaymentAnalyticsStaffList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportPaymentAnalyticsStaffList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportPaymentAnalyticsStaffList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportPaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
TransportPaymentAnalyticsServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], TransportPaymentAnalyticsServiceProxy);

let TransportServiceProxy = class TransportServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getAreaSelect(areaId, academicYearId) {
    let url_ = this.baseUrl + "/api/Transport/GetAreaSelect?";
    if (areaId === null) throw new Error("The parameter 'areaId' cannot be null.");else if (areaId !== undefined) url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAreaSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAreaSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAreaSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AreaDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAreaGridListSelect(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Transport/GetAreaGridListSelect";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAreaGridListSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAreaGridListSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAreaGridListSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  areaDelete(areaId, academicYearId) {
    let url_ = this.baseUrl + "/api/Transport/AreaDelete?";
    if (areaId === null) throw new Error("The parameter 'areaId' cannot be null.");else if (areaId !== undefined) url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processAreaDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processAreaDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processAreaDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AreaDeleteRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  areaUpsert(academicYearId, areaDto) {
    let url_ = this.baseUrl + "/api/Transport/AreaUpsert?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(areaDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processAreaUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processAreaUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processAreaUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AreaDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getRouteSelect(routeId, academicYearId) {
    let url_ = this.baseUrl + "/api/Transport/GetRouteSelect?";
    if (routeId === null) throw new Error("The parameter 'routeId' cannot be null.");else if (routeId !== undefined) url_ += "routeId=" + encodeURIComponent("" + routeId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetRouteSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetRouteSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetRouteSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RouteDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getRouteGridListSelect(request) {
    let url_ = this.baseUrl + "/api/Transport/GetRouteGridListSelect";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(request);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetRouteGridListSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetRouteGridListSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetRouteGridListSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RouteListResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  routeDelete(routeId, academicYearId) {
    let url_ = this.baseUrl + "/api/Transport/RouteDelete?";
    if (routeId === null) throw new Error("The parameter 'routeId' cannot be null.");else if (routeId !== undefined) url_ += "routeId=" + encodeURIComponent("" + routeId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processRouteDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processRouteDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processRouteDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RouteDeleteRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  routeUpsert(academicYearId, routeDto) {
    let url_ = this.baseUrl + "/api/Transport/RouteUpsert?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(routeDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processRouteUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processRouteUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processRouteUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RouteDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStoppageSelect(stoppageId, academicYearId) {
    let url_ = this.baseUrl + "/api/Transport/GetStoppageSelect?";
    if (stoppageId === null) throw new Error("The parameter 'stoppageId' cannot be null.");else if (stoppageId !== undefined) url_ += "stoppageId=" + encodeURIComponent("" + stoppageId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStoppageSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStoppageSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStoppageSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StoppageDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStoppageGridListSelect(requestDto) {
    let url_ = this.baseUrl + "/api/Transport/GetStoppageGridListSelect";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStoppageGridListSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStoppageGridListSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStoppageGridListSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StoppageListResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  stoppageDelete(stoppageId, academicYearId) {
    let url_ = this.baseUrl + "/api/Transport/StoppageDelete?";
    if (stoppageId === null) throw new Error("The parameter 'stoppageId' cannot be null.");else if (stoppageId !== undefined) url_ += "stoppageId=" + encodeURIComponent("" + stoppageId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStoppageDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStoppageDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStoppageDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StoppageDeleteRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  stoppageUpsert(academicYearId, routeId, stoppageDto) {
    let url_ = this.baseUrl + "/api/Transport/StoppageUpsert?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (routeId === null) throw new Error("The parameter 'routeId' cannot be null.");else if (routeId !== undefined) url_ += "routeId=" + encodeURIComponent("" + routeId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(stoppageDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStoppageUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStoppageUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStoppageUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getVehicleList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Transport/GetVehicleList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetVehicleList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetVehicleList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetVehicleList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getVehicleSelect(vehicleId, academicYearId) {
    let url_ = this.baseUrl + "/api/Transport/GetVehicleSelect?";
    if (vehicleId === null) throw new Error("The parameter 'vehicleId' cannot be null.");else if (vehicleId !== undefined) url_ += "VehicleId=" + encodeURIComponent("" + vehicleId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetVehicleSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetVehicleSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetVehicleSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = VehicleDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  vehicleUpsert() {
    let url_ = this.baseUrl + "/api/Transport/VehicleUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processVehicleUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processVehicleUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processVehicleUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  activeInActiveVehicle(activeRequest) {
    let url_ = this.baseUrl + "/api/Transport/ActiveInActiveVehicle";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(activeRequest);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processActiveInActiveVehicle(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processActiveInActiveVehicle(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processActiveInActiveVehicle(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  vehicleDelete(vehicleId) {
    let url_ = this.baseUrl + "/api/Transport/VehicleDelete?";
    if (vehicleId === null) throw new Error("The parameter 'vehicleId' cannot be null.");else if (vehicleId !== undefined) url_ += "VehicleId=" + encodeURIComponent("" + vehicleId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processVehicleDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processVehicleDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processVehicleDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = VehicleDeleteResposeDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getCabDriverDropDown() {
    let url_ = this.baseUrl + "/api/Transport/GetCabDriverDropDown";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetCabDriverDropDown(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetCabDriverDropDown(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetCabDriverDropDown(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DropdownResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAreaNameDropdown(academicYearId) {
    let url_ = this.baseUrl + "/api/Transport/GetAreaNameDropdown?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAreaNameDropdown(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAreaNameDropdown(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAreaNameDropdown(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DropdownResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getVehicleDropdown() {
    let url_ = this.baseUrl + "/api/Transport/GetVehicleDropdown";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetVehicleDropdown(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetVehicleDropdown(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetVehicleDropdown(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DropdownResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportStaffList() {
    let url_ = this.baseUrl + "/api/Transport/GetTransportStaffList";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportStaffList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportStaffList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportStaffList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportStaffResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportConsumerTreeViewItem(requestDto) {
    let url_ = this.baseUrl + "/api/Transport/GetTransportConsumerTreeViewItem";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportConsumerTreeViewItem(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportConsumerTreeViewItem(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportConsumerTreeViewItem(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolTreeviewItemResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  saveTransportConsumerList(requestDto) {
    let url_ = this.baseUrl + "/api/Transport/SaveTransportConsumerList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSaveTransportConsumerList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSaveTransportConsumerList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSaveTransportConsumerList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CreateTransportConsumerResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAllConsumerByStoppageId(requestDto) {
    let url_ = this.baseUrl + "/api/Transport/GetAllConsumerByStoppageId";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAllConsumerByStoppageId(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAllConsumerByStoppageId(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAllConsumerByStoppageId(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ConsumerTransportMappingUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  deleteStoppageConsumer(transportConsumerStoppageMappingId, roleId, academicYearId) {
    let url_ = this.baseUrl + "/api/Transport/DeleteStoppageConsumer?";
    if (transportConsumerStoppageMappingId === null) throw new Error("The parameter 'transportConsumerStoppageMappingId' cannot be null.");else if (transportConsumerStoppageMappingId !== undefined) url_ += "TransportConsumerStoppageMappingId=" + encodeURIComponent("" + transportConsumerStoppageMappingId) + "&";
    if (roleId === null) throw new Error("The parameter 'roleId' cannot be null.");else if (roleId !== undefined) url_ += "RoleId=" + encodeURIComponent("" + roleId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processDeleteStoppageConsumer(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processDeleteStoppageConsumer(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processDeleteStoppageConsumer(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ConsumerDeleteResposeDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
TransportServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], TransportServiceProxy);

let TransportFeePaymentServiceProxy = class TransportFeePaymentServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getTransportFeePaymentStudentGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/TransportFeePayment/GetTransportFeePaymentStudentGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportFeePaymentStudentGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportFeePaymentStudentGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportFeePaymentStudentGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportFeePaymentStaffGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/TransportFeePayment/GetTransportFeePaymentStaffGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportFeePaymentStaffGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportFeePaymentStaffGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportFeePaymentStaffGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportFeePaymentDueListByAY(consumerId, roleId, currentAcademicYearInclude) {
    let url_ = this.baseUrl + "/api/TransportFeePayment/GetTransportFeePaymentDueListByAY?";
    if (consumerId === null) throw new Error("The parameter 'consumerId' cannot be null.");else if (consumerId !== undefined) url_ += "consumerId=" + encodeURIComponent("" + consumerId) + "&";
    if (roleId === null) throw new Error("The parameter 'roleId' cannot be null.");else if (roleId !== undefined) url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
    if (currentAcademicYearInclude === null) throw new Error("The parameter 'currentAcademicYearInclude' cannot be null.");else if (currentAcademicYearInclude !== undefined) url_ += "currentAcademicYearInclude=" + encodeURIComponent("" + currentAcademicYearInclude) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportFeePaymentDueListByAY(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportFeePaymentDueListByAY(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportFeePaymentDueListByAY(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportFeePaymentSelect(academicYearId, consumerId, roleId, transportConsumerStoppageMappingId) {
    let url_ = this.baseUrl + "/api/TransportFeePayment/GetTransportFeePaymentSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (consumerId === null) throw new Error("The parameter 'consumerId' cannot be null.");else if (consumerId !== undefined) url_ += "consumerId=" + encodeURIComponent("" + consumerId) + "&";
    if (roleId === null) throw new Error("The parameter 'roleId' cannot be null.");else if (roleId !== undefined) url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
    if (transportConsumerStoppageMappingId === null) throw new Error("The parameter 'transportConsumerStoppageMappingId' cannot be null.");else if (transportConsumerStoppageMappingId !== undefined) url_ += "transportConsumerStoppageMappingId=" + encodeURIComponent("" + transportConsumerStoppageMappingId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportFeePaymentSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportFeePaymentSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportFeePaymentSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportFeePaymentSelectDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  transportFeePaymentUpsert(transportFeePaymentUpsertDto) {
    let url_ = this.baseUrl + "/api/TransportFeePayment/TransportFeePaymentUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(transportFeePaymentUpsertDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTransportFeePaymentUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTransportFeePaymentUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTransportFeePaymentUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportFeePaymentMonths(academicYearId, consumerId, roleId, transportConsumerStoppageMappingId) {
    let url_ = this.baseUrl + "/api/TransportFeePayment/GetTransportFeePaymentMonths?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (consumerId === null) throw new Error("The parameter 'consumerId' cannot be null.");else if (consumerId !== undefined) url_ += "consumerId=" + encodeURIComponent("" + consumerId) + "&";
    if (roleId === null) throw new Error("The parameter 'roleId' cannot be null.");else if (roleId !== undefined) url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
    if (transportConsumerStoppageMappingId === null) throw new Error("The parameter 'transportConsumerStoppageMappingId' cannot be null.");else if (transportConsumerStoppageMappingId !== undefined) url_ += "transportConsumerStoppageMappingId=" + encodeURIComponent("" + transportConsumerStoppageMappingId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportFeePaymentMonths(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportFeePaymentMonths(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportFeePaymentMonths(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportFeeMonthMastersDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportFeePaymentStoppageGridLIst(academicYearId, consumerId, roleId) {
    let url_ = this.baseUrl + "/api/TransportFeePayment/GetTransportFeePaymentStoppageGridLIst?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (consumerId === null) throw new Error("The parameter 'consumerId' cannot be null.");else if (consumerId !== undefined) url_ += "consumerId=" + encodeURIComponent("" + consumerId) + "&";
    if (roleId === null) throw new Error("The parameter 'roleId' cannot be null.");else if (roleId !== undefined) url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportFeePaymentStoppageGridLIst(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportFeePaymentStoppageGridLIst(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportFeePaymentStoppageGridLIst(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportFeePaymentStoppageGridDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportFeePaymentHistoryGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/TransportFeePayment/GetTransportFeePaymentHistoryGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportFeePaymentHistoryGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportFeePaymentHistoryGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportFeePaymentHistoryGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportFeePaymentHistorySelect(roleId, academicYearId, consumerId, tarnsportFeePaymentId, transportConsumerStoppageMappingId) {
    let url_ = this.baseUrl + "/api/TransportFeePayment/GetTransportFeePaymentHistorySelect?";
    if (roleId === null) throw new Error("The parameter 'roleId' cannot be null.");else if (roleId !== undefined) url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (consumerId === null) throw new Error("The parameter 'consumerId' cannot be null.");else if (consumerId !== undefined) url_ += "consumerId=" + encodeURIComponent("" + consumerId) + "&";
    if (tarnsportFeePaymentId === null) throw new Error("The parameter 'tarnsportFeePaymentId' cannot be null.");else if (tarnsportFeePaymentId !== undefined) url_ += "tarnsportFeePaymentId=" + encodeURIComponent("" + tarnsportFeePaymentId) + "&";
    if (transportConsumerStoppageMappingId === null) throw new Error("The parameter 'transportConsumerStoppageMappingId' cannot be null.");else if (transportConsumerStoppageMappingId !== undefined) url_ += "transportConsumerStoppageMappingId=" + encodeURIComponent("" + transportConsumerStoppageMappingId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportFeePaymentHistorySelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportFeePaymentHistorySelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportFeePaymentHistorySelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportFeePaymentHistorySelectDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  transportFeePaymentDelete(transportFeePaymentId) {
    let url_ = this.baseUrl + "/api/TransportFeePayment/TransportFeePaymentDelete?";
    if (transportFeePaymentId === null) throw new Error("The parameter 'transportFeePaymentId' cannot be null.");else if (transportFeePaymentId !== undefined) url_ += "transportFeePaymentId=" + encodeURIComponent("" + transportFeePaymentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTransportFeePaymentDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTransportFeePaymentDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTransportFeePaymentDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  transportClearCheque(transportFeePaymentId) {
    let url_ = this.baseUrl + "/api/TransportFeePayment/TransportClearCheque?";
    if (transportFeePaymentId === null) throw new Error("The parameter 'transportFeePaymentId' cannot be null.");else if (transportFeePaymentId !== undefined) url_ += "transportFeePaymentId=" + encodeURIComponent("" + transportFeePaymentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTransportClearCheque(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTransportClearCheque(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTransportClearCheque(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getDayWiseTransportPaymentReport(request) {
    let url_ = this.baseUrl + "/api/TransportFeePayment/GetDayWiseTransportPaymentReport";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(request);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetDayWiseTransportPaymentReport(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetDayWiseTransportPaymentReport(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetDayWiseTransportPaymentReport(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportPaymentReportDaywiseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
TransportFeePaymentServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], TransportFeePaymentServiceProxy);

let TeachingLoadAnalysisServiceProxy = class TeachingLoadAnalysisServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  teacherPercentageSelect(academicYearId) {
    let url_ = this.baseUrl + "/api/TeachingLoadAnalysis/TeacherPercentageSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTeacherPercentageSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTeacherPercentageSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTeacherPercentageSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeachingLoadAnalysisResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
TeachingLoadAnalysisServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], TeachingLoadAnalysisServiceProxy);

let TeacherSubjectMappingServiceProxy = class TeacherSubjectMappingServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getTeacherSubjectMappingList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/TeacherSubjectMapping/GetTeacherSubjectMappingList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTeacherSubjectMappingList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTeacherSubjectMappingList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTeacherSubjectMappingList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  teacherSubjectMappingInsert(academicYearId, teacherId, teacherSubjectMappingObj) {
    let url_ = this.baseUrl + "/api/TeacherSubjectMapping/TeacherSubjectMappingInsert?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (teacherId === null) throw new Error("The parameter 'teacherId' cannot be null.");else if (teacherId !== undefined) url_ += "teacherId=" + encodeURIComponent("" + teacherId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(teacherSubjectMappingObj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTeacherSubjectMappingInsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTeacherSubjectMappingInsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTeacherSubjectMappingInsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherSubjectMappingUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  teacherSubjectMappingDelete(academicYearId, teacherId, subjectId) {
    let url_ = this.baseUrl + "/api/TeacherSubjectMapping/TeacherSubjectMappingDelete?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (teacherId === null) throw new Error("The parameter 'teacherId' cannot be null.");else if (teacherId !== undefined) url_ += "teacherId=" + encodeURIComponent("" + teacherId) + "&";
    if (subjectId === null) throw new Error("The parameter 'subjectId' cannot be null.");else if (subjectId !== undefined) url_ += "subjectId=" + encodeURIComponent("" + subjectId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTeacherSubjectMappingDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTeacherSubjectMappingDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTeacherSubjectMappingDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherSubjectMappingUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
TeacherSubjectMappingServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], TeacherSubjectMappingServiceProxy);

let TeacherOneDayLectureServiceProxy = class TeacherOneDayLectureServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  teacherOneDayLectureSelect(academicYearId, teacherId, dayNo) {
    let url_ = this.baseUrl + "/api/TeacherOneDayLecture/TeacherOneDayLectureSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (teacherId === null) throw new Error("The parameter 'teacherId' cannot be null.");else if (teacherId !== undefined) url_ += "TeacherId=" + encodeURIComponent("" + teacherId) + "&";
    if (dayNo === null) throw new Error("The parameter 'dayNo' cannot be null.");else if (dayNo !== undefined) url_ += "DayNo=" + encodeURIComponent("" + dayNo) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTeacherOneDayLectureSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTeacherOneDayLectureSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTeacherOneDayLectureSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherOneDayLectureResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
TeacherOneDayLectureServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], TeacherOneDayLectureServiceProxy);

let TeacherServiceProxy = class TeacherServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getTeacherProfile(teacherId) {
    let url_ = this.baseUrl + "/api/Teacher/GetTeacherProfile?";
    if (teacherId === null) throw new Error("The parameter 'teacherId' cannot be null.");else if (teacherId !== undefined) url_ += "TeacherId=" + encodeURIComponent("" + teacherId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTeacherProfile(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTeacherProfile(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTeacherProfile(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  teacherProfileUpsert() {
    let url_ = this.baseUrl + "/api/Teacher/TeacherProfileUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTeacherProfileUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTeacherProfileUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTeacherProfileUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTeacherList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Teacher/GetTeacherList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTeacherList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTeacherList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTeacherList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  teacherProfileDelete(teacherId) {
    let url_ = this.baseUrl + "/api/Teacher/TeacherProfileDelete?";
    if (teacherId === null) throw new Error("The parameter 'teacherId' cannot be null.");else if (teacherId !== undefined) url_ += "teacherId=" + encodeURIComponent("" + teacherId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTeacherProfileDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTeacherProfileDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTeacherProfileDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherDeleteRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
TeacherServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], TeacherServiceProxy);

let TeacherGradeDivisionMappingServiceProxy = class TeacherGradeDivisionMappingServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getTeacherGradeDivisionMappingList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/TeacherGradeDivisionMapping/GetTeacherGradeDivisionMappingList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTeacherGradeDivisionMappingList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTeacherGradeDivisionMappingList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTeacherGradeDivisionMappingList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  teacherGradeDivisionMappingInsert(teacherGradeDivisionMappingobj) {
    let url_ = this.baseUrl + "/api/TeacherGradeDivisionMapping/TeacherGradeDivisionMappingInsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(teacherGradeDivisionMappingobj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTeacherGradeDivisionMappingInsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTeacherGradeDivisionMappingInsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTeacherGradeDivisionMappingInsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  teacherMappingDelete(academicYearId, gradeId, divisionId, teacherId) {
    let url_ = this.baseUrl + "/api/TeacherGradeDivisionMapping/TeacherMappingDelete?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "divisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (teacherId === null) throw new Error("The parameter 'teacherId' cannot be null.");else if (teacherId !== undefined) url_ += "teacherId=" + encodeURIComponent("" + teacherId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTeacherMappingDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTeacherMappingDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTeacherMappingDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
TeacherGradeDivisionMappingServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], TeacherGradeDivisionMappingServiceProxy);

let TeacherCountPerSubjectAnalyzerServiceProxy = class TeacherCountPerSubjectAnalyzerServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  teacherCountPerSubjectSelect(academicYearId) {
    let url_ = this.baseUrl + "/api/TeacherCountPerSubjectAnalyzer/TeacherCountPerSubjectSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTeacherCountPerSubjectSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTeacherCountPerSubjectSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTeacherCountPerSubjectSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherCountPerSubjectAnalyzerResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
TeacherCountPerSubjectAnalyzerServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], TeacherCountPerSubjectAnalyzerServiceProxy);

let TeacherProfileServiceProxy = class TeacherProfileServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  teacherProfileUpdate() {
    let url_ = this.baseUrl + "/api/TeacherProfile/TeacherProfileUpdate";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTeacherProfileUpdate(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTeacherProfileUpdate(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTeacherProfileUpdate(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTeacherProfile(teacherId) {
    let url_ = this.baseUrl + "/api/TeacherProfile/GetTeacherProfile?";
    if (teacherId === null) throw new Error("The parameter 'teacherId' cannot be null.");else if (teacherId !== undefined) url_ += "TeacherId=" + encodeURIComponent("" + teacherId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTeacherProfile(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTeacherProfile(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTeacherProfile(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentAttendanceList(requestDto) {
    let url_ = this.baseUrl + "/api/TeacherProfile/GetStudentAttendanceList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentAttendanceList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentAttendanceList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentAttendanceList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentAttendanceGridResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentAttendanceUpsert(studentAttendanceUpsertDto) {
    let url_ = this.baseUrl + "/api/TeacherProfile/GetStudentAttendanceUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(studentAttendanceUpsertDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentAttendanceUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentAttendanceUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentAttendanceUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  classTeacherGradeDivisionList(teacherId) {
    let url_ = this.baseUrl + "/api/TeacherProfile/ClassTeacherGradeDivisionList?";
    if (teacherId === null) throw new Error("The parameter 'teacherId' cannot be null.");else if (teacherId !== undefined) url_ += "teacherId=" + encodeURIComponent("" + teacherId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processClassTeacherGradeDivisionList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processClassTeacherGradeDivisionList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processClassTeacherGradeDivisionList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ClassTeacherGradeDivisionListDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getSubjectDropdownByClassTeacher(requestDto) {
    let url_ = this.baseUrl + "/api/TeacherProfile/GetSubjectDropdownByClassTeacher";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSubjectDropdownByClassTeacher(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSubjectDropdownByClassTeacher(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSubjectDropdownByClassTeacher(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherClassSubjectResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getSchoolBasicDetails() {
    let url_ = this.baseUrl + "/api/TeacherProfile/GetSchoolBasicDetails";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSchoolBasicDetails(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSchoolBasicDetails(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSchoolBasicDetails(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolDetailMobileDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getHomeworkList(month, year) {
    let url_ = this.baseUrl + "/api/TeacherProfile/GetHomeworkList?";
    if (month === null) throw new Error("The parameter 'month' cannot be null.");else if (month !== undefined) url_ += "month=" + encodeURIComponent("" + month) + "&";
    if (year === null) throw new Error("The parameter 'year' cannot be null.");else if (year !== undefined) url_ += "year=" + encodeURIComponent("" + year) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetHomeworkList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetHomeworkList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetHomeworkList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = HomeworkListDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  publishUnpublishHomeworkParticulars(publishRequest) {
    let url_ = this.baseUrl + "/api/TeacherProfile/PublishUnpublishHomeworkParticulars";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(publishRequest);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processPublishUnpublishHomeworkParticulars(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processPublishUnpublishHomeworkParticulars(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processPublishUnpublishHomeworkParticulars(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  homeworkSelect(homeworkId) {
    let url_ = this.baseUrl + "/api/TeacherProfile/HomeworkSelect?";
    if (homeworkId === null) throw new Error("The parameter 'homeworkId' cannot be null.");else if (homeworkId !== undefined) url_ += "HomeworkId=" + encodeURIComponent("" + homeworkId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processHomeworkSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processHomeworkSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processHomeworkSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = HomeworkUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  homeWorkDelete(homeworkId) {
    let url_ = this.baseUrl + "/api/TeacherProfile/HomeWorkDelete?";
    if (homeworkId === null) throw new Error("The parameter 'homeworkId' cannot be null.");else if (homeworkId !== undefined) url_ += "homeworkId=" + encodeURIComponent("" + homeworkId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processHomeWorkDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processHomeWorkDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processHomeWorkDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  homeworkUpsert() {
    let url_ = this.baseUrl + "/api/TeacherProfile/HomeworkUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processHomeworkUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processHomeworkUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processHomeworkUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = HomeworkUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  noticeSelect(noticeId) {
    let url_ = this.baseUrl + "/api/TeacherProfile/NoticeSelect?";
    if (noticeId === null) throw new Error("The parameter 'noticeId' cannot be null.");else if (noticeId !== undefined) url_ += "NoticeId=" + encodeURIComponent("" + noticeId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processNoticeSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processNoticeSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processNoticeSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = NoticeUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  publishUnpublishNoticeParticulars(publishRequest) {
    let url_ = this.baseUrl + "/api/TeacherProfile/PublishUnpublishNoticeParticulars";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(publishRequest);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processPublishUnpublishNoticeParticulars(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processPublishUnpublishNoticeParticulars(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processPublishUnpublishNoticeParticulars(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  noticeDelete(noticeId) {
    let url_ = this.baseUrl + "/api/TeacherProfile/NoticeDelete?";
    if (noticeId === null) throw new Error("The parameter 'noticeId' cannot be null.");else if (noticeId !== undefined) url_ += "noticeId=" + encodeURIComponent("" + noticeId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processNoticeDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processNoticeDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processNoticeDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getNoticeList(noticeTypeId, refId, month, year) {
    let url_ = this.baseUrl + "/api/TeacherProfile/GetNoticeList?";
    if (noticeTypeId === null) throw new Error("The parameter 'noticeTypeId' cannot be null.");else if (noticeTypeId !== undefined) url_ += "NoticeTypeId=" + encodeURIComponent("" + noticeTypeId) + "&";
    if (refId === null) throw new Error("The parameter 'refId' cannot be null.");else if (refId !== undefined) url_ += "RefId=" + encodeURIComponent("" + refId) + "&";
    if (month === null) throw new Error("The parameter 'month' cannot be null.");else if (month !== undefined) url_ += "month=" + encodeURIComponent("" + month) + "&";
    if (year === null) throw new Error("The parameter 'year' cannot be null.");else if (year !== undefined) url_ += "year=" + encodeURIComponent("" + year) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetNoticeList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetNoticeList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetNoticeList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = NoticeListDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  noticeUpsert() {
    let url_ = this.baseUrl + "/api/TeacherProfile/NoticeUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processNoticeUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processNoticeUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processNoticeUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = NoticeUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  gallerySelect(galleryId) {
    let url_ = this.baseUrl + "/api/TeacherProfile/GallerySelect?";
    if (galleryId === null) throw new Error("The parameter 'galleryId' cannot be null.");else if (galleryId !== undefined) url_ += "GalleryId=" + encodeURIComponent("" + galleryId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGallerySelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGallerySelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGallerySelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GalleryUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  publishUnpublishGalleryParticular(publishRequest) {
    let url_ = this.baseUrl + "/api/TeacherProfile/PublishUnpublishGalleryParticular";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(publishRequest);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processPublishUnpublishGalleryParticular(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processPublishUnpublishGalleryParticular(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processPublishUnpublishGalleryParticular(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  galleryDelete(galleryId) {
    let url_ = this.baseUrl + "/api/TeacherProfile/GalleryDelete?";
    if (galleryId === null) throw new Error("The parameter 'galleryId' cannot be null.");else if (galleryId !== undefined) url_ += "GalleryId=" + encodeURIComponent("" + galleryId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGalleryDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGalleryDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGalleryDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getGalleryGridList(galleryTypeId, refId) {
    let url_ = this.baseUrl + "/api/TeacherProfile/GetGalleryGridList?";
    if (galleryTypeId === null) throw new Error("The parameter 'galleryTypeId' cannot be null.");else if (galleryTypeId !== undefined) url_ += "GalleryTypeId=" + encodeURIComponent("" + galleryTypeId) + "&";
    if (refId === null) throw new Error("The parameter 'refId' cannot be null.");else if (refId !== undefined) url_ += "RefId=" + encodeURIComponent("" + refId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetGalleryGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetGalleryGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetGalleryGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GalleryListDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  galleryUpsert() {
    let url_ = this.baseUrl + "/api/TeacherProfile/GalleryUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGalleryUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGalleryUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGalleryUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GalleryUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentTeacherAppSelect(academicYearId, gradeId, divisionId) {
    let url_ = this.baseUrl + "/api/TeacherProfile/StudentTeacherAppSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentTeacherAppSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentTeacherAppSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentTeacherAppSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentTeacherAppResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  classMissingAttendanceReport(teacherId, month, year) {
    let url_ = this.baseUrl + "/api/TeacherProfile/ClassMissingAttendanceReport?";
    if (teacherId === null) throw new Error("The parameter 'teacherId' cannot be null.");else if (teacherId !== undefined) url_ += "teacherId=" + encodeURIComponent("" + teacherId) + "&";
    if (month === null) throw new Error("The parameter 'month' cannot be null.");else if (month !== undefined) url_ += "Month=" + encodeURIComponent("" + month) + "&";
    if (year === null) throw new Error("The parameter 'year' cannot be null.");else if (year !== undefined) url_ += "Year=" + encodeURIComponent("" + year) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processClassMissingAttendanceReport(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processClassMissingAttendanceReport(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processClassMissingAttendanceReport(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ClassAttendanceMissingReportResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  teacherOneDayLectureSelect(teacherId, dayNo) {
    let url_ = this.baseUrl + "/api/TeacherProfile/TeacherOneDayLectureSelect?";
    if (teacherId === null) throw new Error("The parameter 'teacherId' cannot be null.");else if (teacherId !== undefined) url_ += "TeacherId=" + encodeURIComponent("" + teacherId) + "&";
    if (dayNo === null) throw new Error("The parameter 'dayNo' cannot be null.");else if (dayNo !== undefined) url_ += "DayNo=" + encodeURIComponent("" + dayNo) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processTeacherOneDayLectureSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processTeacherOneDayLectureSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processTeacherOneDayLectureSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherOneDayLectureResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  schoolMonthEvent() {
    let url_ = this.baseUrl + "/api/TeacherProfile/SchoolMonthEvent";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolMonthEvent(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolMonthEvent(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolMonthEvent(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolMonthEventResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  schoolMonthEventParentSelect(gradeId, divisionId) {
    let url_ = this.baseUrl + "/api/TeacherProfile/SchoolMonthEventParentSelect?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolMonthEventParentSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolMonthEventParentSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolMonthEventParentSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolMonthEventResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTeacherAttendanceHoliday() {
    let url_ = this.baseUrl + "/api/TeacherProfile/GetTeacherAttendanceHoliday";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTeacherAttendanceHoliday(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTeacherAttendanceHoliday(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTeacherAttendanceHoliday(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherAttendanceHolidayResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
TeacherProfileServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], TeacherProfileServiceProxy);

let SurveyServiceProxy = class SurveyServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getSurveyGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Survey/GetSurveyGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSurveyGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSurveyGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSurveyGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  surveySelect(surveyId) {
    let url_ = this.baseUrl + "/api/Survey/SurveySelect?";
    if (surveyId === null) throw new Error("The parameter 'surveyId' cannot be null.");else if (surveyId !== undefined) url_ += "SurveyId=" + encodeURIComponent("" + surveyId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSurveySelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSurveySelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSurveySelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SurveyDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  surveyDelete(surveyId) {
    let url_ = this.baseUrl + "/api/Survey/SurveyDelete?";
    if (surveyId === null) throw new Error("The parameter 'surveyId' cannot be null.");else if (surveyId !== undefined) url_ += "SurveyId=" + encodeURIComponent("" + surveyId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSurveyDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSurveyDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSurveyDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  publishUnpublishSurveyParticulars(publishRequest) {
    let url_ = this.baseUrl + "/api/Survey/PublishUnpublishSurveyParticulars";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(publishRequest);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processPublishUnpublishSurveyParticulars(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processPublishUnpublishSurveyParticulars(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processPublishUnpublishSurveyParticulars(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getSurveyFromRoleAppSelectList() {
    let url_ = this.baseUrl + "/api/Survey/GetSurveyFromRoleAppSelectList";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSurveyFromRoleAppSelectList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSurveyFromRoleAppSelectList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSurveyFromRoleAppSelectList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CommonDropdownSelectListItemResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  surveyUpsert() {
    let url_ = this.baseUrl + "/api/Survey/SurveyUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSurveyUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSurveyUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSurveyUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SurveyDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
SurveyServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], SurveyServiceProxy);

let SubjectMasterServiceProxy = class SubjectMasterServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  subjectMasterUpsert(subjectMasterObj) {
    let url_ = this.baseUrl + "/api/SubjectMaster/SubjectMasterUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(subjectMasterObj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSubjectMasterUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSubjectMasterUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSubjectMasterUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getSubjectMasterList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/SubjectMaster/GetSubjectMasterList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSubjectMasterList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSubjectMasterList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSubjectMasterList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getSubjectMaster(subjectMasterId) {
    let url_ = this.baseUrl + "/api/SubjectMaster/GetSubjectMaster?";
    if (subjectMasterId === null) throw new Error("The parameter 'subjectMasterId' cannot be null.");else if (subjectMasterId !== undefined) url_ += "SubjectMasterId=" + encodeURIComponent("" + subjectMasterId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSubjectMaster(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSubjectMaster(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSubjectMaster(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SubjectMasterDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  subjectMasterDelete(subjectMasterId) {
    let url_ = this.baseUrl + "/api/SubjectMaster/SubjectMasterDelete?";
    if (subjectMasterId === null) throw new Error("The parameter 'subjectMasterId' cannot be null.");else if (subjectMasterId !== undefined) url_ += "subjectMasterId=" + encodeURIComponent("" + subjectMasterId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSubjectMasterDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSubjectMasterDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSubjectMasterDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SubjectMasterDeleteResponceDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAllSubjectsByClassList(requestDto) {
    let url_ = this.baseUrl + "/api/SubjectMaster/GetAllSubjectsByClassList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAllSubjectsByClassList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAllSubjectsByClassList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAllSubjectsByClassList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TimetableSubjectDropdownResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
SubjectMasterServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], SubjectMasterServiceProxy);

let SubjectMappingServiceProxy = class SubjectMappingServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getSubjectMappingList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/SubjectMapping/GetSubjectMappingList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSubjectMappingList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSubjectMappingList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSubjectMappingList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  subjectMappingInsert(academicYearId, gradeId, divisionId, subjectMappingObj) {
    let url_ = this.baseUrl + "/api/SubjectMapping/SubjectMappingInsert?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "divisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(subjectMappingObj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSubjectMappingInsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSubjectMappingInsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSubjectMappingInsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SubjectMappingUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  subjectMappingDelete(academicYearId, gradeId, divisionId, subjectId) {
    let url_ = this.baseUrl + "/api/SubjectMapping/SubjectMappingDelete?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "divisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (subjectId === null) throw new Error("The parameter 'subjectId' cannot be null.");else if (subjectId !== undefined) url_ += "subjectId=" + encodeURIComponent("" + subjectId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSubjectMappingDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSubjectMappingDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSubjectMappingDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SubjectMappingUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getSubjectMasterDropDown() {
    let url_ = this.baseUrl + "/api/SubjectMapping/GetSubjectMasterDropDown";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSubjectMasterDropDown(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSubjectMasterDropDown(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSubjectMasterDropDown(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SubjectMappingDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
SubjectMappingServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], SubjectMappingServiceProxy);

let StudentReportServiceProxy = class StudentReportServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getCasteWiseStudentCountSelect(obj) {
    let url_ = this.baseUrl + "/api/StudentReport/GetCasteWiseStudentCountSelect";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(obj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetCasteWiseStudentCountSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetCasteWiseStudentCountSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetCasteWiseStudentCountSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CasteWiseStudentCountResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getcategoryStudentCountSelect(obj) {
    let url_ = this.baseUrl + "/api/StudentReport/GetcategoryStudentCountSelect";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(obj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetcategoryStudentCountSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetcategoryStudentCountSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetcategoryStudentCountSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CategoryWiseStudentCountReportResponseDTO.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getReligionStudentCountSelect(obj) {
    let url_ = this.baseUrl + "/api/StudentReport/GetReligionStudentCountSelect";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(obj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetReligionStudentCountSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetReligionStudentCountSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetReligionStudentCountSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ReligionWiseStudentCountReporResponsetDTO.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getRTEStudentCountSelect(obj) {
    let url_ = this.baseUrl + "/api/StudentReport/GetRTEStudentCountSelect";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(obj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetRTEStudentCountSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetRTEStudentCountSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetRTEStudentCountSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RTEStudentCountReportResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTotalStudentCountSelect(obj) {
    let url_ = this.baseUrl + "/api/StudentReport/GetTotalStudentCountSelect";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(obj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTotalStudentCountSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTotalStudentCountSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTotalStudentCountSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentGenderCountReportResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentGenderListSelect(obj) {
    let url_ = this.baseUrl + "/api/StudentReport/GetStudentGenderListSelect";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(obj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentGenderListSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentGenderListSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentGenderListSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentGenderListResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getRTEStudentListSelect(obj) {
    let url_ = this.baseUrl + "/api/StudentReport/GetRTEStudentListSelect";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(obj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetRTEStudentListSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetRTEStudentListSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetRTEStudentListSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentRTEGenderListResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
StudentReportServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], StudentReportServiceProxy);

let StudentServiceProxy = class StudentServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getStudentProfile(studentId, academicYearId) {
    let url_ = this.baseUrl + "/api/Student/GetStudentProfile?";
    if (studentId !== undefined && studentId !== null) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentProfile(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentProfile(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentProfile(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentProfileUpsert() {
    let url_ = this.baseUrl + "/api/Student/StudentProfileUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentProfileUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentProfileUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentProfileUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentIdModelResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Student/GetStudentList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentProfileDelete(studentId, academicYearId) {
    let url_ = this.baseUrl + "/api/Student/StudentProfileDelete?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentProfileDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentProfileDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentProfileDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentDeleteRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getQRCodeDetailByStudentId(studentId, academicYearId) {
    let url_ = this.baseUrl + "/api/Student/GetQRCodeDetailByStudentId?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetQRCodeDetailByStudentId(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetQRCodeDetailByStudentId(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetQRCodeDetailByStudentId(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getQRCodeDetailForAllStudent(academicYearId, classId) {
    let url_ = this.baseUrl + "/api/Student/GetQRCodeDetailForAllStudent?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (classId === null) throw new Error("The parameter 'classId' cannot be null.");else if (classId !== undefined) url_ += "ClassId=" + encodeURIComponent("" + classId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetQRCodeDetailForAllStudent(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetQRCodeDetailForAllStudent(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetQRCodeDetailForAllStudent(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
StudentServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], StudentServiceProxy);

let StudentKitAnalyticsPaymentAnalyticsServiceProxy = class StudentKitAnalyticsPaymentAnalyticsServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getStudentKitPaymentAnalyticsSchool(academicYearId) {
    let url_ = this.baseUrl + "/api/StudentKitAnalyticsPaymentAnalytics/GetStudentKitPaymentAnalyticsSchool?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitPaymentAnalyticsSchool(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitPaymentAnalyticsSchool(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitPaymentAnalyticsSchool(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentKitPaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentKitPaymentAnalyticsGrade(academicYearId) {
    let url_ = this.baseUrl + "/api/StudentKitAnalyticsPaymentAnalytics/GetStudentKitPaymentAnalyticsGrade?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitPaymentAnalyticsGrade(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitPaymentAnalyticsGrade(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitPaymentAnalyticsGrade(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentKitPaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentKitPaymentAnalyticsDivision(gradeId, academicYearId) {
    let url_ = this.baseUrl + "/api/StudentKitAnalyticsPaymentAnalytics/GetStudentKitPaymentAnalyticsDivision?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitPaymentAnalyticsDivision(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitPaymentAnalyticsDivision(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitPaymentAnalyticsDivision(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentKitPaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentKitPaymentAnalyticsStudent(gradeId, divisionId, academicYearId) {
    let url_ = this.baseUrl + "/api/StudentKitAnalyticsPaymentAnalytics/GetStudentKitPaymentAnalyticsStudent?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitPaymentAnalyticsStudent(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitPaymentAnalyticsStudent(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitPaymentAnalyticsStudent(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentKitPaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
StudentKitAnalyticsPaymentAnalyticsServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], StudentKitAnalyticsPaymentAnalyticsServiceProxy);

let StudentKitFeePaymentServiceProxy = class StudentKitFeePaymentServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getStudentKitFeePaymentGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/StudentKitFeePayment/GetStudentKitFeePaymentGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitFeePaymentGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitFeePaymentGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitFeePaymentGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentKitFeePaymentDueByAYSelect(studentId, currentAcademicYearInclude) {
    let url_ = this.baseUrl + "/api/StudentKitFeePayment/GetStudentKitFeePaymentDueByAYSelect?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    if (currentAcademicYearInclude === null) throw new Error("The parameter 'currentAcademicYearInclude' cannot be null.");else if (currentAcademicYearInclude !== undefined) url_ += "currentAcademicYearInclude=" + encodeURIComponent("" + currentAcademicYearInclude) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitFeePaymentDueByAYSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitFeePaymentDueByAYSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitFeePaymentDueByAYSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentKitFeePaymentDueByAYSelectResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentKitFeePaymentSelect(academicYearId, studentId, gradeId, divisionId) {
    let url_ = this.baseUrl + "/api/StudentKitFeePayment/GetStudentKitFeePaymentSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitFeePaymentSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitFeePaymentSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitFeePaymentSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentKitFeepaymentSelectDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentKitFeePaymentUpsert(feePaymentUpsertDto) {
    let url_ = this.baseUrl + "/api/StudentKitFeePayment/StudentKitFeePaymentUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(feePaymentUpsertDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentKitFeePaymentUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentKitFeePaymentUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentKitFeePaymentUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentKitFeePaymentHistoryGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/StudentKitFeePayment/GetStudentKitFeePaymentHistoryGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitFeePaymentHistoryGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitFeePaymentHistoryGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitFeePaymentHistoryGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentKitFeePaymentHistorySelect(academicYearId, studentId, gradeId, divisionId, studentKitFeePaymentId) {
    let url_ = this.baseUrl + "/api/StudentKitFeePayment/GetStudentKitFeePaymentHistorySelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "divisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (studentKitFeePaymentId === null) throw new Error("The parameter 'studentKitFeePaymentId' cannot be null.");else if (studentKitFeePaymentId !== undefined) url_ += "studentKitFeePaymentId=" + encodeURIComponent("" + studentKitFeePaymentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitFeePaymentHistorySelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitFeePaymentHistorySelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitFeePaymentHistorySelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentKitFeepaymentHistorySelectDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentKitFeePaymentDelete(studentKitFeePaymentId) {
    let url_ = this.baseUrl + "/api/StudentKitFeePayment/StudentKitFeePaymentDelete?";
    if (studentKitFeePaymentId === null) throw new Error("The parameter 'studentKitFeePaymentId' cannot be null.");else if (studentKitFeePaymentId !== undefined) url_ += "studentKitFeePaymentId=" + encodeURIComponent("" + studentKitFeePaymentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentKitFeePaymentDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentKitFeePaymentDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentKitFeePaymentDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentKitClearCheque(studentKitFeePaymentId) {
    let url_ = this.baseUrl + "/api/StudentKitFeePayment/StudentKitClearCheque?";
    if (studentKitFeePaymentId === null) throw new Error("The parameter 'studentKitFeePaymentId' cannot be null.");else if (studentKitFeePaymentId !== undefined) url_ += "studentKitFeePaymentId=" + encodeURIComponent("" + studentKitFeePaymentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentKitClearCheque(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentKitClearCheque(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentKitClearCheque(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentKitDayWisePaymentReport(request) {
    let url_ = this.baseUrl + "/api/StudentKitFeePayment/GetStudentKitDayWisePaymentReport";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(request);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitDayWisePaymentReport(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitDayWisePaymentReport(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitDayWisePaymentReport(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentKitDaywisePaymentReportDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
StudentKitFeePaymentServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], StudentKitFeePaymentServiceProxy);

let StudentDocumentServiceProxy = class StudentDocumentServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getStudentDocumentSelect(documentId) {
    let url_ = this.baseUrl + "/api/StudentDocument/GetStudentDocumentSelect?";
    if (documentId === null) throw new Error("The parameter 'documentId' cannot be null.");else if (documentId !== undefined) url_ += "documentId=" + encodeURIComponent("" + documentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentDocumentSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentDocumentSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentDocumentSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentDocumentDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentDocumentList(studentId) {
    let url_ = this.baseUrl + "/api/StudentDocument/GetStudentDocumentList?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentDocumentList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentDocumentList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentDocumentList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentDocumentDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentDocumentInsert() {
    let url_ = this.baseUrl + "/api/StudentDocument/StudentDocumentInsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentDocumentInsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentDocumentInsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentDocumentInsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentDocumentDelete(documentId) {
    let url_ = this.baseUrl + "/api/StudentDocument/StudentDocumentDelete?";
    if (documentId === null) throw new Error("The parameter 'documentId' cannot be null.");else if (documentId !== undefined) url_ += "documentId=" + encodeURIComponent("" + documentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentDocumentDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentDocumentDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentDocumentDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
StudentDocumentServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], StudentDocumentServiceProxy);

let ClassAttendanceMissingReportServiceProxy = class ClassAttendanceMissingReportServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  classMissingAttendanceReport(academicYearId, refId, roleId) {
    let url_ = this.baseUrl + "/api/ClassAttendanceMissingReport/ClassMissingAttendanceReport?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (refId === null) throw new Error("The parameter 'refId' cannot be null.");else if (refId !== undefined) url_ += "RefId=" + encodeURIComponent("" + refId) + "&";
    if (roleId === null) throw new Error("The parameter 'roleId' cannot be null.");else if (roleId !== undefined) url_ += "RoleId=" + encodeURIComponent("" + roleId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processClassMissingAttendanceReport(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processClassMissingAttendanceReport(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processClassMissingAttendanceReport(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ClassAttendanceMissingReportResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
ClassAttendanceMissingReportServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], ClassAttendanceMissingReportServiceProxy);

let StudentAttendanceServiceProxy = class StudentAttendanceServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getStudentAttendanceList(requestDto) {
    let url_ = this.baseUrl + "/api/StudentAttendance/GetStudentAttendanceList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentAttendanceList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentAttendanceList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentAttendanceList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentAttendanceGridResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentAttendanceUpsert(studentAttendanceUpsertDto) {
    let url_ = this.baseUrl + "/api/StudentAttendance/GetStudentAttendanceUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(studentAttendanceUpsertDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentAttendanceUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentAttendanceUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentAttendanceUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAllTeacherForDropDown() {
    let url_ = this.baseUrl + "/api/StudentAttendance/GetAllTeacherForDropDown";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAllTeacherForDropDown(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAllTeacherForDropDown(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAllTeacherForDropDown(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherDropdownResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAttendanceDetailByStudentId(studentId, academicYearId) {
    let url_ = this.baseUrl + "/api/StudentAttendance/GetAttendanceDetailByStudentId?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAttendanceDetailByStudentId(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAttendanceDetailByStudentId(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAttendanceDetailByStudentId(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentAttendanceMobileResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
StudentAttendanceServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], StudentAttendanceServiceProxy);

let ApiServiceProxy = class ApiServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  studentAttendance(studentAttendanceUpsertDto) {
    let url_ = this.baseUrl + "/api/StudentAttendance";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(studentAttendanceUpsertDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentAttendance(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentAttendance(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentAttendance(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  galleryPost(galleryUpsertDto) {
    let url_ = this.baseUrl + "/api/Gallery";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(galleryUpsertDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGalleryPost(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGalleryPost(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGalleryPost(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  galleryGet(title, classId) {
    let url_ = this.baseUrl + "/api/Gallery?";
    if (title !== undefined && title !== null) url_ += "title=" + encodeURIComponent("" + title) + "&";
    if (classId === null) throw new Error("The parameter 'classId' cannot be null.");else if (classId !== undefined) url_ += "classId=" + encodeURIComponent("" + classId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGalleryGet(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGalleryGet(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGalleryGet(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
ApiServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], ApiServiceProxy);

let StudentAttendanceDateWiseServiceProxy = class StudentAttendanceDateWiseServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  studentAttendanceReportDateWise(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/StudentAttendanceDateWise/StudentAttendanceReportDateWise";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentAttendanceReportDateWise(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentAttendanceReportDateWise(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentAttendanceReportDateWise(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
StudentAttendanceDateWiseServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], StudentAttendanceDateWiseServiceProxy);

let StudentAttendanceReportServiceProxy = class StudentAttendanceReportServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getStudentAttendanceReportGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/StudentAttendanceReport/GetStudentAttendanceReportGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentAttendanceReportGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentAttendanceReportGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentAttendanceReportGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
StudentAttendanceReportServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], StudentAttendanceReportServiceProxy);

let SchoolVacationServiceProxy = class SchoolVacationServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  schoolVacationDetails(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/SchoolVacation/SchoolVacationDetails";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolVacationDetails(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolVacationDetails(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolVacationDetails(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getSchoolVacationSelect(schoolVacationId) {
    let url_ = this.baseUrl + "/api/SchoolVacation/GetSchoolVacationSelect?";
    if (schoolVacationId !== undefined && schoolVacationId !== null) url_ += "SchoolVacationId=" + encodeURIComponent("" + schoolVacationId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSchoolVacationSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSchoolVacationSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSchoolVacationSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolVacationDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  schoolVacationDelete(schoolVacationId) {
    let url_ = this.baseUrl + "/api/SchoolVacation/SchoolVacationDelete?";
    if (schoolVacationId !== undefined && schoolVacationId !== null) url_ += "SchoolVacationId=" + encodeURIComponent("" + schoolVacationId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolVacationDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolVacationDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolVacationDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  updateSchoolVacation(obj) {
    let url_ = this.baseUrl + "/api/SchoolVacation/UpdateSchoolVacation";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(obj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processUpdateSchoolVacation(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processUpdateSchoolVacation(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processUpdateSchoolVacation(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
SchoolVacationServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], SchoolVacationServiceProxy);

let SchoolMonthEventServiceProxy = class SchoolMonthEventServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  schoolMonthEvent(academicYearId) {
    let url_ = this.baseUrl + "/api/SchoolMonthEvent/SchoolMonthEvent?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolMonthEvent(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolMonthEvent(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolMonthEvent(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolMonthEventResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
SchoolMonthEventServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], SchoolMonthEventServiceProxy);

let SchoolHolidayServiceProxy = class SchoolHolidayServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getHolidayDetails(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/SchoolHoliday/GetHolidayDetails";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetHolidayDetails(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetHolidayDetails(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetHolidayDetails(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  schoolHolidaySelect(academicYearId) {
    let url_ = this.baseUrl + "/api/SchoolHoliday/SchoolHolidaySelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolHolidaySelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolHolidaySelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolHolidaySelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolHolidayResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  schoolHolidayDelete(schoolHolidayId) {
    let url_ = this.baseUrl + "/api/SchoolHoliday/SchoolHolidayDelete?";
    if (schoolHolidayId === null) throw new Error("The parameter 'schoolHolidayId' cannot be null.");else if (schoolHolidayId !== undefined) url_ += "SchoolHolidayId=" + encodeURIComponent("" + schoolHolidayId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolHolidayDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolHolidayDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolHolidayDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  schoolHolidayInsert(shdObj) {
    let url_ = this.baseUrl + "/api/SchoolHoliday/SchoolHolidayInsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(shdObj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolHolidayInsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolHolidayInsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolHolidayInsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  checkExistResponse(obj) {
    let url_ = this.baseUrl + "/api/SchoolHoliday/CheckExistResponse";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(obj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processCheckExistResponse(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processCheckExistResponse(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processCheckExistResponse(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ExistResposeDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
SchoolHolidayServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], SchoolHolidayServiceProxy);

let SchoolEventServiceProxy = class SchoolEventServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  schoolEvent(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/SchoolEvent/SchoolEvent";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolEvent(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolEvent(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolEvent(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  schoolEventSelect(schoolEventId) {
    let url_ = this.baseUrl + "/api/SchoolEvent/SchoolEventSelect?";
    if (schoolEventId === null) throw new Error("The parameter 'schoolEventId' cannot be null.");else if (schoolEventId !== undefined) url_ += "SchoolEventId=" + encodeURIComponent("" + schoolEventId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolEventSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolEventSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolEventSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolEventDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  publishUnpublishSchoolEventParticular(publishRequest) {
    let url_ = this.baseUrl + "/api/SchoolEvent/PublishUnpublishSchoolEventParticular";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(publishRequest);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processPublishUnpublishSchoolEventParticular(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processPublishUnpublishSchoolEventParticular(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processPublishUnpublishSchoolEventParticular(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  schoolEventDelete(schoolEventId) {
    let url_ = this.baseUrl + "/api/SchoolEvent/SchoolEventDelete?";
    if (schoolEventId === null) throw new Error("The parameter 'schoolEventId' cannot be null.");else if (schoolEventId !== undefined) url_ += "SchoolEventId=" + encodeURIComponent("" + schoolEventId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolEventDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolEventDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolEventDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  schoolEventUpsert() {
    let url_ = this.baseUrl + "/api/SchoolEvent/SchoolEventUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolEventUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolEventUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolEventUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolEventDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  uploadSchoolEventMediaChunk() {
    let url_ = this.baseUrl + "/api/SchoolEvent/UploadSchoolEventMediaChunk";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/octet-stream"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processUploadSchoolEventMediaChunk(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processUploadSchoolEventMediaChunk(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processUploadSchoolEventMediaChunk(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
      let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
        fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      }
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)({
        fileName: fileName,
        data: responseBlob,
        status: status,
        headers: _headers
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
SchoolEventServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], SchoolEventServiceProxy);

let SchoolCalendarServiceProxy = class SchoolCalendarServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  schoolCalenadarSelect(academicYearId) {
    let url_ = this.baseUrl + "/api/SchoolCalendar/SchoolCalenadarSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolCalenadarSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolCalenadarSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolCalenadarSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolCalendarResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getSchoolCalendarEventsForTeacherApp(academicYearId) {
    let url_ = this.baseUrl + "/api/SchoolCalendar/GetSchoolCalendarEventsForTeacherApp?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSchoolCalendarEventsForTeacherApp(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSchoolCalendarEventsForTeacherApp(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSchoolCalendarEventsForTeacherApp(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolCalendarAppResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
SchoolCalendarServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], SchoolCalendarServiceProxy);

let PromoteServiceProxy = class PromoteServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getPromoteList(requestDto) {
    let url_ = this.baseUrl + "/api/Promote/GetPromoteList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetPromoteList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetPromoteList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetPromoteList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PromoteGridResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentPassOrFailUpdate(academicYearId, action, lstPromoteList) {
    let url_ = this.baseUrl + "/api/Promote/StudentPassOrFailUpdate?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (action !== undefined && action !== null) url_ += "action=" + encodeURIComponent("" + action) + "&";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(lstPromoteList);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentPassOrFailUpdate(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentPassOrFailUpdate(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentPassOrFailUpdate(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  promoteStudentToNextYear(nextAcademicYearId, academicYearId, gradeId, divisionId, lstPromoteList) {
    let url_ = this.baseUrl + "/api/Promote/PromoteStudentToNextYear?";
    if (nextAcademicYearId === null) throw new Error("The parameter 'nextAcademicYearId' cannot be null.");else if (nextAcademicYearId !== undefined) url_ += "nextAcademicYearId=" + encodeURIComponent("" + nextAcademicYearId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "divisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(lstPromoteList);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processPromoteStudentToNextYear(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processPromoteStudentToNextYear(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processPromoteStudentToNextYear(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
PromoteServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], PromoteServiceProxy);

let PaymentAnalyticsServiceProxy = class PaymentAnalyticsServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getPaymentAnalyticsSchool(academicYearId) {
    let url_ = this.baseUrl + "/api/PaymentAnalytics/GetPaymentAnalyticsSchool?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetPaymentAnalyticsSchool(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetPaymentAnalyticsSchool(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetPaymentAnalyticsSchool(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getPaymentAnalyticsGrade(academicYearId) {
    let url_ = this.baseUrl + "/api/PaymentAnalytics/GetPaymentAnalyticsGrade?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetPaymentAnalyticsGrade(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetPaymentAnalyticsGrade(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetPaymentAnalyticsGrade(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getPaymentAnalyticsDivision(gradeId, academicYearId) {
    let url_ = this.baseUrl + "/api/PaymentAnalytics/GetPaymentAnalyticsDivision?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetPaymentAnalyticsDivision(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetPaymentAnalyticsDivision(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetPaymentAnalyticsDivision(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getPaymentAnalyticsStudent(gradeId, divisionId, academicYearId) {
    let url_ = this.baseUrl + "/api/PaymentAnalytics/GetPaymentAnalyticsStudent?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetPaymentAnalyticsStudent(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetPaymentAnalyticsStudent(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetPaymentAnalyticsStudent(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PaymentAnalyticsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
PaymentAnalyticsServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], PaymentAnalyticsServiceProxy);

let ParentServiceProxy = class ParentServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getParentProfile(parentId) {
    let url_ = this.baseUrl + "/api/Parent/GetParentProfile?";
    if (parentId !== undefined && parentId !== null) url_ += "parentId=" + encodeURIComponent("" + parentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetParentProfile(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetParentProfile(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetParentProfile(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ParentDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  parentProfileUpsert() {
    let url_ = this.baseUrl + "/api/Parent/ParentProfileUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processParentProfileUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processParentProfileUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processParentProfileUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getParentList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Parent/GetParentList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetParentList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetParentList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetParentList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  parentProfileDelete(parentId) {
    let url_ = this.baseUrl + "/api/Parent/ParentProfileDelete?";
    if (parentId === null) throw new Error("The parameter 'parentId' cannot be null.");else if (parentId !== undefined) url_ += "parentId=" + encodeURIComponent("" + parentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processParentProfileDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processParentProfileDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processParentProfileDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ParentDeleteRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
ParentServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], ParentServiceProxy);

let NoticeServiceProxy = class NoticeServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getNoticeGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Notice/GetNoticeGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetNoticeGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetNoticeGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetNoticeGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  noticeSelect(noticeId) {
    let url_ = this.baseUrl + "/api/Notice/NoticeSelect?";
    if (noticeId === null) throw new Error("The parameter 'noticeId' cannot be null.");else if (noticeId !== undefined) url_ += "NoticeId=" + encodeURIComponent("" + noticeId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processNoticeSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processNoticeSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processNoticeSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = NoticeUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  noticeUpsert() {
    let url_ = this.baseUrl + "/api/Notice/NoticeUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processNoticeUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processNoticeUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processNoticeUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = NoticeUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  uploadNoticeMediaChunk() {
    let url_ = this.baseUrl + "/api/Notice/UploadNoticeMediaChunk";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/octet-stream"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processUploadNoticeMediaChunk(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processUploadNoticeMediaChunk(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processUploadNoticeMediaChunk(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
      let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
        fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      }
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)({
        fileName: fileName,
        data: responseBlob,
        status: status,
        headers: _headers
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  noticeDelete(noticeId) {
    let url_ = this.baseUrl + "/api/Notice/NoticeDelete?";
    if (noticeId === null) throw new Error("The parameter 'noticeId' cannot be null.");else if (noticeId !== undefined) url_ += "noticeId=" + encodeURIComponent("" + noticeId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processNoticeDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processNoticeDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processNoticeDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  publishUnpublishNoticeParticulars(publishRequest) {
    let url_ = this.baseUrl + "/api/Notice/PublishUnpublishNoticeParticulars";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(publishRequest);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processPublishUnpublishNoticeParticulars(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processPublishUnpublishNoticeParticulars(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processPublishUnpublishNoticeParticulars(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAllNoticeForStudent(requestDto) {
    let url_ = this.baseUrl + "/api/Notice/GetAllNoticeForStudent";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAllNoticeForStudent(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAllNoticeForStudent(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAllNoticeForStudent(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ParentAppNoticeResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getNoticeFromRoleAppSelectList() {
    let url_ = this.baseUrl + "/api/Notice/GetNoticeFromRoleAppSelectList";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetNoticeFromRoleAppSelectList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetNoticeFromRoleAppSelectList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetNoticeFromRoleAppSelectList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CommonDropdownSelectListItemResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
NoticeServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], NoticeServiceProxy);

let CommonAppServiceProxy = class CommonAppServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getSchoolDetail() {
    let url_ = this.baseUrl + "/api/CommonApp/GetSchoolDetail";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSchoolDetail(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSchoolDetail(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSchoolDetail(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolDetailMobileDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentsByUserId() {
    let url_ = this.baseUrl + "/api/CommonApp/GetStudentsByUserId";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentsByUserId(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentsByUserId(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentsByUserId(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentDetailMobileResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
CommonAppServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], CommonAppServiceProxy);

let StudentProfileServiceProxy = class StudentProfileServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getStudentProfile(studentId) {
    let url_ = this.baseUrl + "/api/StudentProfile/GetStudentProfile?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentProfile(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentProfile(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentProfile(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentProfileMobileDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentProfileUpdate() {
    let url_ = this.baseUrl + "/api/StudentProfile/StudentProfileUpdate";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentProfileUpdate(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentProfileUpdate(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentProfileUpdate(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getParentProfile(studentId) {
    let url_ = this.baseUrl + "/api/StudentProfile/GetParentProfile?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetParentProfile(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetParentProfile(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetParentProfile(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ParentProfileMobileResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  parentProfileUpdate() {
    let url_ = this.baseUrl + "/api/StudentProfile/ParentProfileUpdate";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processParentProfileUpdate(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processParentProfileUpdate(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processParentProfileUpdate(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
StudentProfileServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], StudentProfileServiceProxy);

let ParentAppServiceProxy = class ParentAppServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getParentFeePaymentDetails(studentId) {
    let url_ = this.baseUrl + "/api/ParentApp/GetParentFeePaymentDetails?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetParentFeePaymentDetails(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetParentFeePaymentDetails(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetParentFeePaymentDetails(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = FeePaymentTopSectionDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getParentTransportFeePaymentDetails(studentId) {
    let url_ = this.baseUrl + "/api/ParentApp/GetParentTransportFeePaymentDetails?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetParentTransportFeePaymentDetails(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetParentTransportFeePaymentDetails(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetParentTransportFeePaymentDetails(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportFeePaymentTopSectionDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  oneMonthEvent(classId) {
    let url_ = this.baseUrl + "/api/ParentApp/OneMonthEvent?";
    if (classId === null) throw new Error("The parameter 'classId' cannot be null.");else if (classId !== undefined) url_ += "classId=" + encodeURIComponent("" + classId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processOneMonthEvent(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processOneMonthEvent(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processOneMonthEvent(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = OneMonthEventParentAppResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  oneDayLectureSelect(classId, dayNo) {
    let url_ = this.baseUrl + "/api/ParentApp/OneDayLectureSelect?";
    if (classId === null) throw new Error("The parameter 'classId' cannot be null.");else if (classId !== undefined) url_ += "classId=" + encodeURIComponent("" + classId) + "&";
    if (dayNo === null) throw new Error("The parameter 'dayNo' cannot be null.");else if (dayNo !== undefined) url_ += "DayNo=" + encodeURIComponent("" + dayNo) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processOneDayLectureSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processOneDayLectureSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processOneDayLectureSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherOneDayLecturesParentAppResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  attendanceMissingParent(studentId) {
    let url_ = this.baseUrl + "/api/ParentApp/AttendanceMissingParent?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processAttendanceMissingParent(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processAttendanceMissingParent(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processAttendanceMissingParent(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = MissingAttendanceParentAppDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentGradeDivision(parentId) {
    let url_ = this.baseUrl + "/api/ParentApp/StudentGradeDivision?";
    if (parentId === null) throw new Error("The parameter 'parentId' cannot be null.");else if (parentId !== undefined) url_ += "parentId=" + encodeURIComponent("" + parentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentGradeDivision(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentGradeDivision(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentGradeDivision(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentGradeDivisionParentAppDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getParentAppListSelect(academicYearId, classId) {
    let url_ = this.baseUrl + "/api/ParentApp/GetParentAppListSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (classId === null) throw new Error("The parameter 'classId' cannot be null.");else if (classId !== undefined) url_ += "classId=" + encodeURIComponent("" + classId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetParentAppListSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetParentAppListSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetParentAppListSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolParentCalendarResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAttendanceDetailByStudentId(studentId) {
    let url_ = this.baseUrl + "/api/ParentApp/GetAttendanceDetailByStudentId?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAttendanceDetailByStudentId(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAttendanceDetailByStudentId(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAttendanceDetailByStudentId(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentAttendanceMobileResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getVehicleTrackListSelect(studentId) {
    let url_ = this.baseUrl + "/api/ParentApp/GetVehicleTrackListSelect?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetVehicleTrackListSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetVehicleTrackListSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetVehicleTrackListSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = VehicleTrackResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStoppageTrackListSelect(studentId) {
    let url_ = this.baseUrl + "/api/ParentApp/GetStoppageTrackListSelect?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStoppageTrackListSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStoppageTrackListSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStoppageTrackListSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StoppageTrackResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
ParentAppServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], ParentAppServiceProxy);

let MasterServiceProxy = class MasterServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getAddressMasterData() {
    let url_ = this.baseUrl + "/api/Master/GetAddressMasterData";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAddressMasterData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAddressMasterData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAddressMasterData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AddressMasterDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getMediumTypeData() {
    let url_ = this.baseUrl + "/api/Master/GetMediumTypeData";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetMediumTypeData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetMediumTypeData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetMediumTypeData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = MediumTypeResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAcademicYearData() {
    let url_ = this.baseUrl + "/api/Master/GetAcademicYearData";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAcademicYearData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAcademicYearData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAcademicYearData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AcademicYearResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getGradeDivisionMasterList(academicYearId) {
    let url_ = this.baseUrl + "/api/Master/GetGradeDivisionMasterList?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetGradeDivisionMasterList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetGradeDivisionMasterList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetGradeDivisionMasterList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GradeDivisionMasterDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getMonthMasterList() {
    let url_ = this.baseUrl + "/api/Master/GetMonthMasterList";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetMonthMasterList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetMonthMasterList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetMonthMasterList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = MonthMasterResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentDropdownData(academicYearId) {
    let url_ = this.baseUrl + "/api/Master/GetStudentDropdownData?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentDropdownData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentDropdownData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentDropdownData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CommonDropdownSelectListItemResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTeacherDropdownData(academicYearId) {
    let url_ = this.baseUrl + "/api/Master/GetTeacherDropdownData?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTeacherDropdownData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTeacherDropdownData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTeacherDropdownData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherDropdownSelectListResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTeacherDropdownWithoutSubject() {
    let url_ = this.baseUrl + "/api/Master/GetTeacherDropdownWithoutSubject";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTeacherDropdownWithoutSubject(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTeacherDropdownWithoutSubject(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTeacherDropdownWithoutSubject(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherDropdownSelectListResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getClerkDropdownData(academicYearId) {
    let url_ = this.baseUrl + "/api/Master/GetClerkDropdownData?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetClerkDropdownData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetClerkDropdownData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetClerkDropdownData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CommonDropdownSelectListItemResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getCabDriverDropdownData(academicYearId) {
    let url_ = this.baseUrl + "/api/Master/GetCabDriverDropdownData?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetCabDriverDropdownData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetCabDriverDropdownData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetCabDriverDropdownData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CommonDropdownSelectListItemResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
MasterServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], MasterServiceProxy);

let SchoolServiceProxy = class SchoolServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getSchoolProfile(schoolId) {
    let url_ = this.baseUrl + "/api/School/GetSchoolProfile?";
    if (schoolId === null) throw new Error("The parameter 'schoolId' cannot be null.");else if (schoolId !== undefined) url_ += "SchoolId=" + encodeURIComponent("" + schoolId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSchoolProfile(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSchoolProfile(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSchoolProfile(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  schoolProfileUpsert() {
    let url_ = this.baseUrl + "/api/School/SchoolProfileUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolProfileUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolProfileUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolProfileUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getSchoolSettingProfile(schoolId, academicYearId) {
    let url_ = this.baseUrl + "/api/School/GetSchoolSettingProfile?";
    if (schoolId === null) throw new Error("The parameter 'schoolId' cannot be null.");else if (schoolId !== undefined) url_ += "SchoolId=" + encodeURIComponent("" + schoolId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSchoolSettingProfile(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSchoolSettingProfile(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSchoolSettingProfile(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SchoolSettingDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  schoolSettingUpsert(schoolModel) {
    let url_ = this.baseUrl + "/api/School/SchoolSettingUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(schoolModel);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processSchoolSettingUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processSchoolSettingUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processSchoolSettingUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getCurrentSchoolAppVersion() {
    let url_ = this.baseUrl + "/api/School/GetCurrentSchoolAppVersion";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetCurrentSchoolAppVersion(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetCurrentSchoolAppVersion(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetCurrentSchoolAppVersion(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AppVersionDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
SchoolServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], SchoolServiceProxy);

let StudentsImportServiceProxy = class StudentsImportServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  uploadStudentData() {
    let url_ = this.baseUrl + "/api/StudentsImport/UploadStudentData";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processUploadStudentData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processUploadStudentData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processUploadStudentData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ResponseImportStudentDataDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
StudentsImportServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], StudentsImportServiceProxy);

let SubjectImportServiceProxy = class SubjectImportServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  uploadSubjectData() {
    let url_ = this.baseUrl + "/api/SubjectImport/UploadSubjectData";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processUploadSubjectData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processUploadSubjectData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processUploadSubjectData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ResponseImportSubjectDataDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
SubjectImportServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], SubjectImportServiceProxy);

let TeacherImportServiceProxy = class TeacherImportServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  uploadTeacherData() {
    let url_ = this.baseUrl + "/api/TeacherImport/UploadTeacherData";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processUploadTeacherData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processUploadTeacherData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processUploadTeacherData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ResponseImportTeacherDataDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
TeacherImportServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], TeacherImportServiceProxy);

let HomeworkServiceProxy = class HomeworkServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getHomeworkGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Homework/GetHomeworkGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetHomeworkGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetHomeworkGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetHomeworkGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  homeworkSelect(homeworkId) {
    let url_ = this.baseUrl + "/api/Homework/HomeworkSelect?";
    if (homeworkId === null) throw new Error("The parameter 'homeworkId' cannot be null.");else if (homeworkId !== undefined) url_ += "HomeworkId=" + encodeURIComponent("" + homeworkId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processHomeworkSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processHomeworkSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processHomeworkSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = HomeworkUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  homeworkUpsert() {
    let url_ = this.baseUrl + "/api/Homework/HomeworkUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processHomeworkUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processHomeworkUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processHomeworkUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = HomeworkUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  uploadHomeworkMediaChunk() {
    let url_ = this.baseUrl + "/api/Homework/UploadHomeworkMediaChunk";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/octet-stream"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processUploadHomeworkMediaChunk(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processUploadHomeworkMediaChunk(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processUploadHomeworkMediaChunk(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
      let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
        fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      }
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)({
        fileName: fileName,
        data: responseBlob,
        status: status,
        headers: _headers
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  homeWorkDelete(homeworkId) {
    let url_ = this.baseUrl + "/api/Homework/HomeWorkDelete?";
    if (homeworkId === null) throw new Error("The parameter 'homeworkId' cannot be null.");else if (homeworkId !== undefined) url_ += "homeworkId=" + encodeURIComponent("" + homeworkId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processHomeWorkDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processHomeWorkDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processHomeWorkDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  publishUnpublishHomeworkParticulars(publishRequest) {
    let url_ = this.baseUrl + "/api/Homework/PublishUnpublishHomeworkParticulars";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(publishRequest);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processPublishUnpublishHomeworkParticulars(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processPublishUnpublishHomeworkParticulars(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processPublishUnpublishHomeworkParticulars(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getSubjectMappingDropdown(academicYearId, gradeId, divisionId) {
    let url_ = this.baseUrl + "/api/Homework/GetSubjectMappingDropdown?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetSubjectMappingDropdown(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetSubjectMappingDropdown(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetSubjectMappingDropdown(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SubjectMappingDropdownResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAllHomeworkForStudent(requestDto) {
    let url_ = this.baseUrl + "/api/Homework/GetAllHomeworkForStudent";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAllHomeworkForStudent(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAllHomeworkForStudent(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAllHomeworkForStudent(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ParentAppHomeworkResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
HomeworkServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], HomeworkServiceProxy);

let GradeServiceProxy = class GradeServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getGradeData(gradeId) {
    let url_ = this.baseUrl + "/api/Grade/GetGradeData?";
    if (gradeId !== undefined && gradeId !== null) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetGradeData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetGradeData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetGradeData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GradeDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  gradeDataUpsert(gradeObj) {
    let url_ = this.baseUrl + "/api/Grade/GradeDataUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(gradeObj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGradeDataUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGradeDataUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGradeDataUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GradeUpdateRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getGradeList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Grade/GetGradeList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetGradeList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetGradeList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetGradeList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  gradeDataDelete(gradeId, academicYearId) {
    let url_ = this.baseUrl + "/api/Grade/GradeDataDelete?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGradeDataDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGradeDataDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGradeDataDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GradeDeleteRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
GradeServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], GradeServiceProxy);

let GradeDivisionMatrixServiceProxy = class GradeDivisionMatrixServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getGradeDivisionMatrixData(gradeId, academicYearId) {
    let url_ = this.baseUrl + "/api/GradeDivisionMatrix/GetGradeDivisionMatrixData?";
    if (gradeId !== undefined && gradeId !== null) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetGradeDivisionMatrixData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetGradeDivisionMatrixData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetGradeDivisionMatrixData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GradeDivisionMatrixDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  gradeDivisionMatrixDataUpsert(academicYearId, gradeDivisionObj) {
    let url_ = this.baseUrl + "/api/GradeDivisionMatrix/GradeDivisionMatrixDataUpsert?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(gradeDivisionObj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGradeDivisionMatrixDataUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGradeDivisionMatrixDataUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGradeDivisionMatrixDataUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getGradeDivisionMatrixList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/GradeDivisionMatrix/GetGradeDivisionMatrixList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetGradeDivisionMatrixList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetGradeDivisionMatrixList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetGradeDivisionMatrixList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  gradeDivisionMatrixDelete(gradeId, divisionName, academicYearId) {
    let url_ = this.baseUrl + "/api/GradeDivisionMatrix/GradeDivisionMatrixDelete?";
    if (gradeId !== undefined && gradeId !== null) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionName !== undefined && divisionName !== null) url_ += "divisionName=" + encodeURIComponent("" + divisionName) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGradeDivisionMatrixDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGradeDivisionMatrixDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGradeDivisionMatrixDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GradeDivisionMatrixDeleteRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
GradeDivisionMatrixServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], GradeDivisionMatrixServiceProxy);

let GalleryServiceProxy = class GalleryServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getGalleryGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Gallery/GetGalleryGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetGalleryGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetGalleryGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetGalleryGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  gallerySelect(galleryId) {
    let url_ = this.baseUrl + "/api/Gallery/GallerySelect?";
    if (galleryId === null) throw new Error("The parameter 'galleryId' cannot be null.");else if (galleryId !== undefined) url_ += "galleryId=" + encodeURIComponent("" + galleryId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGallerySelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGallerySelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGallerySelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GalleryUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  galleryUpsert() {
    let url_ = this.baseUrl + "/api/Gallery/GalleryUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGalleryUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGalleryUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGalleryUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GalleryUpsertDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  uploadGalleryMediaChunk() {
    let url_ = this.baseUrl + "/api/Gallery/UploadGalleryMediaChunk";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/octet-stream"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processUploadGalleryMediaChunk(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processUploadGalleryMediaChunk(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processUploadGalleryMediaChunk(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
      let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
        fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      }
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)({
        fileName: fileName,
        data: responseBlob,
        status: status,
        headers: _headers
      });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  galleryDelete(galleryId) {
    let url_ = this.baseUrl + "/api/Gallery/GalleryDelete?";
    if (galleryId === null) throw new Error("The parameter 'galleryId' cannot be null.");else if (galleryId !== undefined) url_ += "galleryId=" + encodeURIComponent("" + galleryId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGalleryDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGalleryDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGalleryDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  publishUnpublishGalleryParticulars(publishRequest) {
    let url_ = this.baseUrl + "/api/Gallery/PublishUnpublishGalleryParticulars";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(publishRequest);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processPublishUnpublishGalleryParticulars(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processPublishUnpublishGalleryParticulars(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processPublishUnpublishGalleryParticulars(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getGalleryFromRoleAppSelectList() {
    let url_ = this.baseUrl + "/api/Gallery/GetGalleryFromRoleAppSelectList";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetGalleryFromRoleAppSelectList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetGalleryFromRoleAppSelectList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetGalleryFromRoleAppSelectList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CommonDropdownSelectListItemResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAllGalleryForStudent(requestDto) {
    let url_ = this.baseUrl + "/api/Gallery/GetAllGalleryForStudent";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAllGalleryForStudent(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAllGalleryForStudent(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAllGalleryForStudent(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ParentAppGalleryResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
GalleryServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], GalleryServiceProxy);

let FeeWavierTypeServiceProxy = class FeeWavierTypeServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getFeeWavierTypeList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/FeeWavierType/GetFeeWavierTypeList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetFeeWavierTypeList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetFeeWavierTypeList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetFeeWavierTypeList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getFeeWavierTypeSelect(feeWavierType, academicYearId) {
    let url_ = this.baseUrl + "/api/FeeWavierType/GetFeeWavierTypeSelect?";
    if (feeWavierType === null) throw new Error("The parameter 'feeWavierType' cannot be null.");else if (feeWavierType !== undefined) url_ += "FeeWavierType=" + encodeURIComponent("" + feeWavierType) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetFeeWavierTypeSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetFeeWavierTypeSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetFeeWavierTypeSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = FeeWavierTypeSelectDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  feeWavierTypeUpsert(feeWavierTypeObj) {
    let url_ = this.baseUrl + "/api/FeeWavierType/FeeWavierTypeUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(feeWavierTypeObj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processFeeWavierTypeUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processFeeWavierTypeUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processFeeWavierTypeUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CommonSuccessResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  feeWavierTypeDelete(feeWavierTypeId) {
    let url_ = this.baseUrl + "/api/FeeWavierType/FeeWavierTypeDelete?";
    if (feeWavierTypeId === null) throw new Error("The parameter 'feeWavierTypeId' cannot be null.");else if (feeWavierTypeId !== undefined) url_ += "feeWavierTypeId=" + encodeURIComponent("" + feeWavierTypeId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processFeeWavierTypeDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processFeeWavierTypeDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processFeeWavierTypeDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = FeeWavierTypeDeleteResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
FeeWavierTypeServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], FeeWavierTypeServiceProxy);

let FeePaymentServiceProxy = class FeePaymentServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getFeePaymentGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/FeePayment/GetFeePaymentGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetFeePaymentGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetFeePaymentGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetFeePaymentGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getFeePaymentDueListByAY(studentId, currentAcademicYearInclude) {
    let url_ = this.baseUrl + "/api/FeePayment/GetFeePaymentDueListByAY?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    if (currentAcademicYearInclude === null) throw new Error("The parameter 'currentAcademicYearInclude' cannot be null.");else if (currentAcademicYearInclude !== undefined) url_ += "currentAcademicYearInclude=" + encodeURIComponent("" + currentAcademicYearInclude) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetFeePaymentDueListByAY(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetFeePaymentDueListByAY(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetFeePaymentDueListByAY(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getFeePaymentSelect(academicYearId, studentId, gradeId, divisionId) {
    let url_ = this.baseUrl + "/api/FeePayment/GetFeePaymentSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetFeePaymentSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetFeePaymentSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetFeePaymentSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = FeePaymentSelectDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  feePaymentUpsert(encryptedString, feePaymentUpsertDto) {
    let url_ = this.baseUrl + "/api/FeePayment/FeePaymentUpsert?";
    if (encryptedString !== undefined && encryptedString !== null) url_ += "encryptedString=" + encodeURIComponent("" + encryptedString) + "&";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(feePaymentUpsertDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processFeePaymentUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processFeePaymentUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processFeePaymentUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  feePaymentPreviousAYPedingFeeUpdate(studentId, previousAcademicYearPendingFeeAmount) {
    let url_ = this.baseUrl + "/api/FeePayment/FeePaymentPreviousAYPedingFeeUpdate?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    if (previousAcademicYearPendingFeeAmount === null) throw new Error("The parameter 'previousAcademicYearPendingFeeAmount' cannot be null.");else if (previousAcademicYearPendingFeeAmount !== undefined) url_ += "previousAcademicYearPendingFeeAmount=" + encodeURIComponent("" + previousAcademicYearPendingFeeAmount) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processFeePaymentPreviousAYPedingFeeUpdate(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processFeePaymentPreviousAYPedingFeeUpdate(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processFeePaymentPreviousAYPedingFeeUpdate(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getPaymentFeePageMasterActivityList(gradeId, divisionId, academicYearId, studentId) {
    let url_ = this.baseUrl + "/api/FeePayment/GetPaymentFeePageMasterActivityList?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetPaymentFeePageMasterActivityList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetPaymentFeePageMasterActivityList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetPaymentFeePageMasterActivityList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PaymentFeePageMasterActivityList.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getFeePaymentHistoryGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/FeePayment/GetFeePaymentHistoryGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetFeePaymentHistoryGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetFeePaymentHistoryGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetFeePaymentHistoryGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getFeePaymentHistorySelect(academicYearId, studentId, gradeId, divisionId, feePaymentId) {
    let url_ = this.baseUrl + "/api/FeePayment/GetFeePaymentHistorySelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "divisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (feePaymentId === null) throw new Error("The parameter 'feePaymentId' cannot be null.");else if (feePaymentId !== undefined) url_ += "feePaymentId=" + encodeURIComponent("" + feePaymentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetFeePaymentHistorySelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetFeePaymentHistorySelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetFeePaymentHistorySelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = FeePaymentHistorySelectDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  feePaymentDelete(feePaymentId) {
    let url_ = this.baseUrl + "/api/FeePayment/FeePaymentDelete?";
    if (feePaymentId === null) throw new Error("The parameter 'feePaymentId' cannot be null.");else if (feePaymentId !== undefined) url_ += "feePaymentId=" + encodeURIComponent("" + feePaymentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processFeePaymentDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processFeePaymentDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processFeePaymentDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  clearCheque(feePaymentId) {
    let url_ = this.baseUrl + "/api/FeePayment/ClearCheque?";
    if (feePaymentId === null) throw new Error("The parameter 'feePaymentId' cannot be null.");else if (feePaymentId !== undefined) url_ += "feePaymentId=" + encodeURIComponent("" + feePaymentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processClearCheque(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processClearCheque(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processClearCheque(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getDayWisePaymentReport(request) {
    let url_ = this.baseUrl + "/api/FeePayment/GetDayWisePaymentReport";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(request);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetDayWisePaymentReport(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetDayWisePaymentReport(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetDayWisePaymentReport(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DaywisePaymentReportDTO.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
FeePaymentServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], FeePaymentServiceProxy);

let FeeParticularServiceProxy = class FeeParticularServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getFeeParticularGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/FeeParticular/GetFeeParticularGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetFeeParticularGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetFeeParticularGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetFeeParticularGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableRequestModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getFeeParticularSelect(classId, academicYearId) {
    let url_ = this.baseUrl + "/api/FeeParticular/GetFeeParticularSelect?";
    if (classId === null) throw new Error("The parameter 'classId' cannot be null.");else if (classId !== undefined) url_ += "ClassId=" + encodeURIComponent("" + classId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetFeeParticularSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetFeeParticularSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetFeeParticularSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = FeeStructureDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  feeParticularInsert(feeParticularInsertObj) {
    let url_ = this.baseUrl + "/api/FeeParticular/FeeParticularInsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(feeParticularInsertObj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processFeeParticularInsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processFeeParticularInsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processFeeParticularInsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  feeParticularUpdate(feeParticularUpdateObj) {
    let url_ = this.baseUrl + "/api/FeeParticular/FeeParticularUpdate";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(feeParticularUpdateObj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processFeeParticularUpdate(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processFeeParticularUpdate(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processFeeParticularUpdate(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAllApplicableWaiverData(academicYearId) {
    let url_ = this.baseUrl + "/api/FeeParticular/GetAllApplicableWaiverData?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAllApplicableWaiverData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAllApplicableWaiverData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAllApplicableWaiverData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = FeeWaiverResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getGradeDivisionFeeParticularMasterList(academicYearId) {
    let url_ = this.baseUrl + "/api/FeeParticular/GetGradeDivisionFeeParticularMasterList?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetGradeDivisionFeeParticularMasterList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetGradeDivisionFeeParticularMasterList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetGradeDivisionFeeParticularMasterList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GradeDivisionWithDisabledCommonMasterDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  publishUnpublishGradeDivisionParticulars(publishRequest) {
    let url_ = this.baseUrl + "/api/FeeParticular/PublishUnpublishGradeDivisionParticulars";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(publishRequest);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processPublishUnpublishGradeDivisionParticulars(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processPublishUnpublishGradeDivisionParticulars(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processPublishUnpublishGradeDivisionParticulars(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  feeParticularClone(cloneRequest) {
    let url_ = this.baseUrl + "/api/FeeParticular/FeeParticularClone";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(cloneRequest);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processFeeParticularClone(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processFeeParticularClone(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processFeeParticularClone(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  feeParticularDelete(gradeId, divisionId, academicYearId) {
    let url_ = this.baseUrl + "/api/FeeParticular/FeeParticularDelete?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "divisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processFeeParticularDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processFeeParticularDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processFeeParticularDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  copyFeeParticularsFromLastAY(gradeId, divisionId) {
    let url_ = this.baseUrl + "/api/FeeParticular/CopyFeeParticularsFromLastAY?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "divisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processCopyFeeParticularsFromLastAY(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processCopyFeeParticularsFromLastAY(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processCopyFeeParticularsFromLastAY(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentKitFeeParticularGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/FeeParticular/GetStudentKitFeeParticularGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitFeeParticularGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitFeeParticularGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitFeeParticularGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableRequestModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentKitFeeParticularByClassId(classId, academicYearId) {
    let url_ = this.baseUrl + "/api/FeeParticular/GetStudentKitFeeParticularByClassId?";
    if (classId === null) throw new Error("The parameter 'classId' cannot be null.");else if (classId !== undefined) url_ += "ClassId=" + encodeURIComponent("" + classId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitFeeParticularByClassId(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitFeeParticularByClassId(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitFeeParticularByClassId(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentKitFeeStructureDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentKitFeeParticularInsert(feeParticularInsertObj) {
    let url_ = this.baseUrl + "/api/FeeParticular/StudentKitFeeParticularInsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(feeParticularInsertObj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentKitFeeParticularInsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentKitFeeParticularInsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentKitFeeParticularInsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentKitFeeParticularUpdate(feeParticularUpdateObj) {
    let url_ = this.baseUrl + "/api/FeeParticular/StudentKitFeeParticularUpdate";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(feeParticularUpdateObj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentKitFeeParticularUpdate(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentKitFeeParticularUpdate(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentKitFeeParticularUpdate(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getGradeDivisionStudentKitFeeParticularMasterList(academicYearId) {
    let url_ = this.baseUrl + "/api/FeeParticular/GetGradeDivisionStudentKitFeeParticularMasterList?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetGradeDivisionStudentKitFeeParticularMasterList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetGradeDivisionStudentKitFeeParticularMasterList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetGradeDivisionStudentKitFeeParticularMasterList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GradeDivisionWithDisabledCommonMasterDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  publishUnpublishGradeDivisionStudentKitParticulars(publishRequest) {
    let url_ = this.baseUrl + "/api/FeeParticular/PublishUnpublishGradeDivisionStudentKitParticulars";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(publishRequest);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processPublishUnpublishGradeDivisionStudentKitParticulars(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processPublishUnpublishGradeDivisionStudentKitParticulars(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processPublishUnpublishGradeDivisionStudentKitParticulars(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentKitFeeParticularClone(cloneRequest) {
    let url_ = this.baseUrl + "/api/FeeParticular/StudentKitFeeParticularClone";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(cloneRequest);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentKitFeeParticularClone(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentKitFeeParticularClone(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentKitFeeParticularClone(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  studentKitFeeParticularDelete(gradeId, divisionId, academicYearId) {
    let url_ = this.baseUrl + "/api/FeeParticular/StudentKitFeeParticularDelete?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "divisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processStudentKitFeeParticularDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processStudentKitFeeParticularDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processStudentKitFeeParticularDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  copyStudentKitFeeParticularsFromLastAY(gradeId, divisionId) {
    let url_ = this.baseUrl + "/api/FeeParticular/CopyStudentKitFeeParticularsFromLastAY?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "divisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processCopyStudentKitFeeParticularsFromLastAY(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processCopyStudentKitFeeParticularsFromLastAY(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processCopyStudentKitFeeParticularsFromLastAY(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
FeeParticularServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], FeeParticularServiceProxy);

let PaymentAnalyticsExportServiceProxy = class PaymentAnalyticsExportServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getExportPaymentAnalyticsSchool(academicYearId) {
    let url_ = this.baseUrl + "/api/PaymentAnalyticsExport/GetExportPaymentAnalyticsSchool?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetExportPaymentAnalyticsSchool(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetExportPaymentAnalyticsSchool(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetExportPaymentAnalyticsSchool(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PaymentAnalyticsExportDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getExportPaymentAnalyticsGrade(academicYearId, gradeId) {
    let url_ = this.baseUrl + "/api/PaymentAnalyticsExport/GetExportPaymentAnalyticsGrade?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetExportPaymentAnalyticsGrade(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetExportPaymentAnalyticsGrade(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetExportPaymentAnalyticsGrade(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PaymentAnalyticsExportDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getExportPaymentAnalyticsDivision(academicYearId, gradeId, divisionId) {
    let url_ = this.baseUrl + "/api/PaymentAnalyticsExport/GetExportPaymentAnalyticsDivision?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetExportPaymentAnalyticsDivision(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetExportPaymentAnalyticsDivision(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetExportPaymentAnalyticsDivision(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PaymentAnalyticsExportDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
PaymentAnalyticsExportServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], PaymentAnalyticsExportServiceProxy);

let StudentExportServiceProxy = class StudentExportServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  exportStudentData(academicYearId) {
    let url_ = this.baseUrl + "/api/StudentExport/ExportStudentData?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processExportStudentData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processExportStudentData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processExportStudentData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ResponseExportStudentDataDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
StudentExportServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], StudentExportServiceProxy);

let StudentKitPaymentAnalyticsExportServiceProxy = class StudentKitPaymentAnalyticsExportServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getStudentKitPaymentAnalyticsExportSchool(academicYearId) {
    let url_ = this.baseUrl + "/api/StudentKitPaymentAnalyticsExport/GetStudentKitPaymentAnalyticsExportSchool?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitPaymentAnalyticsExportSchool(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitPaymentAnalyticsExportSchool(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitPaymentAnalyticsExportSchool(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentKitPaymentAnalyticsExportDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentKitExportPaymentAnalyticsGrade(academicYearId, gradeId) {
    let url_ = this.baseUrl + "/api/StudentKitPaymentAnalyticsExport/GetStudentKitExportPaymentAnalyticsGrade?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitExportPaymentAnalyticsGrade(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitExportPaymentAnalyticsGrade(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitExportPaymentAnalyticsGrade(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentKitPaymentAnalyticsExportDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentKitExportPaymentAnalyticsDivision(academicYearId, gradeId, divisionId) {
    let url_ = this.baseUrl + "/api/StudentKitPaymentAnalyticsExport/GetStudentKitExportPaymentAnalyticsDivision?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentKitExportPaymentAnalyticsDivision(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentKitExportPaymentAnalyticsDivision(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentKitExportPaymentAnalyticsDivision(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentKitPaymentAnalyticsExportDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
StudentKitPaymentAnalyticsExportServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], StudentKitPaymentAnalyticsExportServiceProxy);

let TeacherExportServiceProxy = class TeacherExportServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  exportTeacherData() {
    let url_ = this.baseUrl + "/api/TeacherExport/ExportTeacherData";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processExportTeacherData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processExportTeacherData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processExportTeacherData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ResponseExportTeacherDataDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
TeacherExportServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], TeacherExportServiceProxy);

let TransportPaymentAnalyticsExportServiceProxy = class TransportPaymentAnalyticsExportServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getTransportExportPaymentAnalyticsSchool(academicYearId) {
    let url_ = this.baseUrl + "/api/TransportPaymentAnalyticsExport/GetTransportExportPaymentAnalyticsSchool?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportExportPaymentAnalyticsSchool(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportExportPaymentAnalyticsSchool(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportExportPaymentAnalyticsSchool(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportPaymentAnalyticsExportDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportExportPaymentAnalyticsGrade(academicYearId, gradeId) {
    let url_ = this.baseUrl + "/api/TransportPaymentAnalyticsExport/GetTransportExportPaymentAnalyticsGrade?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportExportPaymentAnalyticsGrade(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportExportPaymentAnalyticsGrade(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportExportPaymentAnalyticsGrade(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportPaymentAnalyticsExportDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportExportPaymentAnalyticsDivision(academicYearId, gradeId, divisionId) {
    let url_ = this.baseUrl + "/api/TransportPaymentAnalyticsExport/GetTransportExportPaymentAnalyticsDivision?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportExportPaymentAnalyticsDivision(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportExportPaymentAnalyticsDivision(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportExportPaymentAnalyticsDivision(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportPaymentAnalyticsExportDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTransportExportPaymentAnalyticsStaffList(academicYearId) {
    let url_ = this.baseUrl + "/api/TransportPaymentAnalyticsExport/GetTransportExportPaymentAnalyticsStaffList?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTransportExportPaymentAnalyticsStaffList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTransportExportPaymentAnalyticsStaffList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTransportExportPaymentAnalyticsStaffList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TransportPaymentAnalyticsExportDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
TransportPaymentAnalyticsExportServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], TransportPaymentAnalyticsExportServiceProxy);

let DivisionServiceProxy = class DivisionServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getDivisionData(divisionId) {
    let url_ = this.baseUrl + "/api/Division/GetDivisionData?";
    if (divisionId !== undefined && divisionId !== null) url_ += "divisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetDivisionData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetDivisionData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetDivisionData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DivisionDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  divisionDataUpsert(divisionObj) {
    let url_ = this.baseUrl + "/api/Division/DivisionDataUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(divisionObj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processDivisionDataUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processDivisionDataUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processDivisionDataUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DivisionUpdateleteRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getDivisionList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Division/GetDivisionList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetDivisionList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetDivisionList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetDivisionList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  divisionDataDelete(gradeId, academicYearId) {
    let url_ = this.baseUrl + "/api/Division/DivisionDataDelete?";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processDivisionDataDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processDivisionDataDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processDivisionDataDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DivisionDeleteRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
DivisionServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], DivisionServiceProxy);

let DashBoardServiceProxy = class DashBoardServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getDashboardCount() {
    let url_ = this.baseUrl + "/api/DashBoard/GetDashboardCount";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetDashboardCount(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetDashboardCount(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetDashboardCount(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DashboardCountDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getDashboardStaffDetails() {
    let url_ = this.baseUrl + "/api/DashBoard/GetDashboardStaffDetails";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetDashboardStaffDetails(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetDashboardStaffDetails(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetDashboardStaffDetails(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DashBoardStaffDetailsDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getDashboardGirlsBoysCount() {
    let url_ = this.baseUrl + "/api/DashBoard/GetDashboardGirlsBoysCount";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetDashboardGirlsBoysCount(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetDashboardGirlsBoysCount(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetDashboardGirlsBoysCount(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GirlsBoysCountDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAdminDashboardCount(academicYearId) {
    let url_ = this.baseUrl + "/api/DashBoard/GetAdminDashboardCount?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAdminDashboardCount(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAdminDashboardCount(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAdminDashboardCount(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AdminDashboardCountDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getIdealTeacherList(academicYearId) {
    let url_ = this.baseUrl + "/api/DashBoard/GetIdealTeacherList?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetIdealTeacherList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetIdealTeacherList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetIdealTeacherList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = IdealTeacherListResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTeacherDashboardCount(academicYearId, teacherId) {
    let url_ = this.baseUrl + "/api/DashBoard/GetTeacherDashboardCount?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (teacherId === null) throw new Error("The parameter 'teacherId' cannot be null.");else if (teacherId !== undefined) url_ += "TeacherId=" + encodeURIComponent("" + teacherId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTeacherDashboardCount(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTeacherDashboardCount(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTeacherDashboardCount(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherDashboardCountDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
DashBoardServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], DashBoardServiceProxy);

let ClerkServiceProxy = class ClerkServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getClerkProfile(clerkId) {
    let url_ = this.baseUrl + "/api/Clerk/GetClerkProfile?";
    if (clerkId === null) throw new Error("The parameter 'clerkId' cannot be null.");else if (clerkId !== undefined) url_ += "ClerkId=" + encodeURIComponent("" + clerkId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetClerkProfile(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetClerkProfile(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetClerkProfile(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ClerkDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  clerkProfileUpsert() {
    let url_ = this.baseUrl + "/api/Clerk/ClerkProfileUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processClerkProfileUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processClerkProfileUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processClerkProfileUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getClerkList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Clerk/GetClerkList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetClerkList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetClerkList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetClerkList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  clerkProfileDelete(clerkId) {
    let url_ = this.baseUrl + "/api/Clerk/ClerkProfileDelete?";
    if (clerkId === null) throw new Error("The parameter 'clerkId' cannot be null.");else if (clerkId !== undefined) url_ += "clerkId=" + encodeURIComponent("" + clerkId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processClerkProfileDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processClerkProfileDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processClerkProfileDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ClerkDeleteRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
ClerkServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], ClerkServiceProxy);

let ClassWiseTeacherAndStudentServiceProxy = class ClassWiseTeacherAndStudentServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  classTeacherSelect(academicYearId) {
    let url_ = this.baseUrl + "/api/ClassWiseTeacherAndStudent/ClassTeacherSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processClassTeacherSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processClassTeacherSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processClassTeacherSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ClassTeacherResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  classWiseStudentSelect(academicYearId, classTeacherId) {
    let url_ = this.baseUrl + "/api/ClassWiseTeacherAndStudent/ClassWiseStudentSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (classTeacherId === null) throw new Error("The parameter 'classTeacherId' cannot be null.");else if (classTeacherId !== undefined) url_ += "ClassTeacherId=" + encodeURIComponent("" + classTeacherId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processClassWiseStudentSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processClassWiseStudentSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processClassWiseStudentSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ClassWiseStudentResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
ClassWiseTeacherAndStudentServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], ClassWiseTeacherAndStudentServiceProxy);

let ClassTimeTableServiceProxy = class ClassTimeTableServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getClassTimeTable(classId) {
    let url_ = this.baseUrl + "/api/ClassTimeTable/GetClassTimeTable?";
    if (classId === null) throw new Error("The parameter 'classId' cannot be null.");else if (classId !== undefined) url_ += "ClassId=" + encodeURIComponent("" + classId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetClassTimeTable(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetClassTimeTable(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetClassTimeTable(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ClassTimeTableSelectResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getClassTimeTableList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/ClassTimeTable/GetClassTimeTableList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetClassTimeTableList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetClassTimeTableList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetClassTimeTableList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  classTimeTableUpsert(classTimeTable) {
    let url_ = this.baseUrl + "/api/ClassTimeTable/ClassTimeTableUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(classTimeTable);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processClassTimeTableUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processClassTimeTableUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processClassTimeTableUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CreateTimeTableResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  classTimeTableDelete(classTimeTableId) {
    let url_ = this.baseUrl + "/api/ClassTimeTable/ClassTimeTableDelete?";
    if (classTimeTableId === null) throw new Error("The parameter 'classTimeTableId' cannot be null.");else if (classTimeTableId !== undefined) url_ += "ClassTimeTableId=" + encodeURIComponent("" + classTimeTableId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processClassTimeTableDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processClassTimeTableDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processClassTimeTableDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getTeacherClassTimeTable(requestDto) {
    let url_ = this.baseUrl + "/api/ClassTimeTable/GetTeacherClassTimeTable";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetTeacherClassTimeTable(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetTeacherClassTimeTable(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetTeacherClassTimeTable(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ClassTimeTableSelectResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentClassTimeTable(requestDto) {
    let url_ = this.baseUrl + "/api/ClassTimeTable/GetStudentClassTimeTable";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentClassTimeTable(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentClassTimeTable(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentClassTimeTable(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ClassTimeTableSelectResponseDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  markTimeTableActiveUpsert(requestModel) {
    let url_ = this.baseUrl + "/api/ClassTimeTable/MarkTimeTableActiveUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestModel);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processMarkTimeTableActiveUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processMarkTimeTableActiveUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processMarkTimeTableActiveUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  validateTimeTable(academicYearId, lstClassTimeTableId) {
    let url_ = this.baseUrl + "/api/ClassTimeTable/ValidateTimeTable?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(lstClassTimeTableId);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processValidateTimeTable(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processValidateTimeTable(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processValidateTimeTable(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CreateTimeTableResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
ClassTimeTableServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], ClassTimeTableServiceProxy);

let ClassTeacherDataServiceProxy = class ClassTeacherDataServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getClassTeacherData(academicYearId, userId) {
    let url_ = this.baseUrl + "/api/ClassTeacherData/GetClassTeacherData?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (userId === null) throw new Error("The parameter 'userId' cannot be null.");else if (userId !== undefined) url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetClassTeacherData(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetClassTeacherData(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetClassTeacherData(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ClassTeacherDataDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
ClassTeacherDataServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], ClassTeacherDataServiceProxy);

let CertificateServiceProxy = class CertificateServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  bonafiedCertificateSelect(academicYearId, gradeId, divisionId, studentId) {
    let url_ = this.baseUrl + "/api/Certificate/BonafiedCertificateSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processBonafiedCertificateSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processBonafiedCertificateSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processBonafiedCertificateSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CertificateDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  idCardSelect(academicYearId, gradeId, divisionId, studentId) {
    let url_ = this.baseUrl + "/api/Certificate/IdCardSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processIdCardSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processIdCardSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processIdCardSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CertificateDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  characterCertificateSelect(academicYearId, gradeId, divisionId, studentId) {
    let url_ = this.baseUrl + "/api/Certificate/CharacterCertificateSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processCharacterCertificateSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processCharacterCertificateSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processCharacterCertificateSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CertificateDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getCertificateList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Certificate/GetCertificateList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetCertificateList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetCertificateList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetCertificateList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  certificateUpsert() {
    let url_ = this.baseUrl + "/api/Certificate/CertificateUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processCertificateUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processCertificateUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processCertificateUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getCertificate(certificateAuditsId, academicYearId) {
    let url_ = this.baseUrl + "/api/Certificate/GetCertificate?";
    if (certificateAuditsId === null) throw new Error("The parameter 'certificateAuditsId' cannot be null.");else if (certificateAuditsId !== undefined) url_ += "CertificateAuditsId=" + encodeURIComponent("" + certificateAuditsId) + "&";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetCertificate(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetCertificate(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetCertificate(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CertificateAuditDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentNames(academicYearId, gradeId, divisionId) {
    let url_ = this.baseUrl + "/api/Certificate/GetStudentNames?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentNames(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentNames(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentNames(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentNameModelResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentNamesWithArchive(academicYearId, gradeId, divisionId) {
    let url_ = this.baseUrl + "/api/Certificate/GetStudentNamesWithArchive?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentNamesWithArchive(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentNamesWithArchive(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentNamesWithArchive(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentNameModelResponse.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getLeavingCertificateHistory(studentId) {
    let url_ = this.baseUrl + "/api/Certificate/GetLeavingCertificateHistory?";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetLeavingCertificateHistory(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetLeavingCertificateHistory(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetLeavingCertificateHistory(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = LeavingCertificateHistory.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  leavingCertificatePrintSelect(leavingCertificateAuditsId, studentId, makeAsDuplicate) {
    let url_ = this.baseUrl + "/api/Certificate/LeavingCertificatePrintSelect?";
    if (leavingCertificateAuditsId === null) throw new Error("The parameter 'leavingCertificateAuditsId' cannot be null.");else if (leavingCertificateAuditsId !== undefined) url_ += "LeavingCertificateAuditsId=" + encodeURIComponent("" + leavingCertificateAuditsId) + "&";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    if (makeAsDuplicate === null) throw new Error("The parameter 'makeAsDuplicate' cannot be null.");else if (makeAsDuplicate !== undefined) url_ += "makeAsDuplicate=" + encodeURIComponent("" + makeAsDuplicate) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processLeavingCertificatePrintSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processLeavingCertificatePrintSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processLeavingCertificatePrintSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CertificateDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  leavingCertificateStatusUpdate(leavingCertificateAuditsId, studentId, statusId) {
    let url_ = this.baseUrl + "/api/Certificate/LeavingCertificateStatusUpdate?";
    if (leavingCertificateAuditsId === null) throw new Error("The parameter 'leavingCertificateAuditsId' cannot be null.");else if (leavingCertificateAuditsId !== undefined) url_ += "LeavingCertificateAuditsId=" + encodeURIComponent("" + leavingCertificateAuditsId) + "&";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    if (statusId === null) throw new Error("The parameter 'statusId' cannot be null.");else if (statusId !== undefined) url_ += "StatusId=" + encodeURIComponent("" + statusId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processLeavingCertificateStatusUpdate(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processLeavingCertificateStatusUpdate(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processLeavingCertificateStatusUpdate(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  leavingCertificateGenerateAsDuplicate(leavingCertificateAuditsId) {
    let url_ = this.baseUrl + "/api/Certificate/LeavingCertificateGenerateAsDuplicate?";
    if (leavingCertificateAuditsId === null) throw new Error("The parameter 'leavingCertificateAuditsId' cannot be null.");else if (leavingCertificateAuditsId !== undefined) url_ += "LeavingCertificateAuditsId=" + encodeURIComponent("" + leavingCertificateAuditsId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processLeavingCertificateGenerateAsDuplicate(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processLeavingCertificateGenerateAsDuplicate(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processLeavingCertificateGenerateAsDuplicate(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  leavingCertificateUpsert(model) {
    let url_ = this.baseUrl + "/api/Certificate/LeavingCertificateUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(model);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processLeavingCertificateUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processLeavingCertificateUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processLeavingCertificateUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  leavingCertificateSelect(academicYearId, gradeId, divisionId, studentId) {
    let url_ = this.baseUrl + "/api/Certificate/LeavingCertificateSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "AcademicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "StudentId=" + encodeURIComponent("" + studentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processLeavingCertificateSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processLeavingCertificateSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processLeavingCertificateSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CertificateDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getListLeavingCertificateSelect(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Certificate/GetListLeavingCertificateSelect";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetListLeavingCertificateSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetListLeavingCertificateSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetListLeavingCertificateSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
CertificateServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], CertificateServiceProxy);

let CabDriverServiceProxy = class CabDriverServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getCabDriverProfile(cabDriverId) {
    let url_ = this.baseUrl + "/api/CabDriver/GetCabDriverProfile?";
    if (cabDriverId === null) throw new Error("The parameter 'cabDriverId' cannot be null.");else if (cabDriverId !== undefined) url_ += "CabDriverId=" + encodeURIComponent("" + cabDriverId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetCabDriverProfile(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetCabDriverProfile(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetCabDriverProfile(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CabDriverDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  cabDriverProfileUpsert() {
    let url_ = this.baseUrl + "/api/CabDriver/CabDriverProfileUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processCabDriverProfileUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processCabDriverProfileUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processCabDriverProfileUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getCabDriverList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/CabDriver/GetCabDriverList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetCabDriverList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetCabDriverList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetCabDriverList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  cabDriverDelete(cabDriverId) {
    let url_ = this.baseUrl + "/api/CabDriver/CabDriverDelete?";
    if (cabDriverId === null) throw new Error("The parameter 'cabDriverId' cannot be null.");else if (cabDriverId !== undefined) url_ += "cabDriverId=" + encodeURIComponent("" + cabDriverId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processCabDriverDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processCabDriverDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processCabDriverDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CabDriverDeleteRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
CabDriverServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], CabDriverServiceProxy);

let CabDriverAppServiceProxy = class CabDriverAppServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  cabDrverProfileUpdate() {
    let url_ = this.baseUrl + "/api/CabDriverApp/CabDrverProfileUpdate";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processCabDrverProfileUpdate(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processCabDrverProfileUpdate(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processCabDrverProfileUpdate(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getCabDriverProfile(cabDriverId) {
    let url_ = this.baseUrl + "/api/CabDriverApp/GetCabDriverProfile?";
    if (cabDriverId === null) throw new Error("The parameter 'cabDriverId' cannot be null.");else if (cabDriverId !== undefined) url_ += "CabDriverId=" + encodeURIComponent("" + cabDriverId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetCabDriverProfile(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetCabDriverProfile(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetCabDriverProfile(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CabDriverProfileAppDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getCabDriverAppRouteSelect(cabDriverId) {
    let url_ = this.baseUrl + "/api/CabDriverApp/GetCabDriverAppRouteSelect?";
    if (cabDriverId === null) throw new Error("The parameter 'cabDriverId' cannot be null.");else if (cabDriverId !== undefined) url_ += "CabDriverId=" + encodeURIComponent("" + cabDriverId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetCabDriverAppRouteSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetCabDriverAppRouteSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetCabDriverAppRouteSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CabDriverRouteListDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getCabDriverAppStoppageStudentSelect(routeId, tripType) {
    let url_ = this.baseUrl + "/api/CabDriverApp/GetCabDriverAppStoppageStudentSelect?";
    if (routeId !== undefined && routeId !== null) url_ += "RouteId=" + encodeURIComponent("" + routeId) + "&";
    if (tripType !== undefined && tripType !== null) url_ += "TripType=" + encodeURIComponent("" + tripType) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetCabDriverAppStoppageStudentSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetCabDriverAppStoppageStudentSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetCabDriverAppStoppageStudentSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CabdriverAppStoppageStudentDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  cabDriverTripUpsert(trip) {
    let url_ = this.baseUrl + "/api/CabDriverApp/CabDriverTripUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(trip);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processCabDriverTripUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processCabDriverTripUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processCabDriverTripUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  cabDriverTripDetailUpsert(tripDetail) {
    let url_ = this.baseUrl + "/api/CabDriverApp/CabDriverTripDetailUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(tripDetail);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processCabDriverTripDetailUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processCabDriverTripDetailUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processCabDriverTripDetailUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentSelect(qRCode) {
    let url_ = this.baseUrl + "/api/CabDriverApp/GetStudentSelect?";
    if (qRCode !== undefined && qRCode !== null) url_ += "QRCode=" + encodeURIComponent("" + qRCode) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = StudentInformationDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  updateCabDriverLocationByTrip(currentLocation) {
    let url_ = this.baseUrl + "/api/CabDriverApp/UpdateCabDriverLocationByTrip";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(currentLocation);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processUpdateCabDriverLocationByTrip(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processUpdateCabDriverLocationByTrip(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processUpdateCabDriverLocationByTrip(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getStudentList(tripId) {
    let url_ = this.baseUrl + "/api/CabDriverApp/GetStudentList?";
    if (tripId === null) throw new Error("The parameter 'tripId' cannot be null.");else if (tripId !== undefined) url_ += "TripId=" + encodeURIComponent("" + tripId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetStudentList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetStudentList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetStudentList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CabDriverTripNotificationResponceDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getActivetripSelect(requestDto) {
    let url_ = this.baseUrl + "/api/CabDriverApp/GetActivetripSelect";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetActivetripSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetActivetripSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetActivetripSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CabDriverActiveTripDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getCurrentActiveTripId(cabDriverUserId) {
    let url_ = this.baseUrl + "/api/CabDriverApp/GetCurrentActiveTripId?";
    if (cabDriverUserId === null) throw new Error("The parameter 'cabDriverUserId' cannot be null.");else if (cabDriverUserId !== undefined) url_ += "CabDriverUserId=" + encodeURIComponent("" + cabDriverUserId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetCurrentActiveTripId(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetCurrentActiveTripId(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetCurrentActiveTripId(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CabDriverActiveTripDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
CabDriverAppServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], CabDriverAppServiceProxy);

let AdminServiceProxy = class AdminServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getAdminProfile(adminId) {
    let url_ = this.baseUrl + "/api/Admin/GetAdminProfile?";
    if (adminId === null) throw new Error("The parameter 'adminId' cannot be null.");else if (adminId !== undefined) url_ += "AdminId=" + encodeURIComponent("" + adminId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAdminProfile(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAdminProfile(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAdminProfile(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AdminDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  adminProfileUpsert() {
    let url_ = this.baseUrl + "/api/Admin/AdminProfileUpsert";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processAdminProfileUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processAdminProfileUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processAdminProfileUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAdminList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/Admin/GetAdminList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAdminList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAdminList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAdminList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  adminProfileDelete(adminId) {
    let url_ = this.baseUrl + "/api/Admin/AdminProfileDelete?";
    if (adminId === null) throw new Error("The parameter 'adminId' cannot be null.");else if (adminId !== undefined) url_ += "adminId=" + encodeURIComponent("" + adminId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("delete", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processAdminProfileDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processAdminProfileDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processAdminProfileDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AdminDeleteRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
AdminServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], AdminServiceProxy);

let AdhocParticularMasterServiceProxy = class AdhocParticularMasterServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  adhocParticularMasterInsert(obj) {
    let url_ = this.baseUrl + "/api/AdhocParticularMaster/AdhocParticularMasterInsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(obj);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processAdhocParticularMasterInsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processAdhocParticularMasterInsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processAdhocParticularMasterInsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AdhocParticularMasterDtoInsertRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAdhocParticularList(academicYearId) {
    let url_ = this.baseUrl + "/api/AdhocParticularMaster/GetAdhocParticularList?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAdhocParticularList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAdhocParticularList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAdhocParticularList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AdhocParticularMasterDtoListRespose.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
AdhocParticularMasterServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], AdhocParticularMasterServiceProxy);

let AdhocFeePaymentServiceProxy = class AdhocFeePaymentServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  getAdhocFeePaymentGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/AdhocFeePayment/GetAdhocFeePaymentGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAdhocFeePaymentGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAdhocFeePaymentGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAdhocFeePaymentGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAdhocFeePaymentSelect(academicYearId, studentId, gradeId, divisionId) {
    let url_ = this.baseUrl + "/api/AdhocFeePayment/GetAdhocFeePaymentSelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "GradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "DivisionId=" + encodeURIComponent("" + divisionId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAdhocFeePaymentSelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAdhocFeePaymentSelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAdhocFeePaymentSelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AdhocFeePaymentSelectDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  adhocFeePaymentUpsert(encryptedString, feePaymentUpsertDto) {
    let url_ = this.baseUrl + "/api/AdhocFeePayment/AdhocFeePaymentUpsert?";
    if (encryptedString !== undefined && encryptedString !== null) url_ += "encryptedString=" + encodeURIComponent("" + encryptedString) + "&";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(feePaymentUpsertDto);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processAdhocFeePaymentUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processAdhocFeePaymentUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processAdhocFeePaymentUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAdhocFeePaymentHistoryGridList(requestObjectWrapper) {
    let url_ = this.baseUrl + "/api/AdhocFeePayment/GetAdhocFeePaymentHistoryGridList";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(requestObjectWrapper);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAdhocFeePaymentHistoryGridList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAdhocFeePaymentHistoryGridList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAdhocFeePaymentHistoryGridList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DatatableResponseModel.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getAdhocFeePaymentHistorySelect(academicYearId, studentId, gradeId, divisionId, feePaymentId) {
    let url_ = this.baseUrl + "/api/AdhocFeePayment/GetAdhocFeePaymentHistorySelect?";
    if (academicYearId === null) throw new Error("The parameter 'academicYearId' cannot be null.");else if (academicYearId !== undefined) url_ += "academicYearId=" + encodeURIComponent("" + academicYearId) + "&";
    if (studentId === null) throw new Error("The parameter 'studentId' cannot be null.");else if (studentId !== undefined) url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
    if (gradeId === null) throw new Error("The parameter 'gradeId' cannot be null.");else if (gradeId !== undefined) url_ += "gradeId=" + encodeURIComponent("" + gradeId) + "&";
    if (divisionId === null) throw new Error("The parameter 'divisionId' cannot be null.");else if (divisionId !== undefined) url_ += "divisionId=" + encodeURIComponent("" + divisionId) + "&";
    if (feePaymentId === null) throw new Error("The parameter 'feePaymentId' cannot be null.");else if (feePaymentId !== undefined) url_ += "feePaymentId=" + encodeURIComponent("" + feePaymentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetAdhocFeePaymentHistorySelect(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetAdhocFeePaymentHistorySelect(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetAdhocFeePaymentHistorySelect(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AdhocFeePaymentHistorySelectDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  adhocFeePaymentDelete(feePaymentId) {
    let url_ = this.baseUrl + "/api/AdhocFeePayment/AdhocFeePaymentDelete?";
    if (feePaymentId === null) throw new Error("The parameter 'feePaymentId' cannot be null.");else if (feePaymentId !== undefined) url_ += "feePaymentId=" + encodeURIComponent("" + feePaymentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processAdhocFeePaymentDelete(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processAdhocFeePaymentDelete(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processAdhocFeePaymentDelete(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  adhocClearCheque(feePaymentId) {
    let url_ = this.baseUrl + "/api/AdhocFeePayment/AdhocClearCheque?";
    if (feePaymentId === null) throw new Error("The parameter 'feePaymentId' cannot be null.");else if (feePaymentId !== undefined) url_ += "feePaymentId=" + encodeURIComponent("" + feePaymentId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processAdhocClearCheque(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processAdhocClearCheque(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processAdhocClearCheque(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getDayWiseAdhocPaymentReport(request) {
    let url_ = this.baseUrl + "/api/AdhocFeePayment/GetDayWiseAdhocPaymentReport";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(request);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetDayWiseAdhocPaymentReport(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetDayWiseAdhocPaymentReport(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetDayWiseAdhocPaymentReport(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AdhocFeePaymentDaywiseReportDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
AdhocFeePaymentServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], AdhocFeePaymentServiceProxy);

let AccessServiceProxy = class AccessServiceProxy {
  constructor(http, baseUrl) {
    this.jsonParseReviver = undefined;
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7068";
  }
  rolePermissionUpsert(rolePermissionModel) {
    let url_ = this.baseUrl + "/api/Access/RolePermissionUpsert";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(rolePermissionModel);
    let options_ = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };
    return this.http.request("post", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processRolePermissionUpsert(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processRolePermissionUpsert(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processRolePermissionUpsert(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : null;
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getModulesPermissions(roleId) {
    let url_ = this.baseUrl + "/api/Access/GetModulesPermissions?";
    if (roleId === null) throw new Error("The parameter 'roleId' cannot be null.");else if (roleId !== undefined) url_ += "RoleId=" + encodeURIComponent("" + roleId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetModulesPermissions(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetModulesPermissions(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetModulesPermissions(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RoleModuleDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getRoleList() {
    let url_ = this.baseUrl + "/api/Access/GetRoleList";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetRoleList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetRoleList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetRoleList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RoleMasterDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getPermissionsList() {
    let url_ = this.baseUrl + "/api/Access/GetPermissionsList";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetPermissionsList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetPermissionsList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetPermissionsList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PermissionMasterDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  getModuleList() {
    let url_ = this.baseUrl + "/api/Access/GetModuleList";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      observe: "response",
      responseType: "blob",
      headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpHeaders({
        "Accept": "application/json"
      })
    };
    return this.http.request("get", url_, options_).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(response_ => {
      return this.processGetModuleList(response_);
    })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(response_ => {
      if (response_ instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponseBase) {
        try {
          return this.processGetModuleList(response_);
        } catch (e) {
          return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(e);
        }
      } else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(response_);
    }));
  }
  processGetModuleList(response) {
    const status = response.status;
    const responseBlob = response instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;
    let _headers = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ModuleMasterDto.fromJS(resultData200);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.mergeMap)(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.of)(null);
  }
  static #_ = this.ctorParameters = () => [{
    type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient]
    }]
  }, {
    type: String,
    decorators: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
      args: [API_BASE_URL]
    }]
  }];
};
AccessServiceProxy = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)()], AccessServiceProxy);

class WeeklyDayOffDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.weeklyOffId = _data["weeklyOffId"];
      if (Array.isArray(_data["multipleDayList"])) {
        this.multipleDayList = [];
        for (let item of _data["multipleDayList"]) this.multipleDayList.push(WeeklyDayOffListDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new WeeklyDayOffDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["weeklyOffId"] = this.weeklyOffId;
    if (Array.isArray(this.multipleDayList)) {
      data["multipleDayList"] = [];
      for (let item of this.multipleDayList) data["multipleDayList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new WeeklyDayOffDto();
    result.init(json);
    return result;
  }
}
class WeeklyDayOffListDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.dayNo = _data["dayNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new WeeklyDayOffListDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["dayNo"] = this.dayNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new WeeklyDayOffListDto();
    result.init(json);
    return result;
  }
}
class UserLoginResponse {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.schoolName = _data["schoolName"];
      this.langaugeCode = _data["langaugeCode"];
      this.token = _data["token"];
      this.isFirstTimeLogin = _data["isFirstTimeLogin"];
      if (Array.isArray(_data["roles"])) {
        this.roles = [];
        for (let item of _data["roles"]) this.roles.push(UserRolesDto.fromJS(item));
      }
      this.resetPasswordObj = _data["resetPasswordObj"] ? ResetPasswordRequestDto.fromJS(_data["resetPasswordObj"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new UserLoginResponse();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["schoolName"] = this.schoolName;
    data["langaugeCode"] = this.langaugeCode;
    data["token"] = this.token;
    data["isFirstTimeLogin"] = this.isFirstTimeLogin;
    if (Array.isArray(this.roles)) {
      data["roles"] = [];
      for (let item of this.roles) data["roles"].push(item.toJSON());
    }
    data["resetPasswordObj"] = this.resetPasswordObj ? this.resetPasswordObj.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new UserLoginResponse();
    result.init(json);
    return result;
  }
}
class UserRolesDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.roleId = _data["roleId"];
      this.roleName = _data["roleName"];
      this.roleKey = _data["roleKey"];
      this.refId = _data["refId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new UserRolesDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["roleId"] = this.roleId;
    data["roleName"] = this.roleName;
    data["roleKey"] = this.roleKey;
    data["refId"] = this.refId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new UserRolesDto();
    result.init(json);
    return result;
  }
}
class ResetPasswordRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.userId = _data["userId"];
      this.password = _data["password"];
      this.confirmPassword = _data["confirmPassword"];
      this.token = _data["token"];
      this.schoolCode = _data["schoolCode"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ResetPasswordRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["userId"] = this.userId;
    data["password"] = this.password;
    data["confirmPassword"] = this.confirmPassword;
    data["token"] = this.token;
    data["schoolCode"] = this.schoolCode;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ResetPasswordRequestDto();
    result.init(json);
    return result;
  }
}
class LoginDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.code = _data["code"];
      this.username = _data["username"];
      this.password = _data["password"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new LoginDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["code"] = this.code;
    data["username"] = this.username;
    data["password"] = this.password;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new LoginDto();
    result.init(json);
    return result;
  }
}
class UserRoleModulePermissionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.logoUrl = _data["logoUrl"];
      this.userId = _data["userId"];
      this.uname = _data["uname"];
      this.academicYearId = _data["academicYearId"];
      this.schoolCode = _data["schoolCode"];
      this.schoolName = _data["schoolName"];
      this.schoolId = _data["schoolId"];
      this.refId = _data["refId"];
      this.userIdByRole = _data["userIdByRole"];
      this.userFullNameByRole = _data["userFullNameByRole"];
      this.profileImageURL = _data["profileImageURL"];
      if (Array.isArray(_data["roleDetails"])) {
        this.roleDetails = [];
        for (let item of _data["roleDetails"]) this.roleDetails.push(UserRoleDetailDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new UserRoleModulePermissionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["logoUrl"] = this.logoUrl;
    data["userId"] = this.userId;
    data["uname"] = this.uname;
    data["academicYearId"] = this.academicYearId;
    data["schoolCode"] = this.schoolCode;
    data["schoolName"] = this.schoolName;
    data["schoolId"] = this.schoolId;
    data["refId"] = this.refId;
    data["userIdByRole"] = this.userIdByRole;
    data["userFullNameByRole"] = this.userFullNameByRole;
    data["profileImageURL"] = this.profileImageURL;
    if (Array.isArray(this.roleDetails)) {
      data["roleDetails"] = [];
      for (let item of this.roleDetails) data["roleDetails"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new UserRoleModulePermissionDto();
    result.init(json);
    return result;
  }
}
class UserRoleDetailDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.refId = _data["refId"];
      this.roleId = _data["roleId"];
      this.roleName = _data["roleName"];
      this.roleKey = _data["roleKey"];
      if (Array.isArray(_data["allowedModules"])) {
        this.allowedModules = [];
        for (let item of _data["allowedModules"]) this.allowedModules.push(Module.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new UserRoleDetailDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["refId"] = this.refId;
    data["roleId"] = this.roleId;
    data["roleName"] = this.roleName;
    data["roleKey"] = this.roleKey;
    if (Array.isArray(this.allowedModules)) {
      data["allowedModules"] = [];
      for (let item of this.allowedModules) data["allowedModules"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new UserRoleDetailDto();
    result.init(json);
    return result;
  }
}
class Module {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.moduleId = _data["moduleId"];
      this.moduleName = _data["moduleName"];
      this.moduleKey = _data["moduleKey"];
      this.menuTypeId = _data["menuTypeId"];
      this.menuUrl = _data["menuUrl"];
      this.menuIcon = _data["menuIcon"];
      this.menuSort = _data["menuSort"];
      if (Array.isArray(_data["allowedPermissions"])) {
        this.allowedPermissions = [];
        for (let item of _data["allowedPermissions"]) this.allowedPermissions.push(Permission.fromJS(item));
      }
      if (Array.isArray(_data["childModules"])) {
        this.childModules = [];
        for (let item of _data["childModules"]) this.childModules.push(Module.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Module();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["moduleId"] = this.moduleId;
    data["moduleName"] = this.moduleName;
    data["moduleKey"] = this.moduleKey;
    data["menuTypeId"] = this.menuTypeId;
    data["menuUrl"] = this.menuUrl;
    data["menuIcon"] = this.menuIcon;
    data["menuSort"] = this.menuSort;
    if (Array.isArray(this.allowedPermissions)) {
      data["allowedPermissions"] = [];
      for (let item of this.allowedPermissions) data["allowedPermissions"].push(item.toJSON());
    }
    if (Array.isArray(this.childModules)) {
      data["childModules"] = [];
      for (let item of this.childModules) data["childModules"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new Module();
    result.init(json);
    return result;
  }
}
class Permission {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.permissionId = _data["permissionId"];
      this.permissionName = _data["permissionName"];
      this.permissionKey = _data["permissionKey"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Permission();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["permissionId"] = this.permissionId;
    data["permissionName"] = this.permissionName;
    data["permissionKey"] = this.permissionKey;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new Permission();
    result.init(json);
    return result;
  }
}
class ForgotPasswordRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolCode = _data["schoolCode"];
      this.username = _data["username"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ForgotPasswordRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolCode"] = this.schoolCode;
    data["username"] = this.username;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ForgotPasswordRequestDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentAnalyticsDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.transportPaymentAnalyticsSchool = _data["transportPaymentAnalyticsSchool"] ? TransportPaymentAnalyticsSchoolDto.fromJS(_data["transportPaymentAnalyticsSchool"]) : undefined;
      if (Array.isArray(_data["transportPaymentAnalyticsGrade"])) {
        this.transportPaymentAnalyticsGrade = [];
        for (let item of _data["transportPaymentAnalyticsGrade"]) this.transportPaymentAnalyticsGrade.push(TransportPaymentAnalyticsGradeDto.fromJS(item));
      }
      if (Array.isArray(_data["transportPaymentAnalyticsDivision"])) {
        this.transportPaymentAnalyticsDivision = [];
        for (let item of _data["transportPaymentAnalyticsDivision"]) this.transportPaymentAnalyticsDivision.push(TransportPaymentAnalyticsDivisionDto.fromJS(item));
      }
      if (Array.isArray(_data["transportPaymentAnalyticsStudent"])) {
        this.transportPaymentAnalyticsStudent = [];
        for (let item of _data["transportPaymentAnalyticsStudent"]) this.transportPaymentAnalyticsStudent.push(TransportPaymentAnalyticsStudentDto.fromJS(item));
      }
      if (Array.isArray(_data["transportPaymentAnalyticsStaffList"])) {
        this.transportPaymentAnalyticsStaffList = [];
        for (let item of _data["transportPaymentAnalyticsStaffList"]) this.transportPaymentAnalyticsStaffList.push(TransportPaymentAnalyticsStaffListDto.fromJS(item));
      }
      this.transportPaymentAnalyticsStaff = _data["transportPaymentAnalyticsStaff"] ? TransportPaymentAnalyticsStaffDto.fromJS(_data["transportPaymentAnalyticsStaff"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentAnalyticsDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["transportPaymentAnalyticsSchool"] = this.transportPaymentAnalyticsSchool ? this.transportPaymentAnalyticsSchool.toJSON() : undefined;
    if (Array.isArray(this.transportPaymentAnalyticsGrade)) {
      data["transportPaymentAnalyticsGrade"] = [];
      for (let item of this.transportPaymentAnalyticsGrade) data["transportPaymentAnalyticsGrade"].push(item.toJSON());
    }
    if (Array.isArray(this.transportPaymentAnalyticsDivision)) {
      data["transportPaymentAnalyticsDivision"] = [];
      for (let item of this.transportPaymentAnalyticsDivision) data["transportPaymentAnalyticsDivision"].push(item.toJSON());
    }
    if (Array.isArray(this.transportPaymentAnalyticsStudent)) {
      data["transportPaymentAnalyticsStudent"] = [];
      for (let item of this.transportPaymentAnalyticsStudent) data["transportPaymentAnalyticsStudent"].push(item.toJSON());
    }
    if (Array.isArray(this.transportPaymentAnalyticsStaffList)) {
      data["transportPaymentAnalyticsStaffList"] = [];
      for (let item of this.transportPaymentAnalyticsStaffList) data["transportPaymentAnalyticsStaffList"].push(item.toJSON());
    }
    data["transportPaymentAnalyticsStaff"] = this.transportPaymentAnalyticsStaff ? this.transportPaymentAnalyticsStaff.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentAnalyticsDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentAnalyticsSchoolDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.schoolName = _data["schoolName"];
      this.transportTotalFee = _data["transportTotalFee"];
      this.transportDiscountedFee = _data["transportDiscountedFee"];
      this.transportEffectiveFee = _data["transportEffectiveFee"];
      this.transportCollectionTillDate = _data["transportCollectionTillDate"];
      this.transportReceivableFee = _data["transportReceivableFee"];
      this.transportCollectionInPercentage = _data["transportCollectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentAnalyticsSchoolDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["schoolName"] = this.schoolName;
    data["transportTotalFee"] = this.transportTotalFee;
    data["transportDiscountedFee"] = this.transportDiscountedFee;
    data["transportEffectiveFee"] = this.transportEffectiveFee;
    data["transportCollectionTillDate"] = this.transportCollectionTillDate;
    data["transportReceivableFee"] = this.transportReceivableFee;
    data["transportCollectionInPercentage"] = this.transportCollectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentAnalyticsSchoolDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentAnalyticsGradeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.academicYearId = _data["academicYearId"];
      this.gradeName = _data["gradeName"];
      this.transportTotalFee = _data["transportTotalFee"];
      this.transportDiscountedFee = _data["transportDiscountedFee"];
      this.transportEffectiveFee = _data["transportEffectiveFee"];
      this.transportCollectionTillDate = _data["transportCollectionTillDate"];
      this.transportReceivableFee = _data["transportReceivableFee"];
      this.transportCollectionInPercentage = _data["transportCollectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentAnalyticsGradeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["academicYearId"] = this.academicYearId;
    data["gradeName"] = this.gradeName;
    data["transportTotalFee"] = this.transportTotalFee;
    data["transportDiscountedFee"] = this.transportDiscountedFee;
    data["transportEffectiveFee"] = this.transportEffectiveFee;
    data["transportCollectionTillDate"] = this.transportCollectionTillDate;
    data["transportReceivableFee"] = this.transportReceivableFee;
    data["transportCollectionInPercentage"] = this.transportCollectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentAnalyticsGradeDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentAnalyticsDivisionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.academicYearId = _data["academicYearId"];
      this.divisionName = _data["divisionName"];
      this.transportTotalFee = _data["transportTotalFee"];
      this.transportDiscountedFee = _data["transportDiscountedFee"];
      this.transportEffectiveFee = _data["transportEffectiveFee"];
      this.transportCollectionTillDate = _data["transportCollectionTillDate"];
      this.transportReceivableFee = _data["transportReceivableFee"];
      this.transportCollectionInPercentage = _data["transportCollectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentAnalyticsDivisionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["academicYearId"] = this.academicYearId;
    data["divisionName"] = this.divisionName;
    data["transportTotalFee"] = this.transportTotalFee;
    data["transportDiscountedFee"] = this.transportDiscountedFee;
    data["transportEffectiveFee"] = this.transportEffectiveFee;
    data["transportCollectionTillDate"] = this.transportCollectionTillDate;
    data["transportReceivableFee"] = this.transportReceivableFee;
    data["transportCollectionInPercentage"] = this.transportCollectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentAnalyticsDivisionDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentAnalyticsStudentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.studentName = _data["studentName"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.academicYearId = _data["academicYearId"];
      this.transportTotalFee = _data["transportTotalFee"];
      this.transportDiscountedFee = _data["transportDiscountedFee"];
      this.transportEffectiveFee = _data["transportEffectiveFee"];
      this.transportCollectionTillDate = _data["transportCollectionTillDate"];
      this.transportReceivableFee = _data["transportReceivableFee"];
      this.transportCollectionInPercentage = _data["transportCollectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentAnalyticsStudentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["studentName"] = this.studentName;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["academicYearId"] = this.academicYearId;
    data["transportTotalFee"] = this.transportTotalFee;
    data["transportDiscountedFee"] = this.transportDiscountedFee;
    data["transportEffectiveFee"] = this.transportEffectiveFee;
    data["transportCollectionTillDate"] = this.transportCollectionTillDate;
    data["transportReceivableFee"] = this.transportReceivableFee;
    data["transportCollectionInPercentage"] = this.transportCollectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentAnalyticsStudentDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentAnalyticsStaffListDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.consumerName = _data["consumerName"];
      this.academicYearId = _data["academicYearId"];
      this.transportTotalFee = _data["transportTotalFee"];
      this.transportDiscountedFee = _data["transportDiscountedFee"];
      this.transportEffectiveFee = _data["transportEffectiveFee"];
      this.transportCollectionTillDate = _data["transportCollectionTillDate"];
      this.transportReceivableFee = _data["transportReceivableFee"];
      this.transportCollectionInPercentage = _data["transportCollectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentAnalyticsStaffListDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["consumerName"] = this.consumerName;
    data["academicYearId"] = this.academicYearId;
    data["transportTotalFee"] = this.transportTotalFee;
    data["transportDiscountedFee"] = this.transportDiscountedFee;
    data["transportEffectiveFee"] = this.transportEffectiveFee;
    data["transportCollectionTillDate"] = this.transportCollectionTillDate;
    data["transportReceivableFee"] = this.transportReceivableFee;
    data["transportCollectionInPercentage"] = this.transportCollectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentAnalyticsStaffListDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentAnalyticsStaffDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolName = _data["schoolName"];
      this.academicYearId = _data["academicYearId"];
      this.transportTotalFee = _data["transportTotalFee"];
      this.transportDiscountedFee = _data["transportDiscountedFee"];
      this.transportEffectiveFee = _data["transportEffectiveFee"];
      this.transportCollectionTillDate = _data["transportCollectionTillDate"];
      this.transportReceivableFee = _data["transportReceivableFee"];
      this.transportCollectionInPercentage = _data["transportCollectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentAnalyticsStaffDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolName"] = this.schoolName;
    data["academicYearId"] = this.academicYearId;
    data["transportTotalFee"] = this.transportTotalFee;
    data["transportDiscountedFee"] = this.transportDiscountedFee;
    data["transportEffectiveFee"] = this.transportEffectiveFee;
    data["transportCollectionTillDate"] = this.transportCollectionTillDate;
    data["transportReceivableFee"] = this.transportReceivableFee;
    data["transportCollectionInPercentage"] = this.transportCollectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentAnalyticsStaffDto();
    result.init(json);
    return result;
  }
}
class AreaDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.areaId = _data["areaId"];
      this.areaName = _data["areaName"];
      this.pickPrice = _data["pickPrice"];
      this.dropPrice = _data["dropPrice"];
      this.pickAndDropPrice = _data["pickAndDropPrice"];
      this.description = _data["description"];
      this.academicYearId = _data["academicYearId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AreaDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["areaId"] = this.areaId;
    data["areaName"] = this.areaName;
    data["pickPrice"] = this.pickPrice;
    data["dropPrice"] = this.dropPrice;
    data["pickAndDropPrice"] = this.pickAndDropPrice;
    data["description"] = this.description;
    data["academicYearId"] = this.academicYearId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AreaDto();
    result.init(json);
    return result;
  }
}
class DatatableResponseModel {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.data = _data["data"];
      this.draw = _data["draw"];
      this.recordsFiltered = _data["recordsFiltered"];
      this.recordsTotal = _data["recordsTotal"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DatatableResponseModel();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data;
    data["draw"] = this.draw;
    data["recordsFiltered"] = this.recordsFiltered;
    data["recordsTotal"] = this.recordsTotal;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DatatableResponseModel();
    result.init(json);
    return result;
  }
}
class DatatableRequestWrapper {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.getListModel = _data["getListModel"] ? DatatableRequestModel.fromJS(_data["getListModel"]) : undefined;
      this.academicYearId = _data["academicYearId"];
      this.noticeTypeTo = _data["noticeTypeTo"];
      this.surveyTypeTo = _data["surveyTypeTo"];
      this.galleryTypeTo = _data["galleryTypeTo"];
      this.refId = _data["refId"];
      this.roleId = _data["roleId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.subjectMasterId = _data["subjectMasterId"];
      if (Array.isArray(_data["classIds"])) {
        this.classIds = [];
        for (let item of _data["classIds"]) this.classIds.push(item);
      }
      this.studentId = _data["studentId"];
      this.consumerId = _data["consumerId"];
      this.transportConsumerStoppageMappingId = _data["transportConsumerStoppageMappingId"];
      this.fromDate = _data["fromDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["fromDate"].toString()) : undefined;
      this.ngbfromDate = _data["ngbfromDate"] ? SchoolNgbDateModel.fromJS(_data["ngbfromDate"]) : undefined;
      this.tillDate = _data["tillDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["tillDate"].toString()) : undefined;
      this.ngbtillDate = _data["ngbtillDate"] ? SchoolNgbDateModel.fromJS(_data["ngbtillDate"]) : undefined;
      this.takenOn = _data["takenOn"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["takenOn"].toString()) : undefined;
      this.ngbtakenOn = _data["ngbtakenOn"] ? SchoolNgbDateModel.fromJS(_data["ngbtakenOn"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DatatableRequestWrapper();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["getListModel"] = this.getListModel ? this.getListModel.toJSON() : undefined;
    data["academicYearId"] = this.academicYearId;
    data["noticeTypeTo"] = this.noticeTypeTo;
    data["surveyTypeTo"] = this.surveyTypeTo;
    data["galleryTypeTo"] = this.galleryTypeTo;
    data["refId"] = this.refId;
    data["roleId"] = this.roleId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["subjectMasterId"] = this.subjectMasterId;
    if (Array.isArray(this.classIds)) {
      data["classIds"] = [];
      for (let item of this.classIds) data["classIds"].push(item);
    }
    data["studentId"] = this.studentId;
    data["consumerId"] = this.consumerId;
    data["transportConsumerStoppageMappingId"] = this.transportConsumerStoppageMappingId;
    data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : undefined;
    data["ngbfromDate"] = this.ngbfromDate ? this.ngbfromDate.toJSON() : undefined;
    data["tillDate"] = this.tillDate ? this.tillDate.toISOString() : undefined;
    data["ngbtillDate"] = this.ngbtillDate ? this.ngbtillDate.toJSON() : undefined;
    data["takenOn"] = this.takenOn ? this.takenOn.toISOString() : undefined;
    data["ngbtakenOn"] = this.ngbtakenOn ? this.ngbtakenOn.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DatatableRequestWrapper();
    result.init(json);
    return result;
  }
}
class DatatableRequestModel {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.draw = _data["draw"];
      if (Array.isArray(_data["columns"])) {
        this.columns = [];
        for (let item of _data["columns"]) this.columns.push(Columns.fromJS(item));
      }
      if (Array.isArray(_data["order"])) {
        this.order = [];
        for (let item of _data["order"]) this.order.push(Order.fromJS(item));
      }
      this.start = _data["start"];
      this.length = _data["length"];
      this.search = _data["search"] ? Search.fromJS(_data["search"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DatatableRequestModel();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["draw"] = this.draw;
    if (Array.isArray(this.columns)) {
      data["columns"] = [];
      for (let item of this.columns) data["columns"].push(item.toJSON());
    }
    if (Array.isArray(this.order)) {
      data["order"] = [];
      for (let item of this.order) data["order"].push(item.toJSON());
    }
    data["start"] = this.start;
    data["length"] = this.length;
    data["search"] = this.search ? this.search.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DatatableRequestModel();
    result.init(json);
    return result;
  }
}
class Columns {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.data = _data["data"];
      this.name = _data["name"];
      this.searchable = _data["searchable"];
      this.orderable = _data["orderable"];
      this.search = _data["search"] ? Search.fromJS(_data["search"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Columns();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data;
    data["name"] = this.name;
    data["searchable"] = this.searchable;
    data["orderable"] = this.orderable;
    data["search"] = this.search ? this.search.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new Columns();
    result.init(json);
    return result;
  }
}
class Search {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.value = _data["value"];
      this.regex = _data["regex"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Search();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["value"] = this.value;
    data["regex"] = this.regex;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new Search();
    result.init(json);
    return result;
  }
}
class Order {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.column = _data["column"];
      this.dir = _data["dir"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Order();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["column"] = this.column;
    data["dir"] = this.dir;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new Order();
    result.init(json);
    return result;
  }
}
class SchoolNgbDateModel {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.year = _data["year"];
      this.month = _data["month"];
      this.day = _data["day"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolNgbDateModel();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["year"] = this.year;
    data["month"] = this.month;
    data["day"] = this.day;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolNgbDateModel();
    result.init(json);
    return result;
  }
}
class AreaDeleteRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AreaDeleteRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AreaDeleteRespose();
    result.init(json);
    return result;
  }
}
class RouteDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.routeId = _data["routeId"];
      this.routeName = _data["routeName"];
      this.firstPickUpTime = _data["firstPickUpTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["firstPickUpTime"].toString()) : undefined;
      this.formattedFirstPickUpTime = _data["formattedFirstPickUpTime"];
      this.lastPickUpTime = _data["lastPickUpTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["lastPickUpTime"].toString()) : undefined;
      this.formattedLastPickUpTime = _data["formattedLastPickUpTime"];
      this.ngbFirstPickUpTime = _data["ngbFirstPickUpTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbFirstPickUpTime"]) : undefined;
      this.ngbLastPickUpTime = _data["ngbLastPickUpTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbLastPickUpTime"]) : undefined;
      this.coOrdinatorId = _data["coOrdinatorId"];
      this.coOrdinatorName = _data["coOrdinatorName"];
      this.coOrdinatorRoleId = _data["coOrdinatorRoleId"];
      this.vehicleId = _data["vehicleId"];
      this.isSharedVehicle = _data["isSharedVehicle"];
      this.sharedRouteId = _data["sharedRouteId"];
      this.academicYearId = _data["academicYearId"];
      this.vehicleNumber = _data["vehicleNumber"];
      this.ragistrationNumber = _data["ragistrationNumber"];
      this.type = _data["type"];
      this.totalSeats = _data["totalSeats"];
      this.availableSeat = _data["availableSeat"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new RouteDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["routeId"] = this.routeId;
    data["routeName"] = this.routeName;
    data["firstPickUpTime"] = this.firstPickUpTime ? this.firstPickUpTime.toISOString() : undefined;
    data["formattedFirstPickUpTime"] = this.formattedFirstPickUpTime;
    data["lastPickUpTime"] = this.lastPickUpTime ? this.lastPickUpTime.toISOString() : undefined;
    data["formattedLastPickUpTime"] = this.formattedLastPickUpTime;
    data["ngbFirstPickUpTime"] = this.ngbFirstPickUpTime ? this.ngbFirstPickUpTime.toJSON() : undefined;
    data["ngbLastPickUpTime"] = this.ngbLastPickUpTime ? this.ngbLastPickUpTime.toJSON() : undefined;
    data["coOrdinatorId"] = this.coOrdinatorId;
    data["coOrdinatorName"] = this.coOrdinatorName;
    data["coOrdinatorRoleId"] = this.coOrdinatorRoleId;
    data["vehicleId"] = this.vehicleId;
    data["isSharedVehicle"] = this.isSharedVehicle;
    data["sharedRouteId"] = this.sharedRouteId;
    data["academicYearId"] = this.academicYearId;
    data["vehicleNumber"] = this.vehicleNumber;
    data["ragistrationNumber"] = this.ragistrationNumber;
    data["type"] = this.type;
    data["totalSeats"] = this.totalSeats;
    data["availableSeat"] = this.availableSeat;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new RouteDto();
    result.init(json);
    return result;
  }
}
class SchoolNgbTimeModel {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.hour = _data["hour"];
      this.minute = _data["minute"];
      this.second = _data["second"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolNgbTimeModel();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["hour"] = this.hour;
    data["minute"] = this.minute;
    data["second"] = this.second;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolNgbTimeModel();
    result.init(json);
    return result;
  }
}
class RouteListResponse {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["routeList"])) {
        this.routeList = [];
        for (let item of _data["routeList"]) this.routeList.push(RouteDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new RouteListResponse();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.routeList)) {
      data["routeList"] = [];
      for (let item of this.routeList) data["routeList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new RouteListResponse();
    result.init(json);
    return result;
  }
}
class RouteGridInputRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.consumerName = _data["consumerName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new RouteGridInputRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["consumerName"] = this.consumerName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new RouteGridInputRequestDto();
    result.init(json);
    return result;
  }
}
class RouteDeleteRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new RouteDeleteRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new RouteDeleteRespose();
    result.init(json);
    return result;
  }
}
class StoppageDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.stoppageId = _data["stoppageId"];
      this.orderNo = _data["orderNo"];
      this.stoppageName = _data["stoppageName"];
      this.areaName = _data["areaName"];
      this.areaId = _data["areaId"];
      this.pickPrice = _data["pickPrice"];
      this.dropPrice = _data["dropPrice"];
      this.pickAndDropPrice = _data["pickAndDropPrice"];
      this.pickUpTime = _data["pickUpTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["pickUpTime"].toString()) : undefined;
      this.formattedPickUpTime = _data["formattedPickUpTime"];
      this.ngbPickUpTime = _data["ngbPickUpTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbPickUpTime"]) : undefined;
      this.ngbDropPickUpTime = _data["ngbDropPickUpTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbDropPickUpTime"]) : undefined;
      this.dropPickUpTime = _data["dropPickUpTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["dropPickUpTime"].toString()) : undefined;
      this.formattedDropPickUpTime = _data["formattedDropPickUpTime"];
      this.kiloMeter = _data["kiloMeter"];
      this.academicYearId = _data["academicYearId"];
      this.stopLat = _data["stopLat"];
      this.stopLng = _data["stopLng"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StoppageDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["stoppageId"] = this.stoppageId;
    data["orderNo"] = this.orderNo;
    data["stoppageName"] = this.stoppageName;
    data["areaName"] = this.areaName;
    data["areaId"] = this.areaId;
    data["pickPrice"] = this.pickPrice;
    data["dropPrice"] = this.dropPrice;
    data["pickAndDropPrice"] = this.pickAndDropPrice;
    data["pickUpTime"] = this.pickUpTime ? this.pickUpTime.toISOString() : undefined;
    data["formattedPickUpTime"] = this.formattedPickUpTime;
    data["ngbPickUpTime"] = this.ngbPickUpTime ? this.ngbPickUpTime.toJSON() : undefined;
    data["ngbDropPickUpTime"] = this.ngbDropPickUpTime ? this.ngbDropPickUpTime.toJSON() : undefined;
    data["dropPickUpTime"] = this.dropPickUpTime ? this.dropPickUpTime.toISOString() : undefined;
    data["formattedDropPickUpTime"] = this.formattedDropPickUpTime;
    data["kiloMeter"] = this.kiloMeter;
    data["academicYearId"] = this.academicYearId;
    data["stopLat"] = this.stopLat;
    data["stopLng"] = this.stopLng;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StoppageDto();
    result.init(json);
    return result;
  }
}
class StoppageListResponse {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["stoppageList"])) {
        this.stoppageList = [];
        for (let item of _data["stoppageList"]) this.stoppageList.push(StoppageDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StoppageListResponse();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.stoppageList)) {
      data["stoppageList"] = [];
      for (let item of this.stoppageList) data["stoppageList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StoppageListResponse();
    result.init(json);
    return result;
  }
}
class StoppageGridInputDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.routeId = _data["routeId"];
      this.consumerName = _data["consumerName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StoppageGridInputDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["routeId"] = this.routeId;
    data["consumerName"] = this.consumerName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StoppageGridInputDto();
    result.init(json);
    return result;
  }
}
class StoppageDeleteRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StoppageDeleteRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StoppageDeleteRespose();
    result.init(json);
    return result;
  }
}
class VehicleDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.vehicleId = _data["vehicleId"];
      this.academicYearId = _data["academicYearId"];
      this.vehicleNumber = _data["vehicleNumber"];
      this.totalSeats = _data["totalSeats"];
      this.ragistrationNumber = _data["ragistrationNumber"];
      this.chassisNumber = _data["chassisNumber"];
      this.ownerName = _data["ownerName"];
      this.financerName = _data["financerName"];
      this.enginNumber = _data["enginNumber"];
      this.companyName = _data["companyName"];
      this.tankCapacity = _data["tankCapacity"];
      this.model = _data["model"];
      this.type = _data["type"];
      this.fuelType = _data["fuelType"];
      this.cabDriverName = _data["cabDriverName"];
      this.cabDriverId = _data["cabDriverId"];
      this.conductor = _data["conductor"];
      this.deviceId = _data["deviceId"];
      this.providerName = _data["providerName"];
      this.isActive = _data["isActive"];
      this.status = _data["status"];
      this.vehicleDetailId = _data["vehicleDetailId"];
      this.vehicleRegistrationStartDate = _data["vehicleRegistrationStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vehicleRegistrationStartDate"].toString()) : undefined;
      this.ngbVehicleRegistrationStartDate = _data["ngbVehicleRegistrationStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVehicleRegistrationStartDate"]) : undefined;
      this.vehicleRegistrationEndDate = _data["vehicleRegistrationEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vehicleRegistrationEndDate"].toString()) : undefined;
      this.ngbVehicleRegistrationEndDate = _data["ngbVehicleRegistrationEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVehicleRegistrationEndDate"]) : undefined;
      this.vehiclePermitStartDate = _data["vehiclePermitStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vehiclePermitStartDate"].toString()) : undefined;
      this.ngbVehiclePermitStartDate = _data["ngbVehiclePermitStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVehiclePermitStartDate"]) : undefined;
      this.vehiclePermitEndDate = _data["vehiclePermitEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vehiclePermitEndDate"].toString()) : undefined;
      this.ngbVehiclePermitEndDate = _data["ngbVehiclePermitEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVehiclePermitEndDate"]) : undefined;
      this.vehicleInsuranceStartDate = _data["vehicleInsuranceStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vehicleInsuranceStartDate"].toString()) : undefined;
      this.ngbVehicleInsuranceStartDate = _data["ngbVehicleInsuranceStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVehicleInsuranceStartDate"]) : undefined;
      this.vehicleInsuranceEndDate = _data["vehicleInsuranceEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vehicleInsuranceEndDate"].toString()) : undefined;
      this.ngbVehicleInsuranceEndDate = _data["ngbVehicleInsuranceEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVehicleInsuranceEndDate"]) : undefined;
      this.vehiclePollutionStartDate = _data["vehiclePollutionStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vehiclePollutionStartDate"].toString()) : undefined;
      this.ngbVehiclePollutionStartDate = _data["ngbVehiclePollutionStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVehiclePollutionStartDate"]) : undefined;
      this.vehiclePollutionEndDate = _data["vehiclePollutionEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vehiclePollutionEndDate"].toString()) : undefined;
      this.ngbVehiclePollutionEndDate = _data["ngbVehiclePollutionEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVehiclePollutionEndDate"]) : undefined;
      this.vehicleRoadTaxStartDate = _data["vehicleRoadTaxStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vehicleRoadTaxStartDate"].toString()) : undefined;
      this.ngbVehicleRoadTaxStartDate = _data["ngbVehicleRoadTaxStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVehicleRoadTaxStartDate"]) : undefined;
      this.vehicleRoadTaxEndDate = _data["vehicleRoadTaxEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vehicleRoadTaxEndDate"].toString()) : undefined;
      this.ngbVehicleRoadTaxEndDate = _data["ngbVehicleRoadTaxEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVehicleRoadTaxEndDate"]) : undefined;
      this.vehicleFitnessStartDate = _data["vehicleFitnessStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vehicleFitnessStartDate"].toString()) : undefined;
      this.ngbVehicleFitnessStartDate = _data["ngbVehicleFitnessStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVehicleFitnessStartDate"]) : undefined;
      this.vehicleFitnessEndDate = _data["vehicleFitnessEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vehicleFitnessEndDate"].toString()) : undefined;
      this.ngbVehicleFitnessEndDate = _data["ngbVehicleFitnessEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVehicleFitnessEndDate"]) : undefined;
      this.description = _data["description"];
      this.userId = _data["userId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new VehicleDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["vehicleId"] = this.vehicleId;
    data["academicYearId"] = this.academicYearId;
    data["vehicleNumber"] = this.vehicleNumber;
    data["totalSeats"] = this.totalSeats;
    data["ragistrationNumber"] = this.ragistrationNumber;
    data["chassisNumber"] = this.chassisNumber;
    data["ownerName"] = this.ownerName;
    data["financerName"] = this.financerName;
    data["enginNumber"] = this.enginNumber;
    data["companyName"] = this.companyName;
    data["tankCapacity"] = this.tankCapacity;
    data["model"] = this.model;
    data["type"] = this.type;
    data["fuelType"] = this.fuelType;
    data["cabDriverName"] = this.cabDriverName;
    data["cabDriverId"] = this.cabDriverId;
    data["conductor"] = this.conductor;
    data["deviceId"] = this.deviceId;
    data["providerName"] = this.providerName;
    data["isActive"] = this.isActive;
    data["status"] = this.status;
    data["vehicleDetailId"] = this.vehicleDetailId;
    data["vehicleRegistrationStartDate"] = this.vehicleRegistrationStartDate ? this.vehicleRegistrationStartDate.toISOString() : undefined;
    data["ngbVehicleRegistrationStartDate"] = this.ngbVehicleRegistrationStartDate ? this.ngbVehicleRegistrationStartDate.toJSON() : undefined;
    data["vehicleRegistrationEndDate"] = this.vehicleRegistrationEndDate ? this.vehicleRegistrationEndDate.toISOString() : undefined;
    data["ngbVehicleRegistrationEndDate"] = this.ngbVehicleRegistrationEndDate ? this.ngbVehicleRegistrationEndDate.toJSON() : undefined;
    data["vehiclePermitStartDate"] = this.vehiclePermitStartDate ? this.vehiclePermitStartDate.toISOString() : undefined;
    data["ngbVehiclePermitStartDate"] = this.ngbVehiclePermitStartDate ? this.ngbVehiclePermitStartDate.toJSON() : undefined;
    data["vehiclePermitEndDate"] = this.vehiclePermitEndDate ? this.vehiclePermitEndDate.toISOString() : undefined;
    data["ngbVehiclePermitEndDate"] = this.ngbVehiclePermitEndDate ? this.ngbVehiclePermitEndDate.toJSON() : undefined;
    data["vehicleInsuranceStartDate"] = this.vehicleInsuranceStartDate ? this.vehicleInsuranceStartDate.toISOString() : undefined;
    data["ngbVehicleInsuranceStartDate"] = this.ngbVehicleInsuranceStartDate ? this.ngbVehicleInsuranceStartDate.toJSON() : undefined;
    data["vehicleInsuranceEndDate"] = this.vehicleInsuranceEndDate ? this.vehicleInsuranceEndDate.toISOString() : undefined;
    data["ngbVehicleInsuranceEndDate"] = this.ngbVehicleInsuranceEndDate ? this.ngbVehicleInsuranceEndDate.toJSON() : undefined;
    data["vehiclePollutionStartDate"] = this.vehiclePollutionStartDate ? this.vehiclePollutionStartDate.toISOString() : undefined;
    data["ngbVehiclePollutionStartDate"] = this.ngbVehiclePollutionStartDate ? this.ngbVehiclePollutionStartDate.toJSON() : undefined;
    data["vehiclePollutionEndDate"] = this.vehiclePollutionEndDate ? this.vehiclePollutionEndDate.toISOString() : undefined;
    data["ngbVehiclePollutionEndDate"] = this.ngbVehiclePollutionEndDate ? this.ngbVehiclePollutionEndDate.toJSON() : undefined;
    data["vehicleRoadTaxStartDate"] = this.vehicleRoadTaxStartDate ? this.vehicleRoadTaxStartDate.toISOString() : undefined;
    data["ngbVehicleRoadTaxStartDate"] = this.ngbVehicleRoadTaxStartDate ? this.ngbVehicleRoadTaxStartDate.toJSON() : undefined;
    data["vehicleRoadTaxEndDate"] = this.vehicleRoadTaxEndDate ? this.vehicleRoadTaxEndDate.toISOString() : undefined;
    data["ngbVehicleRoadTaxEndDate"] = this.ngbVehicleRoadTaxEndDate ? this.ngbVehicleRoadTaxEndDate.toJSON() : undefined;
    data["vehicleFitnessStartDate"] = this.vehicleFitnessStartDate ? this.vehicleFitnessStartDate.toISOString() : undefined;
    data["ngbVehicleFitnessStartDate"] = this.ngbVehicleFitnessStartDate ? this.ngbVehicleFitnessStartDate.toJSON() : undefined;
    data["vehicleFitnessEndDate"] = this.vehicleFitnessEndDate ? this.vehicleFitnessEndDate.toISOString() : undefined;
    data["ngbVehicleFitnessEndDate"] = this.ngbVehicleFitnessEndDate ? this.ngbVehicleFitnessEndDate.toJSON() : undefined;
    data["description"] = this.description;
    data["userId"] = this.userId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new VehicleDto();
    result.init(json);
    return result;
  }
}
class ActiceInActiveVehicleDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.vehicleId = _data["vehicleId"];
      this.isActive = _data["isActive"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ActiceInActiveVehicleDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["vehicleId"] = this.vehicleId;
    data["isActive"] = this.isActive;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ActiceInActiveVehicleDto();
    result.init(json);
    return result;
  }
}
class VehicleDeleteResposeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
      this.vehicleCount = _data["vehicleCount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new VehicleDeleteResposeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    data["vehicleCount"] = this.vehicleCount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new VehicleDeleteResposeDto();
    result.init(json);
    return result;
  }
}
class DropdownResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["cabDriverDropdownList"])) {
        this.cabDriverDropdownList = [];
        for (let item of _data["cabDriverDropdownList"]) this.cabDriverDropdownList.push(CabDriverDropDownReasponseDto.fromJS(item));
      }
      if (Array.isArray(_data["areaNameDropdownList"])) {
        this.areaNameDropdownList = [];
        for (let item of _data["areaNameDropdownList"]) this.areaNameDropdownList.push(AreaNameDropDownReasponseDto.fromJS(item));
      }
      if (Array.isArray(_data["vehicleDropdownList"])) {
        this.vehicleDropdownList = [];
        for (let item of _data["vehicleDropdownList"]) this.vehicleDropdownList.push(VehicleDropDownReasponseDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DropdownResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.cabDriverDropdownList)) {
      data["cabDriverDropdownList"] = [];
      for (let item of this.cabDriverDropdownList) data["cabDriverDropdownList"].push(item.toJSON());
    }
    if (Array.isArray(this.areaNameDropdownList)) {
      data["areaNameDropdownList"] = [];
      for (let item of this.areaNameDropdownList) data["areaNameDropdownList"].push(item.toJSON());
    }
    if (Array.isArray(this.vehicleDropdownList)) {
      data["vehicleDropdownList"] = [];
      for (let item of this.vehicleDropdownList) data["vehicleDropdownList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DropdownResponseDto();
    result.init(json);
    return result;
  }
}
class CabDriverDropDownReasponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.cabDriverId = _data["cabDriverId"];
      this.cabDriverName = _data["cabDriverName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabDriverDropDownReasponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["cabDriverId"] = this.cabDriverId;
    data["cabDriverName"] = this.cabDriverName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabDriverDropDownReasponseDto();
    result.init(json);
    return result;
  }
}
class AreaNameDropDownReasponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.areaId = _data["areaId"];
      this.areaName = _data["areaName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AreaNameDropDownReasponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["areaId"] = this.areaId;
    data["areaName"] = this.areaName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AreaNameDropDownReasponseDto();
    result.init(json);
    return result;
  }
}
class VehicleDropDownReasponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.vehicleId = _data["vehicleId"];
      this.vehicleNumber = _data["vehicleNumber"];
      this.ragistrationNumber = _data["ragistrationNumber"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new VehicleDropDownReasponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["vehicleId"] = this.vehicleId;
    data["vehicleNumber"] = this.vehicleNumber;
    data["ragistrationNumber"] = this.ragistrationNumber;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new VehicleDropDownReasponseDto();
    result.init(json);
    return result;
  }
}
class TransportStaffResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["transportStaffList"])) {
        this.transportStaffList = [];
        for (let item of _data["transportStaffList"]) this.transportStaffList.push(TransportStaffDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportStaffResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.transportStaffList)) {
      data["transportStaffList"] = [];
      for (let item of this.transportStaffList) data["transportStaffList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportStaffResponseDto();
    result.init(json);
    return result;
  }
}
class TransportStaffDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.staffId = _data["staffId"];
      this.staffName = _data["staffName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportStaffDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["staffId"] = this.staffId;
    data["staffName"] = this.staffName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportStaffDto();
    result.init(json);
    return result;
  }
}
class SchoolTreeviewItemResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["lstConsumerTreeviewItem"])) {
        this.lstConsumerTreeviewItem = [];
        for (let item of _data["lstConsumerTreeviewItem"]) this.lstConsumerTreeviewItem.push(SchoolTreeviewItem.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolTreeviewItemResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.lstConsumerTreeviewItem)) {
      data["lstConsumerTreeviewItem"] = [];
      for (let item of this.lstConsumerTreeviewItem) data["lstConsumerTreeviewItem"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolTreeviewItemResponseDto();
    result.init(json);
    return result;
  }
}
class SchoolTreeviewItem {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.text = _data["text"];
      this.value = _data["value"];
      this.checked = _data["checked"];
      this.collapsed = _data["collapsed"];
      this.isFeeApplicableToStaff = _data["isFeeApplicableToStaff"];
      if (Array.isArray(_data["children"])) {
        this.children = [];
        for (let item of _data["children"]) this.children.push(SchoolTreeviewItem.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolTreeviewItem();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["text"] = this.text;
    data["value"] = this.value;
    data["checked"] = this.checked;
    data["collapsed"] = this.collapsed;
    data["isFeeApplicableToStaff"] = this.isFeeApplicableToStaff;
    if (Array.isArray(this.children)) {
      data["children"] = [];
      for (let item of this.children) data["children"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolTreeviewItem();
    result.init(json);
    return result;
  }
}
class StoppageConsumerTreeviewRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.stoppageId = _data["stoppageId"];
      this.academicYearId = _data["academicYearId"];
      this.roleId = _data["roleId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StoppageConsumerTreeviewRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["stoppageId"] = this.stoppageId;
    data["academicYearId"] = this.academicYearId;
    data["roleId"] = this.roleId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StoppageConsumerTreeviewRequestDto();
    result.init(json);
    return result;
  }
}
class CreateTransportConsumerResponse {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.isSuccess = _data["isSuccess"];
      if (Array.isArray(_data["lstOverlapPeriod"])) {
        this.lstOverlapPeriod = [];
        for (let item of _data["lstOverlapPeriod"]) this.lstOverlapPeriod.push(ConsumerTransportMappingDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CreateTransportConsumerResponse();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["isSuccess"] = this.isSuccess;
    if (Array.isArray(this.lstOverlapPeriod)) {
      data["lstOverlapPeriod"] = [];
      for (let item of this.lstOverlapPeriod) data["lstOverlapPeriod"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CreateTransportConsumerResponse();
    result.init(json);
    return result;
  }
}
class ConsumerTransportMappingDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.transportConsumerStoppageMappingId = _data["transportConsumerStoppageMappingId"];
      this.stoppageId = _data["stoppageId"];
      this.stoppageName = _data["stoppageName"];
      this.roleId = _data["roleId"];
      this.consumerId = _data["consumerId"];
      this.userName = _data["userName"];
      this.roleName = _data["roleName"];
      this.ngbFromDate = _data["ngbFromDate"] ? SchoolNgbDateModel.fromJS(_data["ngbFromDate"]) : undefined;
      this.fromDate = _data["fromDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["fromDate"].toString()) : undefined;
      this.ngbToDate = _data["ngbToDate"] ? SchoolNgbDateModel.fromJS(_data["ngbToDate"]) : undefined;
      this.toDate = _data["toDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["toDate"].toString()) : undefined;
      this.academicYearId = _data["academicYearId"];
      this.pickDropId = _data["pickDropId"];
      this.pickDropPrice = _data["pickDropPrice"];
      this.isFeePaymentAlreadyDone = _data["isFeePaymentAlreadyDone"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ConsumerTransportMappingDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["transportConsumerStoppageMappingId"] = this.transportConsumerStoppageMappingId;
    data["stoppageId"] = this.stoppageId;
    data["stoppageName"] = this.stoppageName;
    data["roleId"] = this.roleId;
    data["consumerId"] = this.consumerId;
    data["userName"] = this.userName;
    data["roleName"] = this.roleName;
    data["ngbFromDate"] = this.ngbFromDate ? this.ngbFromDate.toJSON() : undefined;
    data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : undefined;
    data["ngbToDate"] = this.ngbToDate ? this.ngbToDate.toJSON() : undefined;
    data["toDate"] = this.toDate ? this.toDate.toISOString() : undefined;
    data["academicYearId"] = this.academicYearId;
    data["pickDropId"] = this.pickDropId;
    data["pickDropPrice"] = this.pickDropPrice;
    data["isFeePaymentAlreadyDone"] = this.isFeePaymentAlreadyDone;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ConsumerTransportMappingDto();
    result.init(json);
    return result;
  }
}
class ConsumerTransportMappingUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.userId = _data["userId"];
      if (Array.isArray(_data["consumers"])) {
        this.consumers = [];
        for (let item of _data["consumers"]) this.consumers.push(ConsumerTransportMappingDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ConsumerTransportMappingUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["userId"] = this.userId;
    if (Array.isArray(this.consumers)) {
      data["consumers"] = [];
      for (let item of this.consumers) data["consumers"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ConsumerTransportMappingUpsertDto();
    result.init(json);
    return result;
  }
}
class ConsumerByStoppageIdInputDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.stoppageId = _data["stoppageId"];
      this.academicYearId = _data["academicYearId"];
      this.consumerName = _data["consumerName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ConsumerByStoppageIdInputDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["stoppageId"] = this.stoppageId;
    data["academicYearId"] = this.academicYearId;
    data["consumerName"] = this.consumerName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ConsumerByStoppageIdInputDto();
    result.init(json);
    return result;
  }
}
class ConsumerDeleteResposeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ConsumerDeleteResposeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ConsumerDeleteResposeDto();
    result.init(json);
    return result;
  }
}
class TransportFeePaymentSelectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.fullName = _data["fullName"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.isNewStudent = _data["isNewStudent"];
      this.isRTEStudent = _data["isRTEStudent"];
      this.appAccessMobileNo = _data["appAccessMobileNo"];
      this.academicYearId = _data["academicYearId"];
      this.rollNumber = _data["rollNumber"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      if (Array.isArray(_data["transportFeePaymentAppliedMonthList"])) {
        this.transportFeePaymentAppliedMonthList = [];
        for (let item of _data["transportFeePaymentAppliedMonthList"]) this.transportFeePaymentAppliedMonthList.push(TransportFeePaymentAppliedMonths.fromJS(item));
      }
      if (Array.isArray(_data["transportFeePaymentAdditionalDiscountList"])) {
        this.transportFeePaymentAdditionalDiscountList = [];
        for (let item of _data["transportFeePaymentAdditionalDiscountList"]) this.transportFeePaymentAdditionalDiscountList.push(TransportFeePaymentAdditionalDiscount.fromJS(item));
      }
      if (Array.isArray(_data["transportFeePaymentParticularsList"])) {
        this.transportFeePaymentParticularsList = [];
        for (let item of _data["transportFeePaymentParticularsList"]) this.transportFeePaymentParticularsList.push(TransportFeePaymentParticulars.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeePaymentSelectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["fullName"] = this.fullName;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["isNewStudent"] = this.isNewStudent;
    data["isRTEStudent"] = this.isRTEStudent;
    data["appAccessMobileNo"] = this.appAccessMobileNo;
    data["academicYearId"] = this.academicYearId;
    data["rollNumber"] = this.rollNumber;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    if (Array.isArray(this.transportFeePaymentAppliedMonthList)) {
      data["transportFeePaymentAppliedMonthList"] = [];
      for (let item of this.transportFeePaymentAppliedMonthList) data["transportFeePaymentAppliedMonthList"].push(item.toJSON());
    }
    if (Array.isArray(this.transportFeePaymentAdditionalDiscountList)) {
      data["transportFeePaymentAdditionalDiscountList"] = [];
      for (let item of this.transportFeePaymentAdditionalDiscountList) data["transportFeePaymentAdditionalDiscountList"].push(item.toJSON());
    }
    if (Array.isArray(this.transportFeePaymentParticularsList)) {
      data["transportFeePaymentParticularsList"] = [];
      for (let item of this.transportFeePaymentParticularsList) data["transportFeePaymentParticularsList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeePaymentSelectDto();
    result.init(json);
    return result;
  }
}
class TransportFeePaymentAppliedMonths {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.monthMasterId = _data["monthMasterId"];
      this.transportFeeAdditionalDiscountId = _data["transportFeeAdditionalDiscountId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeePaymentAppliedMonths();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["monthMasterId"] = this.monthMasterId;
    data["transportFeeAdditionalDiscountId"] = this.transportFeeAdditionalDiscountId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeePaymentAppliedMonths();
    result.init(json);
    return result;
  }
}
class TransportFeePaymentAdditionalDiscount {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.transportFeeAdditionalDiscountId = _data["transportFeeAdditionalDiscountId"];
      this.academicYearId = _data["academicYearId"];
      this.additionalDiscountedAmount = _data["additionalDiscountedAmount"];
      this.installmentPaybleFee = _data["installmentPaybleFee"];
      this.paymentInstallmentNumber = _data["paymentInstallmentNumber"];
      this.additionalDiscountedRemark = _data["additionalDiscountedRemark"];
      this.appliedDate = _data["appliedDate"];
      this.totalFee = _data["totalFee"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeePaymentAdditionalDiscount();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["transportFeeAdditionalDiscountId"] = this.transportFeeAdditionalDiscountId;
    data["academicYearId"] = this.academicYearId;
    data["additionalDiscountedAmount"] = this.additionalDiscountedAmount;
    data["installmentPaybleFee"] = this.installmentPaybleFee;
    data["paymentInstallmentNumber"] = this.paymentInstallmentNumber;
    data["additionalDiscountedRemark"] = this.additionalDiscountedRemark;
    data["appliedDate"] = this.appliedDate;
    data["totalFee"] = this.totalFee;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeePaymentAdditionalDiscount();
    result.init(json);
    return result;
  }
}
class TransportFeePaymentParticulars {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.additionalDiscInPercentage = _data["additionalDiscInPercentage"];
      this.totalFee = _data["totalFee"];
      this.feeAfterDiscount = _data["feeAfterDiscount"];
      this.paybleFee = _data["paybleFee"];
      this.dueAmount = _data["dueAmount"];
      this.alreadyPaid = _data["alreadyPaid"];
      this.additionalDiscAmount = _data["additionalDiscAmount"];
      this.showError = _data["showError"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeePaymentParticulars();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["additionalDiscInPercentage"] = this.additionalDiscInPercentage;
    data["totalFee"] = this.totalFee;
    data["feeAfterDiscount"] = this.feeAfterDiscount;
    data["paybleFee"] = this.paybleFee;
    data["dueAmount"] = this.dueAmount;
    data["alreadyPaid"] = this.alreadyPaid;
    data["additionalDiscAmount"] = this.additionalDiscAmount;
    data["showError"] = this.showError;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeePaymentParticulars();
    result.init(json);
    return result;
  }
}
class TransportFeePaymentUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.roleId = _data["roleId"];
      this.consumerId = _data["consumerId"];
      this.transportConsumerStoppageMappingId = _data["transportConsumerStoppageMappingId"];
      this.onlineTransactionId = _data["onlineTransactionId"];
      this.onlineTransactionDateTime = _data["onlineTransactionDateTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["onlineTransactionDateTime"].toString()) : undefined;
      this.ngbOnlineTransactionDateTime = _data["ngbOnlineTransactionDateTime"] ? SchoolNgbDateModel.fromJS(_data["ngbOnlineTransactionDateTime"]) : undefined;
      this.onlinePaymentRequest = _data["onlinePaymentRequest"];
      this.onlinePaymentResponse = _data["onlinePaymentResponse"];
      this.paidToBank = _data["paidToBank"];
      this.paidAmount = _data["paidAmount"];
      this.paymentTypeId = _data["paymentTypeId"];
      this.chequeNumber = _data["chequeNumber"];
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.ngbChequeDate = _data["ngbChequeDate"] ? SchoolNgbDateModel.fromJS(_data["ngbChequeDate"]) : undefined;
      this.chequeBank = _data["chequeBank"];
      this.chequeAmount = _data["chequeAmount"];
      this.isChequeClear = _data["isChequeClear"];
      this.remark = _data["remark"];
      this.additionalDiscountedAmount = _data["additionalDiscountedAmount"];
      this.installmentPaybleFee = _data["installmentPaybleFee"];
      this.additionalDiscountedRemark = _data["additionalDiscountedRemark"];
      this.userId = _data["userId"];
      if (Array.isArray(_data["transportFeePaymentAppliedMonthMappingTypeUpsertDtoList"])) {
        this.transportFeePaymentAppliedMonthMappingTypeUpsertDtoList = [];
        for (let item of _data["transportFeePaymentAppliedMonthMappingTypeUpsertDtoList"]) this.transportFeePaymentAppliedMonthMappingTypeUpsertDtoList.push(TransportFeePaymentAppliedMonthMappingTypeUpsertDto.fromJS(item));
      }
      if (Array.isArray(_data["transportFeePaymentDetailTypeUpsertDtoList"])) {
        this.transportFeePaymentDetailTypeUpsertDtoList = [];
        for (let item of _data["transportFeePaymentDetailTypeUpsertDtoList"]) this.transportFeePaymentDetailTypeUpsertDtoList.push(TransportFeePaymentDetailTypeUpsertDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeePaymentUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["roleId"] = this.roleId;
    data["consumerId"] = this.consumerId;
    data["transportConsumerStoppageMappingId"] = this.transportConsumerStoppageMappingId;
    data["onlineTransactionId"] = this.onlineTransactionId;
    data["onlineTransactionDateTime"] = this.onlineTransactionDateTime ? this.onlineTransactionDateTime.toISOString() : undefined;
    data["ngbOnlineTransactionDateTime"] = this.ngbOnlineTransactionDateTime ? this.ngbOnlineTransactionDateTime.toJSON() : undefined;
    data["onlinePaymentRequest"] = this.onlinePaymentRequest;
    data["onlinePaymentResponse"] = this.onlinePaymentResponse;
    data["paidToBank"] = this.paidToBank;
    data["paidAmount"] = this.paidAmount;
    data["paymentTypeId"] = this.paymentTypeId;
    data["chequeNumber"] = this.chequeNumber;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["ngbChequeDate"] = this.ngbChequeDate ? this.ngbChequeDate.toJSON() : undefined;
    data["chequeBank"] = this.chequeBank;
    data["chequeAmount"] = this.chequeAmount;
    data["isChequeClear"] = this.isChequeClear;
    data["remark"] = this.remark;
    data["additionalDiscountedAmount"] = this.additionalDiscountedAmount;
    data["installmentPaybleFee"] = this.installmentPaybleFee;
    data["additionalDiscountedRemark"] = this.additionalDiscountedRemark;
    data["userId"] = this.userId;
    if (Array.isArray(this.transportFeePaymentAppliedMonthMappingTypeUpsertDtoList)) {
      data["transportFeePaymentAppliedMonthMappingTypeUpsertDtoList"] = [];
      for (let item of this.transportFeePaymentAppliedMonthMappingTypeUpsertDtoList) data["transportFeePaymentAppliedMonthMappingTypeUpsertDtoList"].push(item.toJSON());
    }
    if (Array.isArray(this.transportFeePaymentDetailTypeUpsertDtoList)) {
      data["transportFeePaymentDetailTypeUpsertDtoList"] = [];
      for (let item of this.transportFeePaymentDetailTypeUpsertDtoList) data["transportFeePaymentDetailTypeUpsertDtoList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeePaymentUpsertDto();
    result.init(json);
    return result;
  }
}
class TransportFeePaymentAppliedMonthMappingTypeUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.monthMasterId = _data["monthMasterId"];
      this.discountedPercent = _data["discountedPercent"];
      this.discountedAmount = _data["discountedAmount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeePaymentAppliedMonthMappingTypeUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["monthMasterId"] = this.monthMasterId;
    data["discountedPercent"] = this.discountedPercent;
    data["discountedAmount"] = this.discountedAmount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeePaymentAppliedMonthMappingTypeUpsertDto();
    result.init(json);
    return result;
  }
}
class TransportFeePaymentDetailTypeUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.otherFeeReason = _data["otherFeeReason"];
      this.paidAmount = _data["paidAmount"];
      this.feeAfterDiscount = _data["feeAfterDiscount"];
      this.additionalDiscInPercentage = _data["additionalDiscInPercentage"];
      this.additionalDiscAmount = _data["additionalDiscAmount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeePaymentDetailTypeUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["otherFeeReason"] = this.otherFeeReason;
    data["paidAmount"] = this.paidAmount;
    data["feeAfterDiscount"] = this.feeAfterDiscount;
    data["additionalDiscInPercentage"] = this.additionalDiscInPercentage;
    data["additionalDiscAmount"] = this.additionalDiscAmount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeePaymentDetailTypeUpsertDto();
    result.init(json);
    return result;
  }
}
class TransportFeeMonthMastersDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["transportFeeMonthMastersList"])) {
        this.transportFeeMonthMastersList = [];
        for (let item of _data["transportFeeMonthMastersList"]) this.transportFeeMonthMastersList.push(TransportFeeMonthMasterDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeeMonthMastersDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.transportFeeMonthMastersList)) {
      data["transportFeeMonthMastersList"] = [];
      for (let item of this.transportFeeMonthMastersList) data["transportFeeMonthMastersList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeeMonthMastersDto();
    result.init(json);
    return result;
  }
}
class TransportFeeMonthMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.isCurrentChecked = _data["isCurrentChecked"];
      this.isAlreadyChecked = _data["isAlreadyChecked"];
      this.monthMasterId = _data["monthMasterId"];
      this.monthMasterName = _data["monthMasterName"];
      this.perMonthAmount = _data["perMonthAmount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeeMonthMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["isCurrentChecked"] = this.isCurrentChecked;
    data["isAlreadyChecked"] = this.isAlreadyChecked;
    data["monthMasterId"] = this.monthMasterId;
    data["monthMasterName"] = this.monthMasterName;
    data["perMonthAmount"] = this.perMonthAmount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeeMonthMasterDto();
    result.init(json);
    return result;
  }
}
class TransportFeePaymentStoppageGridDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["transportFeePaymentStoppageDtoList"])) {
        this.transportFeePaymentStoppageDtoList = [];
        for (let item of _data["transportFeePaymentStoppageDtoList"]) this.transportFeePaymentStoppageDtoList.push(TransportFeePaymentStoppageDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeePaymentStoppageGridDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.transportFeePaymentStoppageDtoList)) {
      data["transportFeePaymentStoppageDtoList"] = [];
      for (let item of this.transportFeePaymentStoppageDtoList) data["transportFeePaymentStoppageDtoList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeePaymentStoppageGridDto();
    result.init(json);
    return result;
  }
}
class TransportFeePaymentStoppageDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.consumerId = _data["consumerId"];
      this.roleId = _data["roleId"];
      this.transportConsumerStoppageMappingId = _data["transportConsumerStoppageMappingId"];
      this.routeName = _data["routeName"];
      this.pickDropId = _data["pickDropId"];
      this.pickDropPrice = _data["pickDropPrice"];
      this.months = _data["months"];
      this.fromDateString = _data["fromDateString"];
      this.toDateString = _data["toDateString"];
      this.stoppageName = _data["stoppageName"];
      this.academicYearId = _data["academicYearId"];
      this.academicYearKey = _data["academicYearKey"];
      this.fullName = _data["fullName"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.paidAmount = _data["paidAmount"];
      this.otherPaidAmount = _data["otherPaidAmount"];
      this.dueAmount = _data["dueAmount"];
      this.chequeClearedAmount = _data["chequeClearedAmount"];
      this.chequeUnclearAmount = _data["chequeUnclearAmount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeePaymentStoppageDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["consumerId"] = this.consumerId;
    data["roleId"] = this.roleId;
    data["transportConsumerStoppageMappingId"] = this.transportConsumerStoppageMappingId;
    data["routeName"] = this.routeName;
    data["pickDropId"] = this.pickDropId;
    data["pickDropPrice"] = this.pickDropPrice;
    data["months"] = this.months;
    data["fromDateString"] = this.fromDateString;
    data["toDateString"] = this.toDateString;
    data["stoppageName"] = this.stoppageName;
    data["academicYearId"] = this.academicYearId;
    data["academicYearKey"] = this.academicYearKey;
    data["fullName"] = this.fullName;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["paidAmount"] = this.paidAmount;
    data["otherPaidAmount"] = this.otherPaidAmount;
    data["dueAmount"] = this.dueAmount;
    data["chequeClearedAmount"] = this.chequeClearedAmount;
    data["chequeUnclearAmount"] = this.chequeUnclearAmount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeePaymentStoppageDto();
    result.init(json);
    return result;
  }
}
class TransportFeePaymentHistorySelectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolName = _data["schoolName"];
      this.schoolAddress = _data["schoolAddress"];
      this.academicYearId = _data["academicYearId"];
      this.fullName = _data["fullName"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.rollNumber = _data["rollNumber"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.paymentTypeName = _data["paymentTypeName"];
      this.paymentDate = _data["paymentDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["paymentDate"].toString()) : undefined;
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.chequeBank = _data["chequeBank"];
      this.transactionId = _data["transactionId"];
      this.invoiceNumber = _data["invoiceNumber"];
      if (Array.isArray(_data["transportFeeSelectList"])) {
        this.transportFeeSelectList = [];
        for (let item of _data["transportFeeSelectList"]) this.transportFeeSelectList.push(TransportFeeSelectDto.fromJS(item));
      }
      if (Array.isArray(_data["paidMonthList"])) {
        this.paidMonthList = [];
        for (let item of _data["paidMonthList"]) this.paidMonthList.push(item);
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeePaymentHistorySelectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolName"] = this.schoolName;
    data["schoolAddress"] = this.schoolAddress;
    data["academicYearId"] = this.academicYearId;
    data["fullName"] = this.fullName;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["rollNumber"] = this.rollNumber;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["paymentTypeName"] = this.paymentTypeName;
    data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : undefined;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["chequeBank"] = this.chequeBank;
    data["transactionId"] = this.transactionId;
    data["invoiceNumber"] = this.invoiceNumber;
    if (Array.isArray(this.transportFeeSelectList)) {
      data["transportFeeSelectList"] = [];
      for (let item of this.transportFeeSelectList) data["transportFeeSelectList"].push(item.toJSON());
    }
    if (Array.isArray(this.paidMonthList)) {
      data["paidMonthList"] = [];
      for (let item of this.paidMonthList) data["paidMonthList"].push(item);
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeePaymentHistorySelectDto();
    result.init(json);
    return result;
  }
}
class TransportFeeSelectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.totalFee = _data["totalFee"];
      this.feeAfterDiscount = _data["feeAfterDiscount"];
      this.paidAmount = _data["paidAmount"];
      this.dueAmount = _data["dueAmount"];
      this.alreadyPaid = _data["alreadyPaid"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeeSelectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["totalFee"] = this.totalFee;
    data["feeAfterDiscount"] = this.feeAfterDiscount;
    data["paidAmount"] = this.paidAmount;
    data["dueAmount"] = this.dueAmount;
    data["alreadyPaid"] = this.alreadyPaid;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeeSelectDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentReportDaywiseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.cashDaywiseTransportPaymentReport = _data["cashDaywiseTransportPaymentReport"] ? CashDaywiseTransportPaymentReport.fromJS(_data["cashDaywiseTransportPaymentReport"]) : undefined;
      this.chequeDaywiseTransportPaymentReport = _data["chequeDaywiseTransportPaymentReport"] ? ChequeDaywiseTransportPaymentReport.fromJS(_data["chequeDaywiseTransportPaymentReport"]) : undefined;
      this.ddDaywiseTransportPaymentReport = _data["ddDaywiseTransportPaymentReport"] ? DDDaywiseTransportPaymentReport.fromJS(_data["ddDaywiseTransportPaymentReport"]) : undefined;
      this.upiPaymentDaywiseTransportPaymentReport = _data["upiPaymentDaywiseTransportPaymentReport"] ? UpiPaymentDaywiseTransportPaymentReport.fromJS(_data["upiPaymentDaywiseTransportPaymentReport"]) : undefined;
      this.netBankingDaywiseTransportPaymentReport = _data["netBankingDaywiseTransportPaymentReport"] ? NetBankingTransportDaywisePaymentReport.fromJS(_data["netBankingDaywiseTransportPaymentReport"]) : undefined;
      this.cardDaywiseTransportPaymentReport = _data["cardDaywiseTransportPaymentReport"] ? CardDaywiseTransportPaymentReport.fromJS(_data["cardDaywiseTransportPaymentReport"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentReportDaywiseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["cashDaywiseTransportPaymentReport"] = this.cashDaywiseTransportPaymentReport ? this.cashDaywiseTransportPaymentReport.toJSON() : undefined;
    data["chequeDaywiseTransportPaymentReport"] = this.chequeDaywiseTransportPaymentReport ? this.chequeDaywiseTransportPaymentReport.toJSON() : undefined;
    data["ddDaywiseTransportPaymentReport"] = this.ddDaywiseTransportPaymentReport ? this.ddDaywiseTransportPaymentReport.toJSON() : undefined;
    data["upiPaymentDaywiseTransportPaymentReport"] = this.upiPaymentDaywiseTransportPaymentReport ? this.upiPaymentDaywiseTransportPaymentReport.toJSON() : undefined;
    data["netBankingDaywiseTransportPaymentReport"] = this.netBankingDaywiseTransportPaymentReport ? this.netBankingDaywiseTransportPaymentReport.toJSON() : undefined;
    data["cardDaywiseTransportPaymentReport"] = this.cardDaywiseTransportPaymentReport ? this.cardDaywiseTransportPaymentReport.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentReportDaywiseDto();
    result.init(json);
    return result;
  }
}
class CashDaywiseTransportPaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["cashDaywiseTransportPaymentReportList"])) {
        this.cashDaywiseTransportPaymentReportList = [];
        for (let item of _data["cashDaywiseTransportPaymentReportList"]) this.cashDaywiseTransportPaymentReportList.push(DaywiseTransportPaymentReport.fromJS(item));
      }
      this.cashDaywiseTransportPaymentReportTotal = _data["cashDaywiseTransportPaymentReportTotal"] ? DaywiseTransportPaymentReportTotal.fromJS(_data["cashDaywiseTransportPaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CashDaywiseTransportPaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.cashDaywiseTransportPaymentReportList)) {
      data["cashDaywiseTransportPaymentReportList"] = [];
      for (let item of this.cashDaywiseTransportPaymentReportList) data["cashDaywiseTransportPaymentReportList"].push(item.toJSON());
    }
    data["cashDaywiseTransportPaymentReportTotal"] = this.cashDaywiseTransportPaymentReportTotal ? this.cashDaywiseTransportPaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CashDaywiseTransportPaymentReport();
    result.init(json);
    return result;
  }
}
class DaywiseTransportPaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.fullName = _data["fullName"];
      this.userType = _data["userType"];
      this.chequeNumber = _data["chequeNumber"];
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.chequeBank = _data["chequeBank"];
      this.academicYearName = _data["academicYearName"];
      this.paymentAmount = _data["paymentAmount"];
      this.invoiceNumber = _data["invoiceNumber"];
      this.transactionDate = _data["transactionDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["transactionDate"].toString()) : undefined;
      this.paymentMode = _data["paymentMode"];
      this.chequeUnclearedAmount = _data["chequeUnclearedAmount"];
      this.transactionBy = _data["transactionBy"];
      this.transactionId = _data["transactionId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DaywiseTransportPaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["fullName"] = this.fullName;
    data["userType"] = this.userType;
    data["chequeNumber"] = this.chequeNumber;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["chequeBank"] = this.chequeBank;
    data["academicYearName"] = this.academicYearName;
    data["paymentAmount"] = this.paymentAmount;
    data["invoiceNumber"] = this.invoiceNumber;
    data["transactionDate"] = this.transactionDate ? this.transactionDate.toISOString() : undefined;
    data["paymentMode"] = this.paymentMode;
    data["chequeUnclearedAmount"] = this.chequeUnclearedAmount;
    data["transactionBy"] = this.transactionBy;
    data["transactionId"] = this.transactionId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DaywiseTransportPaymentReport();
    result.init(json);
    return result;
  }
}
class DaywiseTransportPaymentReportTotal {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.totalPaymentAmount = _data["totalPaymentAmount"];
      this.totalChequeUnclearedAmount = _data["totalChequeUnclearedAmount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DaywiseTransportPaymentReportTotal();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["totalPaymentAmount"] = this.totalPaymentAmount;
    data["totalChequeUnclearedAmount"] = this.totalChequeUnclearedAmount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DaywiseTransportPaymentReportTotal();
    result.init(json);
    return result;
  }
}
class ChequeDaywiseTransportPaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["chequeDaywiseTransportPaymentReportList"])) {
        this.chequeDaywiseTransportPaymentReportList = [];
        for (let item of _data["chequeDaywiseTransportPaymentReportList"]) this.chequeDaywiseTransportPaymentReportList.push(DaywiseTransportPaymentReport.fromJS(item));
      }
      this.chequeDaywiseTransportPaymentReportTotal = _data["chequeDaywiseTransportPaymentReportTotal"] ? DaywiseTransportPaymentReportTotal.fromJS(_data["chequeDaywiseTransportPaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ChequeDaywiseTransportPaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.chequeDaywiseTransportPaymentReportList)) {
      data["chequeDaywiseTransportPaymentReportList"] = [];
      for (let item of this.chequeDaywiseTransportPaymentReportList) data["chequeDaywiseTransportPaymentReportList"].push(item.toJSON());
    }
    data["chequeDaywiseTransportPaymentReportTotal"] = this.chequeDaywiseTransportPaymentReportTotal ? this.chequeDaywiseTransportPaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ChequeDaywiseTransportPaymentReport();
    result.init(json);
    return result;
  }
}
class DDDaywiseTransportPaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["ddDaywiseTransportPaymentReportList"])) {
        this.ddDaywiseTransportPaymentReportList = [];
        for (let item of _data["ddDaywiseTransportPaymentReportList"]) this.ddDaywiseTransportPaymentReportList.push(DaywiseTransportPaymentReport.fromJS(item));
      }
      this.ddDaywiseTransportPaymentReportTotal = _data["ddDaywiseTransportPaymentReportTotal"] ? DaywiseTransportPaymentReportTotal.fromJS(_data["ddDaywiseTransportPaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DDDaywiseTransportPaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.ddDaywiseTransportPaymentReportList)) {
      data["ddDaywiseTransportPaymentReportList"] = [];
      for (let item of this.ddDaywiseTransportPaymentReportList) data["ddDaywiseTransportPaymentReportList"].push(item.toJSON());
    }
    data["ddDaywiseTransportPaymentReportTotal"] = this.ddDaywiseTransportPaymentReportTotal ? this.ddDaywiseTransportPaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DDDaywiseTransportPaymentReport();
    result.init(json);
    return result;
  }
}
class UpiPaymentDaywiseTransportPaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["upiPaymentDaywiseTransportPaymentReportList"])) {
        this.upiPaymentDaywiseTransportPaymentReportList = [];
        for (let item of _data["upiPaymentDaywiseTransportPaymentReportList"]) this.upiPaymentDaywiseTransportPaymentReportList.push(DaywiseTransportPaymentReport.fromJS(item));
      }
      this.upiPaymentDaywiseTransportPaymentReportTotal = _data["upiPaymentDaywiseTransportPaymentReportTotal"] ? DaywiseTransportPaymentReportTotal.fromJS(_data["upiPaymentDaywiseTransportPaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new UpiPaymentDaywiseTransportPaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.upiPaymentDaywiseTransportPaymentReportList)) {
      data["upiPaymentDaywiseTransportPaymentReportList"] = [];
      for (let item of this.upiPaymentDaywiseTransportPaymentReportList) data["upiPaymentDaywiseTransportPaymentReportList"].push(item.toJSON());
    }
    data["upiPaymentDaywiseTransportPaymentReportTotal"] = this.upiPaymentDaywiseTransportPaymentReportTotal ? this.upiPaymentDaywiseTransportPaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new UpiPaymentDaywiseTransportPaymentReport();
    result.init(json);
    return result;
  }
}
class NetBankingTransportDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["netBankingDaywiseTransportPaymentReportList"])) {
        this.netBankingDaywiseTransportPaymentReportList = [];
        for (let item of _data["netBankingDaywiseTransportPaymentReportList"]) this.netBankingDaywiseTransportPaymentReportList.push(DaywiseTransportPaymentReport.fromJS(item));
      }
      this.netBankingDaywiseTransportPaymentReportTotal = _data["netBankingDaywiseTransportPaymentReportTotal"] ? DaywiseTransportPaymentReportTotal.fromJS(_data["netBankingDaywiseTransportPaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new NetBankingTransportDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.netBankingDaywiseTransportPaymentReportList)) {
      data["netBankingDaywiseTransportPaymentReportList"] = [];
      for (let item of this.netBankingDaywiseTransportPaymentReportList) data["netBankingDaywiseTransportPaymentReportList"].push(item.toJSON());
    }
    data["netBankingDaywiseTransportPaymentReportTotal"] = this.netBankingDaywiseTransportPaymentReportTotal ? this.netBankingDaywiseTransportPaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new NetBankingTransportDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class CardDaywiseTransportPaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["cardDaywiseTransportPaymentReportList"])) {
        this.cardDaywiseTransportPaymentReportList = [];
        for (let item of _data["cardDaywiseTransportPaymentReportList"]) this.cardDaywiseTransportPaymentReportList.push(DaywiseTransportPaymentReport.fromJS(item));
      }
      this.cardDaywiseTransportPaymentReportTotal = _data["cardDaywiseTransportPaymentReportTotal"] ? DaywiseTransportPaymentReportTotal.fromJS(_data["cardDaywiseTransportPaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CardDaywiseTransportPaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.cardDaywiseTransportPaymentReportList)) {
      data["cardDaywiseTransportPaymentReportList"] = [];
      for (let item of this.cardDaywiseTransportPaymentReportList) data["cardDaywiseTransportPaymentReportList"].push(item.toJSON());
    }
    data["cardDaywiseTransportPaymentReportTotal"] = this.cardDaywiseTransportPaymentReportTotal ? this.cardDaywiseTransportPaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CardDaywiseTransportPaymentReport();
    result.init(json);
    return result;
  }
}
class DaywiseTransportPaymentReportRequest {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.startDate = _data["startDate"] ? SchoolNgbDateModel.fromJS(_data["startDate"]) : undefined;
      this.endDate = _data["endDate"] ? SchoolNgbDateModel.fromJS(_data["endDate"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DaywiseTransportPaymentReportRequest();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["startDate"] = this.startDate ? this.startDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DaywiseTransportPaymentReportRequest();
    result.init(json);
    return result;
  }
}
class TeachingLoadAnalysisResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["teacherPercentageList"])) {
        this.teacherPercentageList = [];
        for (let item of _data["teacherPercentageList"]) this.teacherPercentageList.push(TeachingLoadAnalysisDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeachingLoadAnalysisResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.teacherPercentageList)) {
      data["teacherPercentageList"] = [];
      for (let item of this.teacherPercentageList) data["teacherPercentageList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeachingLoadAnalysisResponseDto();
    result.init(json);
    return result;
  }
}
class TeachingLoadAnalysisDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.teacherId = _data["teacherId"];
      this.fullName = _data["fullName"];
      this.classTimeTableId = _data["classTimeTableId"];
      this.classTimeTableCount = _data["classTimeTableCount"];
      this.lecturePerWeek = _data["lecturePerWeek"];
      this.teacherPercentage = _data["teacherPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeachingLoadAnalysisDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["teacherId"] = this.teacherId;
    data["fullName"] = this.fullName;
    data["classTimeTableId"] = this.classTimeTableId;
    data["classTimeTableCount"] = this.classTimeTableCount;
    data["lecturePerWeek"] = this.lecturePerWeek;
    data["teacherPercentage"] = this.teacherPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeachingLoadAnalysisDto();
    result.init(json);
    return result;
  }
}
class TeacherSubjectMappingUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["teacherSubjectExistResposeList"])) {
        this.teacherSubjectExistResposeList = [];
        for (let item of _data["teacherSubjectExistResposeList"]) this.teacherSubjectExistResposeList.push(TeacherSubjectExistResposeDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherSubjectMappingUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.teacherSubjectExistResposeList)) {
      data["teacherSubjectExistResposeList"] = [];
      for (let item of this.teacherSubjectExistResposeList) data["teacherSubjectExistResposeList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherSubjectMappingUpsertDto();
    result.init(json);
    return result;
  }
}
class TeacherSubjectExistResposeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.subjectName = _data["subjectName"];
      this.existsInClassTimeTable = _data["existsInClassTimeTable"];
      this.success = _data["success"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherSubjectExistResposeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["subjectName"] = this.subjectName;
    data["existsInClassTimeTable"] = this.existsInClassTimeTable;
    data["success"] = this.success;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherSubjectExistResposeDto();
    result.init(json);
    return result;
  }
}
class TeacherSubjectMappingDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.teacherSubjectMappingId = _data["teacherSubjectMappingId"];
      this.academicYearId = _data["academicYearId"];
      this.teacherId = _data["teacherId"];
      this.fullName = _data["fullName"];
      this.lecturePerWeek = _data["lecturePerWeek"];
      this.subjectMasterIds = _data["subjectMasterIds"];
      this.userId = _data["userId"];
      if (Array.isArray(_data["teacherSubjectList"])) {
        this.teacherSubjectList = [];
        for (let item of _data["teacherSubjectList"]) this.teacherSubjectList.push(item);
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherSubjectMappingDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["teacherSubjectMappingId"] = this.teacherSubjectMappingId;
    data["academicYearId"] = this.academicYearId;
    data["teacherId"] = this.teacherId;
    data["fullName"] = this.fullName;
    data["lecturePerWeek"] = this.lecturePerWeek;
    data["subjectMasterIds"] = this.subjectMasterIds;
    data["userId"] = this.userId;
    if (Array.isArray(this.teacherSubjectList)) {
      data["teacherSubjectList"] = [];
      for (let item of this.teacherSubjectList) data["teacherSubjectList"].push(item);
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherSubjectMappingDto();
    result.init(json);
    return result;
  }
}
class TeacherOneDayLectureResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["teacherOneDayLectureList"])) {
        this.teacherOneDayLectureList = [];
        for (let item of _data["teacherOneDayLectureList"]) this.teacherOneDayLectureList.push(TeacherOneDayLectureDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherOneDayLectureResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.teacherOneDayLectureList)) {
      data["teacherOneDayLectureList"] = [];
      for (let item of this.teacherOneDayLectureList) data["teacherOneDayLectureList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherOneDayLectureResponseDto();
    result.init(json);
    return result;
  }
}
class TeacherOneDayLectureDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.teacherId = _data["teacherId"];
      this.teacherName = _data["teacherName"];
      this.startTime = _data["startTime"];
      this.endTime = _data["endTime"];
      this.gradeId = _data["gradeId"];
      this.gradeName = _data["gradeName"];
      this.divisionId = _data["divisionId"];
      this.divisionName = _data["divisionName"];
      this.dayNo = _data["dayNo"];
      this.subjectId = _data["subjectId"];
      this.subjectName = _data["subjectName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherOneDayLectureDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["teacherId"] = this.teacherId;
    data["teacherName"] = this.teacherName;
    data["startTime"] = this.startTime;
    data["endTime"] = this.endTime;
    data["gradeId"] = this.gradeId;
    data["gradeName"] = this.gradeName;
    data["divisionId"] = this.divisionId;
    data["divisionName"] = this.divisionName;
    data["dayNo"] = this.dayNo;
    data["subjectId"] = this.subjectId;
    data["subjectName"] = this.subjectName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherOneDayLectureDto();
    result.init(json);
    return result;
  }
}
class TeacherDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.teacherId = _data["teacherId"];
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.teacherFullName = _data["teacherFullName"];
      this.address = _data["address"];
      this.gender = _data["gender"];
      this.contactNumber = _data["contactNumber"];
      this.mobileNumber = _data["mobileNumber"];
      this.emailId = _data["emailId"];
      this.addressLine1 = _data["addressLine1"];
      this.addressLine2 = _data["addressLine2"];
      this.talukaId = _data["talukaId"];
      this.districtId = _data["districtId"];
      this.stateId = _data["stateId"];
      this.talukaName = _data["talukaName"];
      this.districtName = _data["districtName"];
      this.stateName = _data["stateName"];
      this.countryName = _data["countryName"];
      this.adharNumber = _data["adharNumber"];
      this.countryId = _data["countryId"];
      this.zipCode = _data["zipCode"];
      this.education = _data["education"];
      this.bloodGroup = _data["bloodGroup"];
      this.profileImageURL = _data["profileImageURL"];
      this.userId = _data["userId"];
      this.ngbBirthDate = _data["ngbBirthDate"] ? SchoolNgbDateModel.fromJS(_data["ngbBirthDate"]) : undefined;
      this.birthDate = _data["birthDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["birthDate"].toString()) : undefined;
      this.profileBase64Image = _data["profileBase64Image"];
      this.profileImageContentType = _data["profileImageContentType"];
      this.isAppAccess = _data["isAppAccess"];
      this.appAccessMobileNo = _data["appAccessMobileNo"];
      this.appAccessOneTimePassword = _data["appAccessOneTimePassword"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["teacherId"] = this.teacherId;
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["teacherFullName"] = this.teacherFullName;
    data["address"] = this.address;
    data["gender"] = this.gender;
    data["contactNumber"] = this.contactNumber;
    data["mobileNumber"] = this.mobileNumber;
    data["emailId"] = this.emailId;
    data["addressLine1"] = this.addressLine1;
    data["addressLine2"] = this.addressLine2;
    data["talukaId"] = this.talukaId;
    data["districtId"] = this.districtId;
    data["stateId"] = this.stateId;
    data["talukaName"] = this.talukaName;
    data["districtName"] = this.districtName;
    data["stateName"] = this.stateName;
    data["countryName"] = this.countryName;
    data["adharNumber"] = this.adharNumber;
    data["countryId"] = this.countryId;
    data["zipCode"] = this.zipCode;
    data["education"] = this.education;
    data["bloodGroup"] = this.bloodGroup;
    data["profileImageURL"] = this.profileImageURL;
    data["userId"] = this.userId;
    data["ngbBirthDate"] = this.ngbBirthDate ? this.ngbBirthDate.toJSON() : undefined;
    data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : undefined;
    data["profileBase64Image"] = this.profileBase64Image;
    data["profileImageContentType"] = this.profileImageContentType;
    data["isAppAccess"] = this.isAppAccess;
    data["appAccessMobileNo"] = this.appAccessMobileNo;
    data["appAccessOneTimePassword"] = this.appAccessOneTimePassword;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherDto();
    result.init(json);
    return result;
  }
}
class TeacherDeleteRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
      this.teacherGradeDivisionMappingCount = _data["teacherGradeDivisionMappingCount"];
      this.teacherSubjectMappingCount = _data["teacherSubjectMappingCount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherDeleteRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    data["teacherGradeDivisionMappingCount"] = this.teacherGradeDivisionMappingCount;
    data["teacherSubjectMappingCount"] = this.teacherSubjectMappingCount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherDeleteRespose();
    result.init(json);
    return result;
  }
}
class TeacherGradeDivisionMappingDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.teacherGradeDivisionMappingId = _data["teacherGradeDivisionMappingId"];
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.className = _data["className"];
      this.teacherIds = _data["teacherIds"];
      this.userId = _data["userId"];
      if (Array.isArray(_data["teacherList"])) {
        this.teacherList = [];
        for (let item of _data["teacherList"]) this.teacherList.push(item);
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherGradeDivisionMappingDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["teacherGradeDivisionMappingId"] = this.teacherGradeDivisionMappingId;
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["className"] = this.className;
    data["teacherIds"] = this.teacherIds;
    data["userId"] = this.userId;
    if (Array.isArray(this.teacherList)) {
      data["teacherList"] = [];
      for (let item of this.teacherList) data["teacherList"].push(item);
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherGradeDivisionMappingDto();
    result.init(json);
    return result;
  }
}
class TeacherCountPerSubjectAnalyzerResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["getTeacherCountPerSubjects"])) {
        this.getTeacherCountPerSubjects = [];
        for (let item of _data["getTeacherCountPerSubjects"]) this.getTeacherCountPerSubjects.push(TeacherCountPerSubjectAnalyzerDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherCountPerSubjectAnalyzerResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.getTeacherCountPerSubjects)) {
      data["getTeacherCountPerSubjects"] = [];
      for (let item of this.getTeacherCountPerSubjects) data["getTeacherCountPerSubjects"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherCountPerSubjectAnalyzerResponseDto();
    result.init(json);
    return result;
  }
}
class TeacherCountPerSubjectAnalyzerDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.subjectName = _data["subjectName"];
      this.teacherCount = _data["teacherCount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherCountPerSubjectAnalyzerDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["subjectName"] = this.subjectName;
    data["teacherCount"] = this.teacherCount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherCountPerSubjectAnalyzerDto();
    result.init(json);
    return result;
  }
}
class StudentAttendanceGridResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["studentAttendancesList"])) {
        this.studentAttendancesList = [];
        for (let item of _data["studentAttendancesList"]) this.studentAttendancesList.push(StudentAttendanceGridDto.fromJS(item));
      }
      this.isSchoolHoliday = _data["isSchoolHoliday"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentAttendanceGridResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.studentAttendancesList)) {
      data["studentAttendancesList"] = [];
      for (let item of this.studentAttendancesList) data["studentAttendancesList"].push(item.toJSON());
    }
    data["isSchoolHoliday"] = this.isSchoolHoliday;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentAttendanceGridResponseDto();
    result.init(json);
    return result;
  }
}
class StudentAttendanceGridDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.rollNumber = _data["rollNumber"];
      this.fullName = _data["fullName"];
      this.statusId = _data["statusId"];
      this.reason = _data["reason"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentAttendanceGridDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["rollNumber"] = this.rollNumber;
    data["fullName"] = this.fullName;
    data["statusId"] = this.statusId;
    data["reason"] = this.reason;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentAttendanceGridDto();
    result.init(json);
    return result;
  }
}
class StudentAttendanceRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.teacherId = _data["teacherId"];
      this.attendanceDate = _data["attendanceDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["attendanceDate"].toString()) : undefined;
      this.ngbAttendanceDate = _data["ngbAttendanceDate"] ? SchoolNgbDateModel.fromJS(_data["ngbAttendanceDate"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentAttendanceRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["teacherId"] = this.teacherId;
    data["attendanceDate"] = this.attendanceDate ? this.attendanceDate.toISOString() : undefined;
    data["ngbAttendanceDate"] = this.ngbAttendanceDate ? this.ngbAttendanceDate.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentAttendanceRequestDto();
    result.init(json);
    return result;
  }
}
class StudentAttendanceUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.attendanceDate = _data["attendanceDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["attendanceDate"].toString()) : undefined;
      this.ngbAttendanceDate = _data["ngbAttendanceDate"] ? SchoolNgbDateModel.fromJS(_data["ngbAttendanceDate"]) : undefined;
      this.userId = _data["userId"];
      if (Array.isArray(_data["studentAttendanceUpsertLists"])) {
        this.studentAttendanceUpsertLists = [];
        for (let item of _data["studentAttendanceUpsertLists"]) this.studentAttendanceUpsertLists.push(StudentAttendanceUpsertListDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentAttendanceUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["attendanceDate"] = this.attendanceDate ? this.attendanceDate.toISOString() : undefined;
    data["ngbAttendanceDate"] = this.ngbAttendanceDate ? this.ngbAttendanceDate.toJSON() : undefined;
    data["userId"] = this.userId;
    if (Array.isArray(this.studentAttendanceUpsertLists)) {
      data["studentAttendanceUpsertLists"] = [];
      for (let item of this.studentAttendanceUpsertLists) data["studentAttendanceUpsertLists"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentAttendanceUpsertDto();
    result.init(json);
    return result;
  }
}
class StudentAttendanceUpsertListDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.statusId = _data["statusId"];
      this.reason = _data["reason"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentAttendanceUpsertListDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["statusId"] = this.statusId;
    data["reason"] = this.reason;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentAttendanceUpsertListDto();
    result.init(json);
    return result;
  }
}
class ClassTeacherGradeDivisionListDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["classTeacherGradeDivisionList"])) {
        this.classTeacherGradeDivisionList = [];
        for (let item of _data["classTeacherGradeDivisionList"]) this.classTeacherGradeDivisionList.push(SchoolGradeDivisionMatrixDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClassTeacherGradeDivisionListDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.classTeacherGradeDivisionList)) {
      data["classTeacherGradeDivisionList"] = [];
      for (let item of this.classTeacherGradeDivisionList) data["classTeacherGradeDivisionList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClassTeacherGradeDivisionListDto();
    result.init(json);
    return result;
  }
}
class SchoolGradeDivisionMatrixDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolGradeDivisionMatrixId = _data["schoolGradeDivisionMatrixId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.className = _data["className"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolGradeDivisionMatrixDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolGradeDivisionMatrixId"] = this.schoolGradeDivisionMatrixId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["className"] = this.className;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolGradeDivisionMatrixDto();
    result.init(json);
    return result;
  }
}
class TeacherClassSubjectResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["lstSubject"])) {
        this.lstSubject = [];
        for (let item of _data["lstSubject"]) this.lstSubject.push(TeacherClassSubjectDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherClassSubjectResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.lstSubject)) {
      data["lstSubject"] = [];
      for (let item of this.lstSubject) data["lstSubject"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherClassSubjectResponseDto();
    result.init(json);
    return result;
  }
}
class TeacherClassSubjectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.subjectMasterId = _data["subjectMasterId"];
      this.subjectName = _data["subjectName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherClassSubjectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["subjectMasterId"] = this.subjectMasterId;
    data["subjectName"] = this.subjectName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherClassSubjectDto();
    result.init(json);
    return result;
  }
}
class TeacherClassSubjectRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.teacherId = _data["teacherId"];
      this.classId = _data["classId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherClassSubjectRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["teacherId"] = this.teacherId;
    data["classId"] = this.classId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherClassSubjectRequestDto();
    result.init(json);
    return result;
  }
}
class SchoolDetailMobileDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolId = _data["schoolId"];
      this.logoUrl = _data["logoUrl"];
      this.schoolName = _data["schoolName"];
      this.academicYearId = _data["academicYearId"];
      this.academicYearStartMonth = _data["academicYearStartMonth"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["academicYearStartMonth"].toString()) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolDetailMobileDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolId"] = this.schoolId;
    data["logoUrl"] = this.logoUrl;
    data["schoolName"] = this.schoolName;
    data["academicYearId"] = this.academicYearId;
    data["academicYearStartMonth"] = this.academicYearStartMonth ? this.academicYearStartMonth.toISOString() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolDetailMobileDto();
    result.init(json);
    return result;
  }
}
class HomeworkListDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["homeworkList"])) {
        this.homeworkList = [];
        for (let item of _data["homeworkList"]) this.homeworkList.push(HomeworkDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new HomeworkListDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.homeworkList)) {
      data["homeworkList"] = [];
      for (let item of this.homeworkList) data["homeworkList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new HomeworkListDto();
    result.init(json);
    return result;
  }
}
class HomeworkDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.homeworkId = _data["homeworkId"];
      this.homeworkDescription = _data["homeworkDescription"];
      this.classId = _data["classId"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.ngbEndDate = _data["ngbEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEndDate"]) : undefined;
      this.status = _data["status"];
      this.isPublished = _data["isPublished"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.homeworkTitle = _data["homeworkTitle"];
      this.subjectName = _data["subjectName"];
      this.createdBy = _data["createdBy"];
      this.modifiedBy = _data["modifiedBy"];
      this.createdDate = _data["createdDate"];
      this.modifiedDate = _data["modifiedDate"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new HomeworkDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["homeworkId"] = this.homeworkId;
    data["homeworkDescription"] = this.homeworkDescription;
    data["classId"] = this.classId;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["ngbEndDate"] = this.ngbEndDate ? this.ngbEndDate.toJSON() : undefined;
    data["status"] = this.status;
    data["isPublished"] = this.isPublished;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["homeworkTitle"] = this.homeworkTitle;
    data["subjectName"] = this.subjectName;
    data["createdBy"] = this.createdBy;
    data["modifiedBy"] = this.modifiedBy;
    data["createdDate"] = this.createdDate;
    data["modifiedDate"] = this.modifiedDate;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new HomeworkDto();
    result.init(json);
    return result;
  }
}
class PublishUnpublishHomeworkDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.homeworkId = _data["homeworkId"];
      this.isPublished = _data["isPublished"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PublishUnpublishHomeworkDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["homeworkId"] = this.homeworkId;
    data["isPublished"] = this.isPublished;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PublishUnpublishHomeworkDto();
    result.init(json);
    return result;
  }
}
class HomeworkUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.homeworkId = _data["homeworkId"];
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.classId = _data["classId"];
      this.subjectId = _data["subjectId"];
      this.subjectName = _data["subjectName"];
      this.homeworkTitle = _data["homeworkTitle"];
      this.homeworkDescription = _data["homeworkDescription"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.ngbEndDate = _data["ngbEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEndDate"]) : undefined;
      this.isPublished = _data["isPublished"];
      this.userId = _data["userId"];
      this.fileType = _data["fileType"];
      if (Array.isArray(_data["homeworkTextFileArray"])) {
        this.homeworkTextFileArray = [];
        for (let item of _data["homeworkTextFileArray"]) this.homeworkTextFileArray.push(HomeworkFileDto.fromJS(item));
      }
      if (Array.isArray(_data["homeworkMediaFileArray"])) {
        this.homeworkMediaFileArray = [];
        for (let item of _data["homeworkMediaFileArray"]) this.homeworkMediaFileArray.push(HomeworkFileDto.fromJS(item));
      }
      if (Array.isArray(_data["mediaVideoText"])) {
        this.mediaVideoText = [];
        for (let item of _data["mediaVideoText"]) this.mediaVideoText.push(HomeworkMediaContentDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new HomeworkUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["homeworkId"] = this.homeworkId;
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["classId"] = this.classId;
    data["subjectId"] = this.subjectId;
    data["subjectName"] = this.subjectName;
    data["homeworkTitle"] = this.homeworkTitle;
    data["homeworkDescription"] = this.homeworkDescription;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["ngbEndDate"] = this.ngbEndDate ? this.ngbEndDate.toJSON() : undefined;
    data["isPublished"] = this.isPublished;
    data["userId"] = this.userId;
    data["fileType"] = this.fileType;
    if (Array.isArray(this.homeworkTextFileArray)) {
      data["homeworkTextFileArray"] = [];
      for (let item of this.homeworkTextFileArray) data["homeworkTextFileArray"].push(item.toJSON());
    }
    if (Array.isArray(this.homeworkMediaFileArray)) {
      data["homeworkMediaFileArray"] = [];
      for (let item of this.homeworkMediaFileArray) data["homeworkMediaFileArray"].push(item.toJSON());
    }
    if (Array.isArray(this.mediaVideoText)) {
      data["mediaVideoText"] = [];
      for (let item of this.mediaVideoText) data["mediaVideoText"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new HomeworkUpsertDto();
    result.init(json);
    return result;
  }
}
var MediaContentType;
(function (MediaContentType) {
  MediaContentType[MediaContentType["IMAGE"] = 1] = "IMAGE";
  MediaContentType[MediaContentType["VIDEO"] = 2] = "VIDEO";
})(MediaContentType || (MediaContentType = {}));
class HomeworkFileDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.base64Image = _data["base64Image"];
      this.imageContentType = _data["imageContentType"];
      this.fileName = _data["fileName"];
      this.fileType = _data["fileType"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new HomeworkFileDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["base64Image"] = this.base64Image;
    data["imageContentType"] = this.imageContentType;
    data["fileName"] = this.fileName;
    data["fileType"] = this.fileType;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new HomeworkFileDto();
    result.init(json);
    return result;
  }
}
class HomeworkMediaContentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.contentUrl = _data["contentUrl"];
      this.fileName = _data["fileName"];
      this.fileType = _data["fileType"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new HomeworkMediaContentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["contentUrl"] = this.contentUrl;
    data["fileName"] = this.fileName;
    data["fileType"] = this.fileType;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new HomeworkMediaContentDto();
    result.init(json);
    return result;
  }
}
class NoticeUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.noticeId = _data["noticeId"];
      this.academicYearId = _data["academicYearId"];
      this.isImportant = _data["isImportant"];
      this.noticeToType = _data["noticeToType"];
      if (Array.isArray(_data["classId"])) {
        this.classId = [];
        for (let item of _data["classId"]) this.classId.push(item);
      }
      if (Array.isArray(_data["studentId"])) {
        this.studentId = [];
        for (let item of _data["studentId"]) this.studentId.push(item);
      }
      if (Array.isArray(_data["teacherId"])) {
        this.teacherId = [];
        for (let item of _data["teacherId"]) this.teacherId.push(item);
      }
      if (Array.isArray(_data["cabDriverId"])) {
        this.cabDriverId = [];
        for (let item of _data["cabDriverId"]) this.cabDriverId.push(item);
      }
      if (Array.isArray(_data["clerkId"])) {
        this.clerkId = [];
        for (let item of _data["clerkId"]) this.clerkId.push(item);
      }
      this.noticeTitle = _data["noticeTitle"];
      this.noticeDescription = _data["noticeDescription"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.ngbEndDate = _data["ngbEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEndDate"]) : undefined;
      this.isPublished = _data["isPublished"];
      this.userId = _data["userId"];
      this.fileType = _data["fileType"];
      if (Array.isArray(_data["noticeTextFileArray"])) {
        this.noticeTextFileArray = [];
        for (let item of _data["noticeTextFileArray"]) this.noticeTextFileArray.push(NoticeFileDto.fromJS(item));
      }
      if (Array.isArray(_data["videoText"])) {
        this.videoText = [];
        for (let item of _data["videoText"]) this.videoText.push(ProjectMediaContentDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new NoticeUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["noticeId"] = this.noticeId;
    data["academicYearId"] = this.academicYearId;
    data["isImportant"] = this.isImportant;
    data["noticeToType"] = this.noticeToType;
    if (Array.isArray(this.classId)) {
      data["classId"] = [];
      for (let item of this.classId) data["classId"].push(item);
    }
    if (Array.isArray(this.studentId)) {
      data["studentId"] = [];
      for (let item of this.studentId) data["studentId"].push(item);
    }
    if (Array.isArray(this.teacherId)) {
      data["teacherId"] = [];
      for (let item of this.teacherId) data["teacherId"].push(item);
    }
    if (Array.isArray(this.cabDriverId)) {
      data["cabDriverId"] = [];
      for (let item of this.cabDriverId) data["cabDriverId"].push(item);
    }
    if (Array.isArray(this.clerkId)) {
      data["clerkId"] = [];
      for (let item of this.clerkId) data["clerkId"].push(item);
    }
    data["noticeTitle"] = this.noticeTitle;
    data["noticeDescription"] = this.noticeDescription;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["ngbEndDate"] = this.ngbEndDate ? this.ngbEndDate.toJSON() : undefined;
    data["isPublished"] = this.isPublished;
    data["userId"] = this.userId;
    data["fileType"] = this.fileType;
    if (Array.isArray(this.noticeTextFileArray)) {
      data["noticeTextFileArray"] = [];
      for (let item of this.noticeTextFileArray) data["noticeTextFileArray"].push(item.toJSON());
    }
    if (Array.isArray(this.videoText)) {
      data["videoText"] = [];
      for (let item of this.videoText) data["videoText"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new NoticeUpsertDto();
    result.init(json);
    return result;
  }
}
var MediaContentType2;
(function (MediaContentType2) {
  MediaContentType2[MediaContentType2["IMAGE"] = 1] = "IMAGE";
  MediaContentType2[MediaContentType2["VIDEO"] = 2] = "VIDEO";
})(MediaContentType2 || (MediaContentType2 = {}));
class NoticeFileDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.base64Image = _data["base64Image"];
      this.imageContentType = _data["imageContentType"];
      this.fileName = _data["fileName"];
      this.fileType = _data["fileType"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new NoticeFileDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["base64Image"] = this.base64Image;
    data["imageContentType"] = this.imageContentType;
    data["fileName"] = this.fileName;
    data["fileType"] = this.fileType;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new NoticeFileDto();
    result.init(json);
    return result;
  }
}
class ProjectMediaContentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.contentUrl = _data["contentUrl"];
      this.fileName = _data["fileName"];
      this.fileType = _data["fileType"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ProjectMediaContentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["contentUrl"] = this.contentUrl;
    data["fileName"] = this.fileName;
    data["fileType"] = this.fileType;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ProjectMediaContentDto();
    result.init(json);
    return result;
  }
}
class PublishUnpublishNoticeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.noticeId = _data["noticeId"];
      this.isPublished = _data["isPublished"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PublishUnpublishNoticeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["noticeId"] = this.noticeId;
    data["isPublished"] = this.isPublished;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PublishUnpublishNoticeDto();
    result.init(json);
    return result;
  }
}
class NoticeListDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["noticeList"])) {
        this.noticeList = [];
        for (let item of _data["noticeList"]) this.noticeList.push(NoticeDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new NoticeListDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.noticeList)) {
      data["noticeList"] = [];
      for (let item of this.noticeList) data["noticeList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new NoticeListDto();
    result.init(json);
    return result;
  }
}
class NoticeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.noticeId = _data["noticeId"];
      this.noticeDescription = _data["noticeDescription"];
      this.noticeToType = _data["noticeToType"];
      this.noticeTo = _data["noticeTo"];
      this.isImportant = _data["isImportant"];
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.ngbEndDate = _data["ngbEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEndDate"]) : undefined;
      this.status = _data["status"];
      this.isPublished = _data["isPublished"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.noticeTitle = _data["noticeTitle"];
      this.createdBy = _data["createdBy"];
      this.modifiedBy = _data["modifiedBy"];
      this.createdDate = _data["createdDate"];
      this.modifiedDate = _data["modifiedDate"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new NoticeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["noticeId"] = this.noticeId;
    data["noticeDescription"] = this.noticeDescription;
    data["noticeToType"] = this.noticeToType;
    data["noticeTo"] = this.noticeTo;
    data["isImportant"] = this.isImportant;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["ngbEndDate"] = this.ngbEndDate ? this.ngbEndDate.toJSON() : undefined;
    data["status"] = this.status;
    data["isPublished"] = this.isPublished;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["noticeTitle"] = this.noticeTitle;
    data["createdBy"] = this.createdBy;
    data["modifiedBy"] = this.modifiedBy;
    data["createdDate"] = this.createdDate;
    data["modifiedDate"] = this.modifiedDate;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new NoticeDto();
    result.init(json);
    return result;
  }
}
class GalleryUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.galleryId = _data["galleryId"];
      this.academicYearId = _data["academicYearId"];
      this.galleryToType = _data["galleryToType"];
      if (Array.isArray(_data["classId"])) {
        this.classId = [];
        for (let item of _data["classId"]) this.classId.push(item);
      }
      if (Array.isArray(_data["studentId"])) {
        this.studentId = [];
        for (let item of _data["studentId"]) this.studentId.push(item);
      }
      if (Array.isArray(_data["teacherId"])) {
        this.teacherId = [];
        for (let item of _data["teacherId"]) this.teacherId.push(item);
      }
      if (Array.isArray(_data["cabDriverId"])) {
        this.cabDriverId = [];
        for (let item of _data["cabDriverId"]) this.cabDriverId.push(item);
      }
      if (Array.isArray(_data["clerkId"])) {
        this.clerkId = [];
        for (let item of _data["clerkId"]) this.clerkId.push(item);
      }
      this.galleryTitle = _data["galleryTitle"];
      this.description = _data["description"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.isPublished = _data["isPublished"];
      this.userId = _data["userId"];
      this.fileType = _data["fileType"];
      if (Array.isArray(_data["galleryTextFileArray"])) {
        this.galleryTextFileArray = [];
        for (let item of _data["galleryTextFileArray"]) this.galleryTextFileArray.push(GalleryFileDto.fromJS(item));
      }
      if (Array.isArray(_data["galleryVideoText"])) {
        this.galleryVideoText = [];
        for (let item of _data["galleryVideoText"]) this.galleryVideoText.push(GalleryMediaContentDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GalleryUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["galleryId"] = this.galleryId;
    data["academicYearId"] = this.academicYearId;
    data["galleryToType"] = this.galleryToType;
    if (Array.isArray(this.classId)) {
      data["classId"] = [];
      for (let item of this.classId) data["classId"].push(item);
    }
    if (Array.isArray(this.studentId)) {
      data["studentId"] = [];
      for (let item of this.studentId) data["studentId"].push(item);
    }
    if (Array.isArray(this.teacherId)) {
      data["teacherId"] = [];
      for (let item of this.teacherId) data["teacherId"].push(item);
    }
    if (Array.isArray(this.cabDriverId)) {
      data["cabDriverId"] = [];
      for (let item of this.cabDriverId) data["cabDriverId"].push(item);
    }
    if (Array.isArray(this.clerkId)) {
      data["clerkId"] = [];
      for (let item of this.clerkId) data["clerkId"].push(item);
    }
    data["galleryTitle"] = this.galleryTitle;
    data["description"] = this.description;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["isPublished"] = this.isPublished;
    data["userId"] = this.userId;
    data["fileType"] = this.fileType;
    if (Array.isArray(this.galleryTextFileArray)) {
      data["galleryTextFileArray"] = [];
      for (let item of this.galleryTextFileArray) data["galleryTextFileArray"].push(item.toJSON());
    }
    if (Array.isArray(this.galleryVideoText)) {
      data["galleryVideoText"] = [];
      for (let item of this.galleryVideoText) data["galleryVideoText"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GalleryUpsertDto();
    result.init(json);
    return result;
  }
}
var MediaContentType3;
(function (MediaContentType3) {
  MediaContentType3[MediaContentType3["IMAGE"] = 1] = "IMAGE";
  MediaContentType3[MediaContentType3["VIDEO"] = 2] = "VIDEO";
})(MediaContentType3 || (MediaContentType3 = {}));
class GalleryFileDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.base64Image = _data["base64Image"];
      this.imageContentType = _data["imageContentType"];
      this.fileName = _data["fileName"];
      this.fileType = _data["fileType"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GalleryFileDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["base64Image"] = this.base64Image;
    data["imageContentType"] = this.imageContentType;
    data["fileName"] = this.fileName;
    data["fileType"] = this.fileType;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GalleryFileDto();
    result.init(json);
    return result;
  }
}
class GalleryMediaContentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.contentUrl = _data["contentUrl"];
      this.fileName = _data["fileName"];
      this.fileType = _data["fileType"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GalleryMediaContentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["contentUrl"] = this.contentUrl;
    data["fileName"] = this.fileName;
    data["fileType"] = this.fileType;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GalleryMediaContentDto();
    result.init(json);
    return result;
  }
}
class PublishUnpublishGalleryDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.galleryId = _data["galleryId"];
      this.isPublished = _data["isPublished"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PublishUnpublishGalleryDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["galleryId"] = this.galleryId;
    data["isPublished"] = this.isPublished;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PublishUnpublishGalleryDto();
    result.init(json);
    return result;
  }
}
class GalleryListDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["galleryList"])) {
        this.galleryList = [];
        for (let item of _data["galleryList"]) this.galleryList.push(GalleryDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GalleryListDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.galleryList)) {
      data["galleryList"] = [];
      for (let item of this.galleryList) data["galleryList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GalleryListDto();
    result.init(json);
    return result;
  }
}
class GalleryDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.galleryId = _data["galleryId"];
      this.description = _data["description"];
      this.galleryToType = _data["galleryToType"];
      this.galleryTo = _data["galleryTo"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.status = _data["status"];
      this.isPublished = _data["isPublished"];
      this.galleryTitle = _data["galleryTitle"];
      this.createdBy = _data["createdBy"];
      this.modifiedBy = _data["modifiedBy"];
      this.createdDate = _data["createdDate"];
      this.modifiedDate = _data["modifiedDate"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GalleryDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["galleryId"] = this.galleryId;
    data["description"] = this.description;
    data["galleryToType"] = this.galleryToType;
    data["galleryTo"] = this.galleryTo;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["status"] = this.status;
    data["isPublished"] = this.isPublished;
    data["galleryTitle"] = this.galleryTitle;
    data["createdBy"] = this.createdBy;
    data["modifiedBy"] = this.modifiedBy;
    data["createdDate"] = this.createdDate;
    data["modifiedDate"] = this.modifiedDate;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GalleryDto();
    result.init(json);
    return result;
  }
}
class StudentTeacherAppResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["studentTeacherAppList"])) {
        this.studentTeacherAppList = [];
        for (let item of _data["studentTeacherAppList"]) this.studentTeacherAppList.push(StudentTeacherAppDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentTeacherAppResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.studentTeacherAppList)) {
      data["studentTeacherAppList"] = [];
      for (let item of this.studentTeacherAppList) data["studentTeacherAppList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentTeacherAppResponseDto();
    result.init(json);
    return result;
  }
}
class StudentTeacherAppDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentName = _data["studentName"];
      this.rollNumber = _data["rollNumber"];
      this.gender = _data["gender"];
      this.emergencyContactNumber = _data["emergencyContactNumber"];
      this.profileImageURL = _data["profileImageURL"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentTeacherAppDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentName"] = this.studentName;
    data["rollNumber"] = this.rollNumber;
    data["gender"] = this.gender;
    data["emergencyContactNumber"] = this.emergencyContactNumber;
    data["profileImageURL"] = this.profileImageURL;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentTeacherAppDto();
    result.init(json);
    return result;
  }
}
class ClassAttendanceMissingReportResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["classAttendanceMissingList"])) {
        this.classAttendanceMissingList = [];
        for (let item of _data["classAttendanceMissingList"]) this.classAttendanceMissingList.push(ClassAttendanceMissingReportDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClassAttendanceMissingReportResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.classAttendanceMissingList)) {
      data["classAttendanceMissingList"] = [];
      for (let item of this.classAttendanceMissingList) data["classAttendanceMissingList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClassAttendanceMissingReportResponseDto();
    result.init(json);
    return result;
  }
}
class ClassAttendanceMissingReportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.gradeName = _data["gradeName"];
      this.divisionId = _data["divisionId"];
      this.divisionName = _data["divisionName"];
      this.classId = _data["classId"];
      this.status = _data["status"];
      this.attendanceMissingDate = _data["attendanceMissingDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["attendanceMissingDate"].toString()) : undefined;
      this.ngbAttendanceMissingDate = _data["ngbAttendanceMissingDate"] ? SchoolNgbDateModel.fromJS(_data["ngbAttendanceMissingDate"]) : undefined;
      this.classTeacherId = _data["classTeacherId"];
      this.classTeacherName = _data["classTeacherName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClassAttendanceMissingReportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["gradeName"] = this.gradeName;
    data["divisionId"] = this.divisionId;
    data["divisionName"] = this.divisionName;
    data["classId"] = this.classId;
    data["status"] = this.status;
    data["attendanceMissingDate"] = this.attendanceMissingDate ? this.attendanceMissingDate.toISOString() : undefined;
    data["ngbAttendanceMissingDate"] = this.ngbAttendanceMissingDate ? this.ngbAttendanceMissingDate.toJSON() : undefined;
    data["classTeacherId"] = this.classTeacherId;
    data["classTeacherName"] = this.classTeacherName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClassAttendanceMissingReportDto();
    result.init(json);
    return result;
  }
}
class SchoolMonthEventResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["schoolMonthEventList"])) {
        this.schoolMonthEventList = [];
        for (let item of _data["schoolMonthEventList"]) this.schoolMonthEventList.push(SchoolMonthEventDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolMonthEventResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.schoolMonthEventList)) {
      data["schoolMonthEventList"] = [];
      for (let item of this.schoolMonthEventList) data["schoolMonthEventList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolMonthEventResponseDto();
    result.init(json);
    return result;
  }
}
class SchoolMonthEventDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolEventId = _data["schoolEventId"];
      this.academicYearId = _data["academicYearId"];
      this.classId = _data["classId"];
      this.gradeId = _data["gradeId"];
      this.gradeName = _data["gradeName"];
      this.divisionId = _data["divisionId"];
      this.divisionName = _data["divisionName"];
      this.eventTitle = _data["eventTitle"];
      this.eventDescription = _data["eventDescription"];
      this.eventFess = _data["eventFess"];
      this.eventVenue = _data["eventVenue"];
      this.eventCoordinator = _data["eventCoordinator"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.ngbEndDate = _data["ngbEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEndDate"]) : undefined;
      this.startTime = _data["startTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startTime"].toString()) : undefined;
      this.ngbStartTime = _data["ngbStartTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbStartTime"]) : undefined;
      this.endTime = _data["endTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endTime"].toString()) : undefined;
      this.ngbEndTime = _data["ngbEndTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbEndTime"]) : undefined;
      this.isCompulsory = _data["isCompulsory"];
      this.isPublished = _data["isPublished"];
      if (Array.isArray(_data["lstEventDetail"])) {
        this.lstEventDetail = [];
        for (let item of _data["lstEventDetail"]) this.lstEventDetail.push(OneMonthEventFileDetailsTeacherAppDto.fromJS(item));
      }
      if (Array.isArray(_data["lstEventDate"])) {
        this.lstEventDate = [];
        for (let item of _data["lstEventDate"]) this.lstEventDate.push(OneMonthEventDateTeacherAppDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolMonthEventDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolEventId"] = this.schoolEventId;
    data["academicYearId"] = this.academicYearId;
    data["classId"] = this.classId;
    data["gradeId"] = this.gradeId;
    data["gradeName"] = this.gradeName;
    data["divisionId"] = this.divisionId;
    data["divisionName"] = this.divisionName;
    data["eventTitle"] = this.eventTitle;
    data["eventDescription"] = this.eventDescription;
    data["eventFess"] = this.eventFess;
    data["eventVenue"] = this.eventVenue;
    data["eventCoordinator"] = this.eventCoordinator;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["ngbEndDate"] = this.ngbEndDate ? this.ngbEndDate.toJSON() : undefined;
    data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
    data["ngbStartTime"] = this.ngbStartTime ? this.ngbStartTime.toJSON() : undefined;
    data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined;
    data["ngbEndTime"] = this.ngbEndTime ? this.ngbEndTime.toJSON() : undefined;
    data["isCompulsory"] = this.isCompulsory;
    data["isPublished"] = this.isPublished;
    if (Array.isArray(this.lstEventDetail)) {
      data["lstEventDetail"] = [];
      for (let item of this.lstEventDetail) data["lstEventDetail"].push(item.toJSON());
    }
    if (Array.isArray(this.lstEventDate)) {
      data["lstEventDate"] = [];
      for (let item of this.lstEventDate) data["lstEventDate"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolMonthEventDto();
    result.init(json);
    return result;
  }
}
class OneMonthEventFileDetailsTeacherAppDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolEventId = _data["schoolEventId"];
      this.schoolEventDetailsId = _data["schoolEventDetailsId"];
      this.fileName = _data["fileName"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new OneMonthEventFileDetailsTeacherAppDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolEventId"] = this.schoolEventId;
    data["schoolEventDetailsId"] = this.schoolEventDetailsId;
    data["fileName"] = this.fileName;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new OneMonthEventFileDetailsTeacherAppDto();
    result.init(json);
    return result;
  }
}
class OneMonthEventDateTeacherAppDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolEventId = _data["schoolEventId"];
      this.eventStartDate = _data["eventStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["eventStartDate"].toString()) : undefined;
      this.eventEndDate = _data["eventEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["eventEndDate"].toString()) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new OneMonthEventDateTeacherAppDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolEventId"] = this.schoolEventId;
    data["eventStartDate"] = this.eventStartDate ? this.eventStartDate.toISOString() : undefined;
    data["eventEndDate"] = this.eventEndDate ? this.eventEndDate.toISOString() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new OneMonthEventDateTeacherAppDto();
    result.init(json);
    return result;
  }
}
class TeacherAttendanceHolidayResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["lstHoliday"])) {
        this.lstHoliday = [];
        for (let item of _data["lstHoliday"]) this.lstHoliday.push(TeacherAttendanceHolidayDto.fromJS(item));
      }
      if (Array.isArray(_data["lstWeeklyOff"])) {
        this.lstWeeklyOff = [];
        for (let item of _data["lstWeeklyOff"]) this.lstWeeklyOff.push(TeacherAttendanceWeeklyOffDto.fromJS(item));
      }
      if (Array.isArray(_data["lstVacation"])) {
        this.lstVacation = [];
        for (let item of _data["lstVacation"]) this.lstVacation.push(TeacherAttendanceVacationDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherAttendanceHolidayResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.lstHoliday)) {
      data["lstHoliday"] = [];
      for (let item of this.lstHoliday) data["lstHoliday"].push(item.toJSON());
    }
    if (Array.isArray(this.lstWeeklyOff)) {
      data["lstWeeklyOff"] = [];
      for (let item of this.lstWeeklyOff) data["lstWeeklyOff"].push(item.toJSON());
    }
    if (Array.isArray(this.lstVacation)) {
      data["lstVacation"] = [];
      for (let item of this.lstVacation) data["lstVacation"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherAttendanceHolidayResponseDto();
    result.init(json);
    return result;
  }
}
class TeacherAttendanceHolidayDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolHolidayId = _data["schoolHolidayId"];
      this.calendarDate = _data["calendarDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["calendarDate"].toString()) : undefined;
      this.holidayReason = _data["holidayReason"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherAttendanceHolidayDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolHolidayId"] = this.schoolHolidayId;
    data["calendarDate"] = this.calendarDate ? this.calendarDate.toISOString() : undefined;
    data["holidayReason"] = this.holidayReason;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherAttendanceHolidayDto();
    result.init(json);
    return result;
  }
}
class TeacherAttendanceWeeklyOffDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.weeklyOffId = _data["weeklyOffId"];
      this.dayNo = _data["dayNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherAttendanceWeeklyOffDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["weeklyOffId"] = this.weeklyOffId;
    data["dayNo"] = this.dayNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherAttendanceWeeklyOffDto();
    result.init(json);
    return result;
  }
}
class TeacherAttendanceVacationDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolVacationId = _data["schoolVacationId"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.vacationName = _data["vacationName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherAttendanceVacationDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolVacationId"] = this.schoolVacationId;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["vacationName"] = this.vacationName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherAttendanceVacationDto();
    result.init(json);
    return result;
  }
}
class SurveyDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.surveyId = _data["surveyId"];
      this.surveyTitle = _data["surveyTitle"];
      this.surveyToType = _data["surveyToType"];
      if (Array.isArray(_data["classId"])) {
        this.classId = [];
        for (let item of _data["classId"]) this.classId.push(item);
      }
      if (Array.isArray(_data["studentId"])) {
        this.studentId = [];
        for (let item of _data["studentId"]) this.studentId.push(item);
      }
      if (Array.isArray(_data["teacherId"])) {
        this.teacherId = [];
        for (let item of _data["teacherId"]) this.teacherId.push(item);
      }
      this.classTeacherId = _data["classTeacherId"];
      if (Array.isArray(_data["cabDriverId"])) {
        this.cabDriverId = [];
        for (let item of _data["cabDriverId"]) this.cabDriverId.push(item);
      }
      if (Array.isArray(_data["clerkId"])) {
        this.clerkId = [];
        for (let item of _data["clerkId"]) this.clerkId.push(item);
      }
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.ngbEndDate = _data["ngbEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEndDate"]) : undefined;
      this.status = _data["status"];
      this.isPublished = _data["isPublished"];
      this.isImportant = _data["isImportant"];
      this.surveyDescription = _data["surveyDescription"];
      this.createdBy = _data["createdBy"];
      this.modifiedBy = _data["modifiedBy"];
      this.createdDate = _data["createdDate"];
      this.modifiedDate = _data["modifiedDate"];
      this.userId = _data["userId"];
      if (Array.isArray(_data["surveyTextFileArray"])) {
        this.surveyTextFileArray = [];
        for (let item of _data["surveyTextFileArray"]) this.surveyTextFileArray.push(SurveyFileDto.fromJS(item));
      }
      if (Array.isArray(_data["surveyText"])) {
        this.surveyText = [];
        for (let item of _data["surveyText"]) this.surveyText.push(SurveyQuestionDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SurveyDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["surveyId"] = this.surveyId;
    data["surveyTitle"] = this.surveyTitle;
    data["surveyToType"] = this.surveyToType;
    if (Array.isArray(this.classId)) {
      data["classId"] = [];
      for (let item of this.classId) data["classId"].push(item);
    }
    if (Array.isArray(this.studentId)) {
      data["studentId"] = [];
      for (let item of this.studentId) data["studentId"].push(item);
    }
    if (Array.isArray(this.teacherId)) {
      data["teacherId"] = [];
      for (let item of this.teacherId) data["teacherId"].push(item);
    }
    data["classTeacherId"] = this.classTeacherId;
    if (Array.isArray(this.cabDriverId)) {
      data["cabDriverId"] = [];
      for (let item of this.cabDriverId) data["cabDriverId"].push(item);
    }
    if (Array.isArray(this.clerkId)) {
      data["clerkId"] = [];
      for (let item of this.clerkId) data["clerkId"].push(item);
    }
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["ngbEndDate"] = this.ngbEndDate ? this.ngbEndDate.toJSON() : undefined;
    data["status"] = this.status;
    data["isPublished"] = this.isPublished;
    data["isImportant"] = this.isImportant;
    data["surveyDescription"] = this.surveyDescription;
    data["createdBy"] = this.createdBy;
    data["modifiedBy"] = this.modifiedBy;
    data["createdDate"] = this.createdDate;
    data["modifiedDate"] = this.modifiedDate;
    data["userId"] = this.userId;
    if (Array.isArray(this.surveyTextFileArray)) {
      data["surveyTextFileArray"] = [];
      for (let item of this.surveyTextFileArray) data["surveyTextFileArray"].push(item.toJSON());
    }
    if (Array.isArray(this.surveyText)) {
      data["surveyText"] = [];
      for (let item of this.surveyText) data["surveyText"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SurveyDto();
    result.init(json);
    return result;
  }
}
class SurveyFileDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.base64Image = _data["base64Image"];
      this.imageContentType = _data["imageContentType"];
      this.fileName = _data["fileName"];
      this.fileType = _data["fileType"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SurveyFileDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["base64Image"] = this.base64Image;
    data["imageContentType"] = this.imageContentType;
    data["fileName"] = this.fileName;
    data["fileType"] = this.fileType;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SurveyFileDto();
    result.init(json);
    return result;
  }
}
class SurveyQuestionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.surveyQuestions = _data["surveyQuestions"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SurveyQuestionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["surveyQuestions"] = this.surveyQuestions;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SurveyQuestionDto();
    result.init(json);
    return result;
  }
}
class PublishUnpublishSurveyDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.surveyId = _data["surveyId"];
      this.isPublished = _data["isPublished"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PublishUnpublishSurveyDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["surveyId"] = this.surveyId;
    data["isPublished"] = this.isPublished;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PublishUnpublishSurveyDto();
    result.init(json);
    return result;
  }
}
class CommonDropdownSelectListItemResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["lstDropdownValues"])) {
        this.lstDropdownValues = [];
        for (let item of _data["lstDropdownValues"]) this.lstDropdownValues.push(CommonDropdownSelectListItemDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CommonDropdownSelectListItemResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.lstDropdownValues)) {
      data["lstDropdownValues"] = [];
      for (let item of this.lstDropdownValues) data["lstDropdownValues"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CommonDropdownSelectListItemResponseDto();
    result.init(json);
    return result;
  }
}
class CommonDropdownSelectListItemDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.id = _data["id"];
      this.value = _data["value"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CommonDropdownSelectListItemDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["value"] = this.value;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CommonDropdownSelectListItemDto();
    result.init(json);
    return result;
  }
}
class SubjectMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.subjectMasterId = _data["subjectMasterId"];
      this.subjectName = _data["subjectName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SubjectMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["subjectMasterId"] = this.subjectMasterId;
    data["subjectName"] = this.subjectName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SubjectMasterDto();
    result.init(json);
    return result;
  }
}
class SubjectMasterDeleteResponceDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
      this.subjectMappingCount = _data["subjectMappingCount"];
      this.teacherSubjectMappingCount = _data["teacherSubjectMappingCount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SubjectMasterDeleteResponceDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    data["subjectMappingCount"] = this.subjectMappingCount;
    data["teacherSubjectMappingCount"] = this.teacherSubjectMappingCount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SubjectMasterDeleteResponceDto();
    result.init(json);
    return result;
  }
}
class TimetableSubjectDropdownResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["subjects"])) {
        this.subjects = [];
        for (let item of _data["subjects"]) this.subjects.push(TimetableSubjectDropdownDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TimetableSubjectDropdownResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.subjects)) {
      data["subjects"] = [];
      for (let item of this.subjects) data["subjects"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TimetableSubjectDropdownResponseDto();
    result.init(json);
    return result;
  }
}
class TimetableSubjectDropdownDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.classId = _data["classId"];
      this.subjectId = _data["subjectId"];
      this.subjectName = _data["subjectName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TimetableSubjectDropdownDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["classId"] = this.classId;
    data["subjectId"] = this.subjectId;
    data["subjectName"] = this.subjectName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TimetableSubjectDropdownDto();
    result.init(json);
    return result;
  }
}
class TimetableSubjectDropdownRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["lstClass"])) {
        this.lstClass = [];
        for (let item of _data["lstClass"]) this.lstClass.push(item);
      }
      this.academicYearId = _data["academicYearId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TimetableSubjectDropdownRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.lstClass)) {
      data["lstClass"] = [];
      for (let item of this.lstClass) data["lstClass"].push(item);
    }
    data["academicYearId"] = this.academicYearId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TimetableSubjectDropdownRequestDto();
    result.init(json);
    return result;
  }
}
class SubjectMappingUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["subjectExistResposeList"])) {
        this.subjectExistResposeList = [];
        for (let item of _data["subjectExistResposeList"]) this.subjectExistResposeList.push(SubjectExistResposeDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SubjectMappingUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.subjectExistResposeList)) {
      data["subjectExistResposeList"] = [];
      for (let item of this.subjectExistResposeList) data["subjectExistResposeList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SubjectMappingUpsertDto();
    result.init(json);
    return result;
  }
}
class SubjectExistResposeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.subjectName = _data["subjectName"];
      this.existsInHomeWork = _data["existsInHomeWork"];
      this.existsInClassTimeTable = _data["existsInClassTimeTable"];
      this.success = _data["success"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SubjectExistResposeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["subjectName"] = this.subjectName;
    data["existsInHomeWork"] = this.existsInHomeWork;
    data["existsInClassTimeTable"] = this.existsInClassTimeTable;
    data["success"] = this.success;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SubjectExistResposeDto();
    result.init(json);
    return result;
  }
}
class SubjectMappingDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.subjectMappingId = _data["subjectMappingId"];
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.className = _data["className"];
      this.subjectMasterIds = _data["subjectMasterIds"];
      this.userId = _data["userId"];
      if (Array.isArray(_data["subjectList"])) {
        this.subjectList = [];
        for (let item of _data["subjectList"]) this.subjectList.push(item);
      }
      if (Array.isArray(_data["subjectDropdownList"])) {
        this.subjectDropdownList = [];
        for (let item of _data["subjectDropdownList"]) this.subjectDropdownList.push(SubjectMasterDropdownDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SubjectMappingDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["subjectMappingId"] = this.subjectMappingId;
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["className"] = this.className;
    data["subjectMasterIds"] = this.subjectMasterIds;
    data["userId"] = this.userId;
    if (Array.isArray(this.subjectList)) {
      data["subjectList"] = [];
      for (let item of this.subjectList) data["subjectList"].push(item);
    }
    if (Array.isArray(this.subjectDropdownList)) {
      data["subjectDropdownList"] = [];
      for (let item of this.subjectDropdownList) data["subjectDropdownList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SubjectMappingDto();
    result.init(json);
    return result;
  }
}
class SubjectMasterDropdownDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.subjectMasterId = _data["subjectMasterId"];
      this.subjectName = _data["subjectName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SubjectMasterDropdownDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["subjectMasterId"] = this.subjectMasterId;
    data["subjectName"] = this.subjectName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SubjectMasterDropdownDto();
    result.init(json);
    return result;
  }
}
class CasteWiseStudentCountResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["castCountStudentList"])) {
        this.castCountStudentList = [];
        for (let item of _data["castCountStudentList"]) this.castCountStudentList.push(StudentReportDTO.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CasteWiseStudentCountResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.castCountStudentList)) {
      data["castCountStudentList"] = [];
      for (let item of this.castCountStudentList) data["castCountStudentList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CasteWiseStudentCountResponseDto();
    result.init(json);
    return result;
  }
}
class StudentReportDTO {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.class = _data["class"];
      this.casteName = _data["casteName"];
      this.formattedCasteName = _data["formattedCasteName"];
      this.casteCount = _data["casteCount"];
      this.totalCount = _data["totalCount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentReportDTO();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["class"] = this.class;
    data["casteName"] = this.casteName;
    data["formattedCasteName"] = this.formattedCasteName;
    data["casteCount"] = this.casteCount;
    data["totalCount"] = this.totalCount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentReportDTO();
    result.init(json);
    return result;
  }
}
class RequestReportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      if (Array.isArray(_data["classIds"])) {
        this.classIds = [];
        for (let item of _data["classIds"]) this.classIds.push(item);
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new RequestReportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    if (Array.isArray(this.classIds)) {
      data["classIds"] = [];
      for (let item of this.classIds) data["classIds"].push(item);
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new RequestReportDto();
    result.init(json);
    return result;
  }
}
class CategoryWiseStudentCountReportResponseDTO {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["categoryCountList"])) {
        this.categoryCountList = [];
        for (let item of _data["categoryCountList"]) this.categoryCountList.push(CategoryWiseStudentCountReportDTO.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CategoryWiseStudentCountReportResponseDTO();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.categoryCountList)) {
      data["categoryCountList"] = [];
      for (let item of this.categoryCountList) data["categoryCountList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CategoryWiseStudentCountReportResponseDTO();
    result.init(json);
    return result;
  }
}
class CategoryWiseStudentCountReportDTO {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.class = _data["class"];
      this.categoryName = _data["categoryName"];
      this.categoryCount = _data["categoryCount"];
      this.totalCount = _data["totalCount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CategoryWiseStudentCountReportDTO();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["class"] = this.class;
    data["categoryName"] = this.categoryName;
    data["categoryCount"] = this.categoryCount;
    data["totalCount"] = this.totalCount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CategoryWiseStudentCountReportDTO();
    result.init(json);
    return result;
  }
}
class ReligionWiseStudentCountReporResponsetDTO {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["religionCountList"])) {
        this.religionCountList = [];
        for (let item of _data["religionCountList"]) this.religionCountList.push(ReligionWiseStudentCountReportDTO.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ReligionWiseStudentCountReporResponsetDTO();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.religionCountList)) {
      data["religionCountList"] = [];
      for (let item of this.religionCountList) data["religionCountList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ReligionWiseStudentCountReporResponsetDTO();
    result.init(json);
    return result;
  }
}
class ReligionWiseStudentCountReportDTO {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.class = _data["class"];
      this.religionName = _data["religionName"];
      this.religionCount = _data["religionCount"];
      this.totalCount = _data["totalCount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ReligionWiseStudentCountReportDTO();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["class"] = this.class;
    data["religionName"] = this.religionName;
    data["religionCount"] = this.religionCount;
    data["totalCount"] = this.totalCount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ReligionWiseStudentCountReportDTO();
    result.init(json);
    return result;
  }
}
class RTEStudentCountReportResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["rteCountList"])) {
        this.rteCountList = [];
        for (let item of _data["rteCountList"]) this.rteCountList.push(RTEStudentCountReportDTO.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new RTEStudentCountReportResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.rteCountList)) {
      data["rteCountList"] = [];
      for (let item of this.rteCountList) data["rteCountList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new RTEStudentCountReportResponseDto();
    result.init(json);
    return result;
  }
}
class RTEStudentCountReportDTO {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.class = _data["class"];
      this.boysCount = _data["boysCount"];
      this.girlsCount = _data["girlsCount"];
      this.studentCount = _data["studentCount"];
      this.rteCount = _data["rteCount"];
      this.rteBoysCount = _data["rteBoysCount"];
      this.rteGirlsCount = _data["rteGirlsCount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new RTEStudentCountReportDTO();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["class"] = this.class;
    data["boysCount"] = this.boysCount;
    data["girlsCount"] = this.girlsCount;
    data["studentCount"] = this.studentCount;
    data["rteCount"] = this.rteCount;
    data["rteBoysCount"] = this.rteBoysCount;
    data["rteGirlsCount"] = this.rteGirlsCount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new RTEStudentCountReportDTO();
    result.init(json);
    return result;
  }
}
class StudentGenderCountReportResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["studentountList"])) {
        this.studentountList = [];
        for (let item of _data["studentountList"]) this.studentountList.push(StudentGenderCountReportDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentGenderCountReportResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.studentountList)) {
      data["studentountList"] = [];
      for (let item of this.studentountList) data["studentountList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentGenderCountReportResponseDto();
    result.init(json);
    return result;
  }
}
class StudentGenderCountReportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.class = _data["class"];
      this.girlsCount = _data["girlsCount"];
      this.boysCount = _data["boysCount"];
      this.totalCount = _data["totalCount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentGenderCountReportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["class"] = this.class;
    data["girlsCount"] = this.girlsCount;
    data["boysCount"] = this.boysCount;
    data["totalCount"] = this.totalCount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentGenderCountReportDto();
    result.init(json);
    return result;
  }
}
class StudentGenderListResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["studentGenderList"])) {
        this.studentGenderList = [];
        for (let item of _data["studentGenderList"]) this.studentGenderList.push(StudentGenderListDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentGenderListResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.studentGenderList)) {
      data["studentGenderList"] = [];
      for (let item of this.studentGenderList) data["studentGenderList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentGenderListResponseDto();
    result.init(json);
    return result;
  }
}
class StudentGenderListDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.class = _data["class"];
      this.studentName = _data["studentName"];
      this.girls = _data["girls"];
      this.boys = _data["boys"];
      this.gender = _data["gender"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentGenderListDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["class"] = this.class;
    data["studentName"] = this.studentName;
    data["girls"] = this.girls;
    data["boys"] = this.boys;
    data["gender"] = this.gender;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentGenderListDto();
    result.init(json);
    return result;
  }
}
class StudentRTEGenderListResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["rteStudentGenderList"])) {
        this.rteStudentGenderList = [];
        for (let item of _data["rteStudentGenderList"]) this.rteStudentGenderList.push(StudentRTEGenderListDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentRTEGenderListResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.rteStudentGenderList)) {
      data["rteStudentGenderList"] = [];
      for (let item of this.rteStudentGenderList) data["rteStudentGenderList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentRTEGenderListResponseDto();
    result.init(json);
    return result;
  }
}
class StudentRTEGenderListDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.class = _data["class"];
      this.studentName = _data["studentName"];
      this.girls = _data["girls"];
      this.boys = _data["boys"];
      this.gender = _data["gender"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentRTEGenderListDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["class"] = this.class;
    data["studentName"] = this.studentName;
    data["girls"] = this.girls;
    data["boys"] = this.boys;
    data["gender"] = this.gender;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentRTEGenderListDto();
    result.init(json);
    return result;
  }
}
class StudentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.classId = _data["classId"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.cbscStudentId = _data["cbscStudentId"];
      this.admissionNo = _data["admissionNo"];
      this.schoolId = _data["schoolId"];
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.fullName = _data["fullName"];
      this.gender = _data["gender"];
      this.adharNo = _data["adharNo"];
      this.religion = _data["religion"];
      this.category = _data["category"];
      this.cast = _data["cast"];
      this.subCast = _data["subCast"];
      this.nationality = _data["nationality"];
      this.motherTounge = _data["motherTounge"];
      this.emergencyContactPersonName = _data["emergencyContactPersonName"];
      this.emergencyContactNumber = _data["emergencyContactNumber"];
      this.familyDoctorName = _data["familyDoctorName"];
      this.familyDoctorContactNumber = _data["familyDoctorContactNumber"];
      this.birthPlace = _data["birthPlace"];
      this.ngbBirthDate = _data["ngbBirthDate"] ? SchoolNgbDateModel.fromJS(_data["ngbBirthDate"]) : undefined;
      this.birthDate = _data["birthDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["birthDate"].toString()) : undefined;
      this.birthDateInWords = _data["birthDateInWords"];
      this.birthCountryId = _data["birthCountryId"];
      this.birthCountryName = _data["birthCountryName"];
      this.birthStateId = _data["birthStateId"];
      this.birthStateName = _data["birthStateName"];
      this.birthDistrictId = _data["birthDistrictId"];
      this.birthDistrictName = _data["birthDistrictName"];
      this.birthTalukaId = _data["birthTalukaId"];
      this.birthTalukaName = _data["birthTalukaName"];
      this.currentAddressLine1 = _data["currentAddressLine1"];
      this.currentAddressLine2 = _data["currentAddressLine2"];
      this.currentCountryId = _data["currentCountryId"];
      this.currentCountryName = _data["currentCountryName"];
      this.currentStateId = _data["currentStateId"];
      this.currentStateName = _data["currentStateName"];
      this.currentDistrictId = _data["currentDistrictId"];
      this.currentDistrictName = _data["currentDistrictName"];
      this.currentTalukaId = _data["currentTalukaId"];
      this.currentTalukaName = _data["currentTalukaName"];
      this.currentZipcode = _data["currentZipcode"];
      this.bloodGroup = _data["bloodGroup"];
      this.height = _data["height"];
      this.weight = _data["weight"];
      this.medicalHistory = _data["medicalHistory"];
      this.admissionGrade = _data["admissionGrade"];
      this.ngbDateOfAdmission = _data["ngbDateOfAdmission"] ? SchoolNgbDateModel.fromJS(_data["ngbDateOfAdmission"]) : undefined;
      this.dateOfAdmission = _data["dateOfAdmission"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["dateOfAdmission"].toString()) : undefined;
      this.lastSchoolAttended = _data["lastSchoolAttended"];
      this.lastSchoolStandard = _data["lastSchoolStandard"];
      this.lastSchoolDivision = _data["lastSchoolDivision"];
      this.progressNoteFromLastSchool = _data["progressNoteFromLastSchool"];
      this.conductNoteFromLastSchool = _data["conductNoteFromLastSchool"];
      this.standardInWhichLastStudyingSection = _data["standardInWhichLastStudyingSection"];
      this.sinceWhenStudyingInLastSchool = _data["sinceWhenStudyingInLastSchool"];
      this.reasonOfLeavingSchoolLastSchool = _data["reasonOfLeavingSchoolLastSchool"];
      this.ngbDateOfLeavingLastSchool = _data["ngbDateOfLeavingLastSchool"] ? SchoolNgbDateModel.fromJS(_data["ngbDateOfLeavingLastSchool"]) : undefined;
      this.dateOfLeavingLastSchool = _data["dateOfLeavingLastSchool"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["dateOfLeavingLastSchool"].toString()) : undefined;
      this.remarkFromLastSchool = _data["remarkFromLastSchool"];
      this.profileImageURL = _data["profileImageURL"];
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.gradeName = _data["gradeName"];
      this.divisionId = _data["divisionId"];
      this.divisionName = _data["divisionName"];
      this.gradeNameAdmission = _data["gradeNameAdmission"];
      this.fatherFullName = _data["fatherFullName"];
      this.fatherMobileNo = _data["fatherMobileNo"];
      this.fatherId = _data["fatherId"];
      this.motherId = _data["motherId"];
      this.guardianId = _data["guardianId"];
      this.rollNumber = _data["rollNumber"];
      this.isNewStudent = _data["isNewStudent"];
      this.isRTEStudent = _data["isRTEStudent"];
      this.isConsationApplicable = _data["isConsationApplicable"];
      this.consationAmount = _data["consationAmount"];
      this.isArchive = _data["isArchive"];
      this.profileBase64Image = _data["profileBase64Image"];
      this.profileImageContentType = _data["profileImageContentType"];
      this.isAppAccess = _data["isAppAccess"];
      this.appAccessMobileNo = _data["appAccessMobileNo"];
      this.appAccessOneTimePassword = _data["appAccessOneTimePassword"];
      this.previousAcademicYearPendingFeeAmount = _data["previousAcademicYearPendingFeeAmount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["classId"] = this.classId;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["cbscStudentId"] = this.cbscStudentId;
    data["admissionNo"] = this.admissionNo;
    data["schoolId"] = this.schoolId;
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["fullName"] = this.fullName;
    data["gender"] = this.gender;
    data["adharNo"] = this.adharNo;
    data["religion"] = this.religion;
    data["category"] = this.category;
    data["cast"] = this.cast;
    data["subCast"] = this.subCast;
    data["nationality"] = this.nationality;
    data["motherTounge"] = this.motherTounge;
    data["emergencyContactPersonName"] = this.emergencyContactPersonName;
    data["emergencyContactNumber"] = this.emergencyContactNumber;
    data["familyDoctorName"] = this.familyDoctorName;
    data["familyDoctorContactNumber"] = this.familyDoctorContactNumber;
    data["birthPlace"] = this.birthPlace;
    data["ngbBirthDate"] = this.ngbBirthDate ? this.ngbBirthDate.toJSON() : undefined;
    data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : undefined;
    data["birthDateInWords"] = this.birthDateInWords;
    data["birthCountryId"] = this.birthCountryId;
    data["birthCountryName"] = this.birthCountryName;
    data["birthStateId"] = this.birthStateId;
    data["birthStateName"] = this.birthStateName;
    data["birthDistrictId"] = this.birthDistrictId;
    data["birthDistrictName"] = this.birthDistrictName;
    data["birthTalukaId"] = this.birthTalukaId;
    data["birthTalukaName"] = this.birthTalukaName;
    data["currentAddressLine1"] = this.currentAddressLine1;
    data["currentAddressLine2"] = this.currentAddressLine2;
    data["currentCountryId"] = this.currentCountryId;
    data["currentCountryName"] = this.currentCountryName;
    data["currentStateId"] = this.currentStateId;
    data["currentStateName"] = this.currentStateName;
    data["currentDistrictId"] = this.currentDistrictId;
    data["currentDistrictName"] = this.currentDistrictName;
    data["currentTalukaId"] = this.currentTalukaId;
    data["currentTalukaName"] = this.currentTalukaName;
    data["currentZipcode"] = this.currentZipcode;
    data["bloodGroup"] = this.bloodGroup;
    data["height"] = this.height;
    data["weight"] = this.weight;
    data["medicalHistory"] = this.medicalHistory;
    data["admissionGrade"] = this.admissionGrade;
    data["ngbDateOfAdmission"] = this.ngbDateOfAdmission ? this.ngbDateOfAdmission.toJSON() : undefined;
    data["dateOfAdmission"] = this.dateOfAdmission ? this.dateOfAdmission.toISOString() : undefined;
    data["lastSchoolAttended"] = this.lastSchoolAttended;
    data["lastSchoolStandard"] = this.lastSchoolStandard;
    data["lastSchoolDivision"] = this.lastSchoolDivision;
    data["progressNoteFromLastSchool"] = this.progressNoteFromLastSchool;
    data["conductNoteFromLastSchool"] = this.conductNoteFromLastSchool;
    data["standardInWhichLastStudyingSection"] = this.standardInWhichLastStudyingSection;
    data["sinceWhenStudyingInLastSchool"] = this.sinceWhenStudyingInLastSchool;
    data["reasonOfLeavingSchoolLastSchool"] = this.reasonOfLeavingSchoolLastSchool;
    data["ngbDateOfLeavingLastSchool"] = this.ngbDateOfLeavingLastSchool ? this.ngbDateOfLeavingLastSchool.toJSON() : undefined;
    data["dateOfLeavingLastSchool"] = this.dateOfLeavingLastSchool ? this.dateOfLeavingLastSchool.toISOString() : undefined;
    data["remarkFromLastSchool"] = this.remarkFromLastSchool;
    data["profileImageURL"] = this.profileImageURL;
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["gradeName"] = this.gradeName;
    data["divisionId"] = this.divisionId;
    data["divisionName"] = this.divisionName;
    data["gradeNameAdmission"] = this.gradeNameAdmission;
    data["fatherFullName"] = this.fatherFullName;
    data["fatherMobileNo"] = this.fatherMobileNo;
    data["fatherId"] = this.fatherId;
    data["motherId"] = this.motherId;
    data["guardianId"] = this.guardianId;
    data["rollNumber"] = this.rollNumber;
    data["isNewStudent"] = this.isNewStudent;
    data["isRTEStudent"] = this.isRTEStudent;
    data["isConsationApplicable"] = this.isConsationApplicable;
    data["consationAmount"] = this.consationAmount;
    data["isArchive"] = this.isArchive;
    data["profileBase64Image"] = this.profileBase64Image;
    data["profileImageContentType"] = this.profileImageContentType;
    data["isAppAccess"] = this.isAppAccess;
    data["appAccessMobileNo"] = this.appAccessMobileNo;
    data["appAccessOneTimePassword"] = this.appAccessOneTimePassword;
    data["previousAcademicYearPendingFeeAmount"] = this.previousAcademicYearPendingFeeAmount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentDto();
    result.init(json);
    return result;
  }
}
class StudentIdModelResponse {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.fatherId = _data["fatherId"];
      this.motherId = _data["motherId"];
      this.guardianId = _data["guardianId"];
      this.documentId = _data["documentId"];
      this.exist = _data["exist"];
      this.generalRegistrationNoAvailable = _data["generalRegistrationNoAvailable"];
      this.updateFlag = _data["updateFlag"];
      this.studentPaymentExist = _data["studentPaymentExist"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentIdModelResponse();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["fatherId"] = this.fatherId;
    data["motherId"] = this.motherId;
    data["guardianId"] = this.guardianId;
    data["documentId"] = this.documentId;
    data["exist"] = this.exist;
    data["generalRegistrationNoAvailable"] = this.generalRegistrationNoAvailable;
    data["updateFlag"] = this.updateFlag;
    data["studentPaymentExist"] = this.studentPaymentExist;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentIdModelResponse();
    result.init(json);
    return result;
  }
}
class StudentDeleteRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentDeleteRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentDeleteRespose();
    result.init(json);
    return result;
  }
}
class StudentKitPaymentAnalyticsDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentKitPaymentAnalyticsSchool = _data["studentKitPaymentAnalyticsSchool"] ? StudentKitPaymentAnalyticsSchoolDto.fromJS(_data["studentKitPaymentAnalyticsSchool"]) : undefined;
      if (Array.isArray(_data["studentKitPaymentAnalyticsGrade"])) {
        this.studentKitPaymentAnalyticsGrade = [];
        for (let item of _data["studentKitPaymentAnalyticsGrade"]) this.studentKitPaymentAnalyticsGrade.push(StudentKitPaymentAnalyticsGradeDto.fromJS(item));
      }
      if (Array.isArray(_data["studentKitPaymentAnalyticsDivision"])) {
        this.studentKitPaymentAnalyticsDivision = [];
        for (let item of _data["studentKitPaymentAnalyticsDivision"]) this.studentKitPaymentAnalyticsDivision.push(StudentKitPaymentAnalyticsDivisionDto.fromJS(item));
      }
      if (Array.isArray(_data["studentKitPaymentAnalyticsStudent"])) {
        this.studentKitPaymentAnalyticsStudent = [];
        for (let item of _data["studentKitPaymentAnalyticsStudent"]) this.studentKitPaymentAnalyticsStudent.push(StudentKitPaymentAnalyticsStudentDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitPaymentAnalyticsDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentKitPaymentAnalyticsSchool"] = this.studentKitPaymentAnalyticsSchool ? this.studentKitPaymentAnalyticsSchool.toJSON() : undefined;
    if (Array.isArray(this.studentKitPaymentAnalyticsGrade)) {
      data["studentKitPaymentAnalyticsGrade"] = [];
      for (let item of this.studentKitPaymentAnalyticsGrade) data["studentKitPaymentAnalyticsGrade"].push(item.toJSON());
    }
    if (Array.isArray(this.studentKitPaymentAnalyticsDivision)) {
      data["studentKitPaymentAnalyticsDivision"] = [];
      for (let item of this.studentKitPaymentAnalyticsDivision) data["studentKitPaymentAnalyticsDivision"].push(item.toJSON());
    }
    if (Array.isArray(this.studentKitPaymentAnalyticsStudent)) {
      data["studentKitPaymentAnalyticsStudent"] = [];
      for (let item of this.studentKitPaymentAnalyticsStudent) data["studentKitPaymentAnalyticsStudent"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitPaymentAnalyticsDto();
    result.init(json);
    return result;
  }
}
class StudentKitPaymentAnalyticsSchoolDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.schoolName = _data["schoolName"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.receivableFee = _data["receivableFee"];
      this.collectionInPercentage = _data["collectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitPaymentAnalyticsSchoolDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["schoolName"] = this.schoolName;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["receivableFee"] = this.receivableFee;
    data["collectionInPercentage"] = this.collectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitPaymentAnalyticsSchoolDto();
    result.init(json);
    return result;
  }
}
class StudentKitPaymentAnalyticsGradeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.academicYearId = _data["academicYearId"];
      this.gradeName = _data["gradeName"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.receivableFee = _data["receivableFee"];
      this.collectionInPercentage = _data["collectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitPaymentAnalyticsGradeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["academicYearId"] = this.academicYearId;
    data["gradeName"] = this.gradeName;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["receivableFee"] = this.receivableFee;
    data["collectionInPercentage"] = this.collectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitPaymentAnalyticsGradeDto();
    result.init(json);
    return result;
  }
}
class StudentKitPaymentAnalyticsDivisionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.academicYearId = _data["academicYearId"];
      this.divisionName = _data["divisionName"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.receivableFee = _data["receivableFee"];
      this.collectionInPercentage = _data["collectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitPaymentAnalyticsDivisionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["academicYearId"] = this.academicYearId;
    data["divisionName"] = this.divisionName;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["receivableFee"] = this.receivableFee;
    data["collectionInPercentage"] = this.collectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitPaymentAnalyticsDivisionDto();
    result.init(json);
    return result;
  }
}
class StudentKitPaymentAnalyticsStudentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.studentName = _data["studentName"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.academicYearId = _data["academicYearId"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.receivableFee = _data["receivableFee"];
      this.collectionInPercentage = _data["collectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitPaymentAnalyticsStudentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["studentName"] = this.studentName;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["academicYearId"] = this.academicYearId;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["receivableFee"] = this.receivableFee;
    data["collectionInPercentage"] = this.collectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitPaymentAnalyticsStudentDto();
    result.init(json);
    return result;
  }
}
class StudentKitFeePaymentDueByAYSelectResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["studentKitFeePaymentDueByAYList"])) {
        this.studentKitFeePaymentDueByAYList = [];
        for (let item of _data["studentKitFeePaymentDueByAYList"]) this.studentKitFeePaymentDueByAYList.push(StudentKitFeePaymentDueByAYSelectDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitFeePaymentDueByAYSelectResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.studentKitFeePaymentDueByAYList)) {
      data["studentKitFeePaymentDueByAYList"] = [];
      for (let item of this.studentKitFeePaymentDueByAYList) data["studentKitFeePaymentDueByAYList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitFeePaymentDueByAYSelectResponseDto();
    result.init(json);
    return result;
  }
}
class StudentKitFeePaymentDueByAYSelectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.gradeName = _data["gradeName"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.academicYearId = _data["academicYearId"];
      this.academicYearKey = _data["academicYearKey"];
      this.fullName = _data["fullName"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.paidAmount = _data["paidAmount"];
      this.otherPaidAmount = _data["otherPaidAmount"];
      this.dueAmount = _data["dueAmount"];
      this.chequeClearedAmount = _data["chequeClearedAmount"];
      this.chequeUnclearAmount = _data["chequeUnclearAmount"];
      this.isRTEStudent = _data["isRTEStudent"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitFeePaymentDueByAYSelectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["gradeName"] = this.gradeName;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["academicYearId"] = this.academicYearId;
    data["academicYearKey"] = this.academicYearKey;
    data["fullName"] = this.fullName;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["paidAmount"] = this.paidAmount;
    data["otherPaidAmount"] = this.otherPaidAmount;
    data["dueAmount"] = this.dueAmount;
    data["chequeClearedAmount"] = this.chequeClearedAmount;
    data["chequeUnclearAmount"] = this.chequeUnclearAmount;
    data["isRTEStudent"] = this.isRTEStudent;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitFeePaymentDueByAYSelectDto();
    result.init(json);
    return result;
  }
}
class StudentKitFeepaymentSelectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.fullName = _data["fullName"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.isNewStudent = _data["isNewStudent"];
      this.isRTEStudent = _data["isRTEStudent"];
      this.isConsationApplicable = _data["isConsationApplicable"];
      this.consationAmount = _data["consationAmount"];
      this.previousAcademicYearPendingFeeAmount = _data["previousAcademicYearPendingFeeAmount"];
      this.appAccessMobileNo = _data["appAccessMobileNo"];
      this.academicYearId = _data["academicYearId"];
      this.rollNumber = _data["rollNumber"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.classId = _data["classId"];
      this.paymentInstallmentDone = _data["paymentInstallmentDone"];
      this.skipDiscountCount = _data["skipDiscountCount"];
      if (Array.isArray(_data["studentKitFeePaymentAdditionalDiscountList"])) {
        this.studentKitFeePaymentAdditionalDiscountList = [];
        for (let item of _data["studentKitFeePaymentAdditionalDiscountList"]) this.studentKitFeePaymentAdditionalDiscountList.push(StudentKitFeePaymentAdditionalDiscount.fromJS(item));
      }
      if (Array.isArray(_data["studentKitFeePaymentParticularsList"])) {
        this.studentKitFeePaymentParticularsList = [];
        for (let item of _data["studentKitFeePaymentParticularsList"]) this.studentKitFeePaymentParticularsList.push(StudentKitFeePaymentParticulars.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitFeepaymentSelectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["fullName"] = this.fullName;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["isNewStudent"] = this.isNewStudent;
    data["isRTEStudent"] = this.isRTEStudent;
    data["isConsationApplicable"] = this.isConsationApplicable;
    data["consationAmount"] = this.consationAmount;
    data["previousAcademicYearPendingFeeAmount"] = this.previousAcademicYearPendingFeeAmount;
    data["appAccessMobileNo"] = this.appAccessMobileNo;
    data["academicYearId"] = this.academicYearId;
    data["rollNumber"] = this.rollNumber;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["classId"] = this.classId;
    data["paymentInstallmentDone"] = this.paymentInstallmentDone;
    data["skipDiscountCount"] = this.skipDiscountCount;
    if (Array.isArray(this.studentKitFeePaymentAdditionalDiscountList)) {
      data["studentKitFeePaymentAdditionalDiscountList"] = [];
      for (let item of this.studentKitFeePaymentAdditionalDiscountList) data["studentKitFeePaymentAdditionalDiscountList"].push(item.toJSON());
    }
    if (Array.isArray(this.studentKitFeePaymentParticularsList)) {
      data["studentKitFeePaymentParticularsList"] = [];
      for (let item of this.studentKitFeePaymentParticularsList) data["studentKitFeePaymentParticularsList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitFeepaymentSelectDto();
    result.init(json);
    return result;
  }
}
class StudentKitFeePaymentAdditionalDiscount {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeAdditionalDiscountId = _data["feeAdditionalDiscountId"];
      this.academicYearId = _data["academicYearId"];
      this.additionalDiscountedAmount = _data["additionalDiscountedAmount"];
      this.installmentPaybleFee = _data["installmentPaybleFee"];
      this.paymentInstallmentNumber = _data["paymentInstallmentNumber"];
      this.additionalDiscountedRemark = _data["additionalDiscountedRemark"];
      this.appliedDate = _data["appliedDate"];
      this.totalFee = _data["totalFee"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitFeePaymentAdditionalDiscount();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeAdditionalDiscountId"] = this.feeAdditionalDiscountId;
    data["academicYearId"] = this.academicYearId;
    data["additionalDiscountedAmount"] = this.additionalDiscountedAmount;
    data["installmentPaybleFee"] = this.installmentPaybleFee;
    data["paymentInstallmentNumber"] = this.paymentInstallmentNumber;
    data["additionalDiscountedRemark"] = this.additionalDiscountedRemark;
    data["appliedDate"] = this.appliedDate;
    data["totalFee"] = this.totalFee;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitFeePaymentAdditionalDiscount();
    result.init(json);
    return result;
  }
}
class StudentKitFeePaymentParticulars {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.additionalDiscInPercentage = _data["additionalDiscInPercentage"];
      this.feeParticularId = _data["feeParticularId"];
      this.isDiscountApplicable = _data["isDiscountApplicable"];
      this.particularName = _data["particularName"];
      this.totalFee = _data["totalFee"];
      this.feeAfterDiscount = _data["feeAfterDiscount"];
      this.paybleFee = _data["paybleFee"];
      this.dueAmount = _data["dueAmount"];
      this.alreadyPaid = _data["alreadyPaid"];
      this.additionalDiscAmount = _data["additionalDiscAmount"];
      this.showError = _data["showError"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitFeePaymentParticulars();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["additionalDiscInPercentage"] = this.additionalDiscInPercentage;
    data["feeParticularId"] = this.feeParticularId;
    data["isDiscountApplicable"] = this.isDiscountApplicable;
    data["particularName"] = this.particularName;
    data["totalFee"] = this.totalFee;
    data["feeAfterDiscount"] = this.feeAfterDiscount;
    data["paybleFee"] = this.paybleFee;
    data["dueAmount"] = this.dueAmount;
    data["alreadyPaid"] = this.alreadyPaid;
    data["additionalDiscAmount"] = this.additionalDiscAmount;
    data["showError"] = this.showError;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitFeePaymentParticulars();
    result.init(json);
    return result;
  }
}
class StudentKitFeepaymentUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.studentId = _data["studentId"];
      this.onlineTransactionId = _data["onlineTransactionId"];
      this.onlineTransactionDateTime = _data["onlineTransactionDateTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["onlineTransactionDateTime"].toString()) : undefined;
      this.ngbOnlineTransactionDateTime = _data["ngbOnlineTransactionDateTime"] ? SchoolNgbDateModel.fromJS(_data["ngbOnlineTransactionDateTime"]) : undefined;
      this.onlinePaymentRequest = _data["onlinePaymentRequest"];
      this.onlinePaymentResponse = _data["onlinePaymentResponse"];
      this.paidToBank = _data["paidToBank"];
      this.paidAmount = _data["paidAmount"];
      this.paymentTypeId = _data["paymentTypeId"];
      this.chequeNumber = _data["chequeNumber"];
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.ngbChequeDate = _data["ngbChequeDate"] ? SchoolNgbDateModel.fromJS(_data["ngbChequeDate"]) : undefined;
      this.chequeBank = _data["chequeBank"];
      this.chequeAmount = _data["chequeAmount"];
      this.isChequeClear = _data["isChequeClear"];
      this.skipDiscount = _data["skipDiscount"];
      this.remark = _data["remark"];
      this.additionalDiscountedAmount = _data["additionalDiscountedAmount"];
      this.installmentPaybleFee = _data["installmentPaybleFee"];
      this.additionalDiscountedRemark = _data["additionalDiscountedRemark"];
      this.userId = _data["userId"];
      if (Array.isArray(_data["studentKitFeePaymentDetailTypeUpsertDtoList"])) {
        this.studentKitFeePaymentDetailTypeUpsertDtoList = [];
        for (let item of _data["studentKitFeePaymentDetailTypeUpsertDtoList"]) this.studentKitFeePaymentDetailTypeUpsertDtoList.push(StudentKitFeePaymentDetailTypeUpsertDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitFeepaymentUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["studentId"] = this.studentId;
    data["onlineTransactionId"] = this.onlineTransactionId;
    data["onlineTransactionDateTime"] = this.onlineTransactionDateTime ? this.onlineTransactionDateTime.toISOString() : undefined;
    data["ngbOnlineTransactionDateTime"] = this.ngbOnlineTransactionDateTime ? this.ngbOnlineTransactionDateTime.toJSON() : undefined;
    data["onlinePaymentRequest"] = this.onlinePaymentRequest;
    data["onlinePaymentResponse"] = this.onlinePaymentResponse;
    data["paidToBank"] = this.paidToBank;
    data["paidAmount"] = this.paidAmount;
    data["paymentTypeId"] = this.paymentTypeId;
    data["chequeNumber"] = this.chequeNumber;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["ngbChequeDate"] = this.ngbChequeDate ? this.ngbChequeDate.toJSON() : undefined;
    data["chequeBank"] = this.chequeBank;
    data["chequeAmount"] = this.chequeAmount;
    data["isChequeClear"] = this.isChequeClear;
    data["skipDiscount"] = this.skipDiscount;
    data["remark"] = this.remark;
    data["additionalDiscountedAmount"] = this.additionalDiscountedAmount;
    data["installmentPaybleFee"] = this.installmentPaybleFee;
    data["additionalDiscountedRemark"] = this.additionalDiscountedRemark;
    data["userId"] = this.userId;
    if (Array.isArray(this.studentKitFeePaymentDetailTypeUpsertDtoList)) {
      data["studentKitFeePaymentDetailTypeUpsertDtoList"] = [];
      for (let item of this.studentKitFeePaymentDetailTypeUpsertDtoList) data["studentKitFeePaymentDetailTypeUpsertDtoList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitFeepaymentUpsertDto();
    result.init(json);
    return result;
  }
}
class StudentKitFeePaymentDetailTypeUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeParticularId = _data["feeParticularId"];
      this.otherFeeReason = _data["otherFeeReason"];
      this.paidAmount = _data["paidAmount"];
      this.feeAfterDiscount = _data["feeAfterDiscount"];
      this.additionalDiscInPercentage = _data["additionalDiscInPercentage"];
      this.additionalDiscAmount = _data["additionalDiscAmount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitFeePaymentDetailTypeUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeParticularId"] = this.feeParticularId;
    data["otherFeeReason"] = this.otherFeeReason;
    data["paidAmount"] = this.paidAmount;
    data["feeAfterDiscount"] = this.feeAfterDiscount;
    data["additionalDiscInPercentage"] = this.additionalDiscInPercentage;
    data["additionalDiscAmount"] = this.additionalDiscAmount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitFeePaymentDetailTypeUpsertDto();
    result.init(json);
    return result;
  }
}
class StudentKitFeepaymentHistorySelectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolName = _data["schoolName"];
      this.schoolAddress = _data["schoolAddress"];
      this.academicYearId = _data["academicYearId"];
      this.studentName = _data["studentName"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.rollNumber = _data["rollNumber"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.paymentTypeName = _data["paymentTypeName"];
      this.paymentDate = _data["paymentDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["paymentDate"].toString()) : undefined;
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.chequeBank = _data["chequeBank"];
      this.transactionId = _data["transactionId"];
      this.invoiceNumber = _data["invoiceNumber"];
      if (Array.isArray(_data["studentKitFeeParticularsSelectList"])) {
        this.studentKitFeeParticularsSelectList = [];
        for (let item of _data["studentKitFeeParticularsSelectList"]) this.studentKitFeeParticularsSelectList.push(StudentKitFeeParticularsSelectDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitFeepaymentHistorySelectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolName"] = this.schoolName;
    data["schoolAddress"] = this.schoolAddress;
    data["academicYearId"] = this.academicYearId;
    data["studentName"] = this.studentName;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["rollNumber"] = this.rollNumber;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["paymentTypeName"] = this.paymentTypeName;
    data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : undefined;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["chequeBank"] = this.chequeBank;
    data["transactionId"] = this.transactionId;
    data["invoiceNumber"] = this.invoiceNumber;
    if (Array.isArray(this.studentKitFeeParticularsSelectList)) {
      data["studentKitFeeParticularsSelectList"] = [];
      for (let item of this.studentKitFeeParticularsSelectList) data["studentKitFeeParticularsSelectList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitFeepaymentHistorySelectDto();
    result.init(json);
    return result;
  }
}
class StudentKitFeeParticularsSelectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeParticularId = _data["feeParticularId"];
      this.particularName = _data["particularName"];
      this.totalFee = _data["totalFee"];
      this.feeAfterDiscount = _data["feeAfterDiscount"];
      this.paidAmount = _data["paidAmount"];
      this.dueAmount = _data["dueAmount"];
      this.alreadyPaid = _data["alreadyPaid"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitFeeParticularsSelectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeParticularId"] = this.feeParticularId;
    data["particularName"] = this.particularName;
    data["totalFee"] = this.totalFee;
    data["feeAfterDiscount"] = this.feeAfterDiscount;
    data["paidAmount"] = this.paidAmount;
    data["dueAmount"] = this.dueAmount;
    data["alreadyPaid"] = this.alreadyPaid;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitFeeParticularsSelectDto();
    result.init(json);
    return result;
  }
}
class StudentKitDaywisePaymentReportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.cashStudentKitDaywisePaymentReport = _data["cashStudentKitDaywisePaymentReport"] ? CashStudentKitDaywisePaymentReport.fromJS(_data["cashStudentKitDaywisePaymentReport"]) : undefined;
      this.chequeStudentKitDaywisePaymentReport = _data["chequeStudentKitDaywisePaymentReport"] ? ChequeStudentKitDaywisePaymentReport.fromJS(_data["chequeStudentKitDaywisePaymentReport"]) : undefined;
      this.ddStudentKitDaywisePaymentReport = _data["ddStudentKitDaywisePaymentReport"] ? DDStudentKitDaywisePaymentReport.fromJS(_data["ddStudentKitDaywisePaymentReport"]) : undefined;
      this.upiStudentKitDaywisePaymentReport = _data["upiStudentKitDaywisePaymentReport"] ? UpiStudentKitDaywisePaymentReport.fromJS(_data["upiStudentKitDaywisePaymentReport"]) : undefined;
      this.netBankingStudentKitDaywisePaymentReport = _data["netBankingStudentKitDaywisePaymentReport"] ? NetBankingStudentKitDaywisePaymentReport.fromJS(_data["netBankingStudentKitDaywisePaymentReport"]) : undefined;
      this.cardStudentKitDaywisePaymentReport = _data["cardStudentKitDaywisePaymentReport"] ? CardStudentKitDaywisePaymentReport.fromJS(_data["cardStudentKitDaywisePaymentReport"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitDaywisePaymentReportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["cashStudentKitDaywisePaymentReport"] = this.cashStudentKitDaywisePaymentReport ? this.cashStudentKitDaywisePaymentReport.toJSON() : undefined;
    data["chequeStudentKitDaywisePaymentReport"] = this.chequeStudentKitDaywisePaymentReport ? this.chequeStudentKitDaywisePaymentReport.toJSON() : undefined;
    data["ddStudentKitDaywisePaymentReport"] = this.ddStudentKitDaywisePaymentReport ? this.ddStudentKitDaywisePaymentReport.toJSON() : undefined;
    data["upiStudentKitDaywisePaymentReport"] = this.upiStudentKitDaywisePaymentReport ? this.upiStudentKitDaywisePaymentReport.toJSON() : undefined;
    data["netBankingStudentKitDaywisePaymentReport"] = this.netBankingStudentKitDaywisePaymentReport ? this.netBankingStudentKitDaywisePaymentReport.toJSON() : undefined;
    data["cardStudentKitDaywisePaymentReport"] = this.cardStudentKitDaywisePaymentReport ? this.cardStudentKitDaywisePaymentReport.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitDaywisePaymentReportDto();
    result.init(json);
    return result;
  }
}
class CashStudentKitDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["cashStudentKitDaywisePaymentReportList"])) {
        this.cashStudentKitDaywisePaymentReportList = [];
        for (let item of _data["cashStudentKitDaywisePaymentReportList"]) this.cashStudentKitDaywisePaymentReportList.push(StudentKitDaywisePaymentReport.fromJS(item));
      }
      this.cashStudentKitDaywisePaymentReportTotal = _data["cashStudentKitDaywisePaymentReportTotal"] ? StudentKitDaywisePaymentReportTotal.fromJS(_data["cashStudentKitDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CashStudentKitDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.cashStudentKitDaywisePaymentReportList)) {
      data["cashStudentKitDaywisePaymentReportList"] = [];
      for (let item of this.cashStudentKitDaywisePaymentReportList) data["cashStudentKitDaywisePaymentReportList"].push(item.toJSON());
    }
    data["cashStudentKitDaywisePaymentReportTotal"] = this.cashStudentKitDaywisePaymentReportTotal ? this.cashStudentKitDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CashStudentKitDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class StudentKitDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentName = _data["studentName"];
      this.class = _data["class"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.chequeNumber = _data["chequeNumber"];
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.chequeBank = _data["chequeBank"];
      this.academicYearName = _data["academicYearName"];
      this.paymentAmount = _data["paymentAmount"];
      this.invoiceNumber = _data["invoiceNumber"];
      this.transactionDate = _data["transactionDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["transactionDate"].toString()) : undefined;
      this.paymentMode = _data["paymentMode"];
      this.chequeUnclearedAmount = _data["chequeUnclearedAmount"];
      this.transactionBy = _data["transactionBy"];
      this.transactionId = _data["transactionId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentName"] = this.studentName;
    data["class"] = this.class;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["chequeNumber"] = this.chequeNumber;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["chequeBank"] = this.chequeBank;
    data["academicYearName"] = this.academicYearName;
    data["paymentAmount"] = this.paymentAmount;
    data["invoiceNumber"] = this.invoiceNumber;
    data["transactionDate"] = this.transactionDate ? this.transactionDate.toISOString() : undefined;
    data["paymentMode"] = this.paymentMode;
    data["chequeUnclearedAmount"] = this.chequeUnclearedAmount;
    data["transactionBy"] = this.transactionBy;
    data["transactionId"] = this.transactionId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class StudentKitDaywisePaymentReportTotal {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.totalPaymentAmount = _data["totalPaymentAmount"];
      this.totalChequeUnclearedAmount = _data["totalChequeUnclearedAmount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitDaywisePaymentReportTotal();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["totalPaymentAmount"] = this.totalPaymentAmount;
    data["totalChequeUnclearedAmount"] = this.totalChequeUnclearedAmount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitDaywisePaymentReportTotal();
    result.init(json);
    return result;
  }
}
class ChequeStudentKitDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["chequeStudentKitDaywisePaymentReportList"])) {
        this.chequeStudentKitDaywisePaymentReportList = [];
        for (let item of _data["chequeStudentKitDaywisePaymentReportList"]) this.chequeStudentKitDaywisePaymentReportList.push(StudentKitDaywisePaymentReport.fromJS(item));
      }
      this.chequeStudentKitDaywisePaymentReportTotal = _data["chequeStudentKitDaywisePaymentReportTotal"] ? StudentKitDaywisePaymentReportTotal.fromJS(_data["chequeStudentKitDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ChequeStudentKitDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.chequeStudentKitDaywisePaymentReportList)) {
      data["chequeStudentKitDaywisePaymentReportList"] = [];
      for (let item of this.chequeStudentKitDaywisePaymentReportList) data["chequeStudentKitDaywisePaymentReportList"].push(item.toJSON());
    }
    data["chequeStudentKitDaywisePaymentReportTotal"] = this.chequeStudentKitDaywisePaymentReportTotal ? this.chequeStudentKitDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ChequeStudentKitDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class DDStudentKitDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["ddStudentKitDaywisePaymentReportList"])) {
        this.ddStudentKitDaywisePaymentReportList = [];
        for (let item of _data["ddStudentKitDaywisePaymentReportList"]) this.ddStudentKitDaywisePaymentReportList.push(StudentKitDaywisePaymentReport.fromJS(item));
      }
      this.ddStudentKitDaywisePaymentReportTotal = _data["ddStudentKitDaywisePaymentReportTotal"] ? StudentKitDaywisePaymentReportTotal.fromJS(_data["ddStudentKitDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DDStudentKitDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.ddStudentKitDaywisePaymentReportList)) {
      data["ddStudentKitDaywisePaymentReportList"] = [];
      for (let item of this.ddStudentKitDaywisePaymentReportList) data["ddStudentKitDaywisePaymentReportList"].push(item.toJSON());
    }
    data["ddStudentKitDaywisePaymentReportTotal"] = this.ddStudentKitDaywisePaymentReportTotal ? this.ddStudentKitDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DDStudentKitDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class UpiStudentKitDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["upiStudentKitPaymentDaywisePaymentReportList"])) {
        this.upiStudentKitPaymentDaywisePaymentReportList = [];
        for (let item of _data["upiStudentKitPaymentDaywisePaymentReportList"]) this.upiStudentKitPaymentDaywisePaymentReportList.push(StudentKitDaywisePaymentReport.fromJS(item));
      }
      this.upiStudentKitPaymentDaywisePaymentReportTotal = _data["upiStudentKitPaymentDaywisePaymentReportTotal"] ? StudentKitDaywisePaymentReportTotal.fromJS(_data["upiStudentKitPaymentDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new UpiStudentKitDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.upiStudentKitPaymentDaywisePaymentReportList)) {
      data["upiStudentKitPaymentDaywisePaymentReportList"] = [];
      for (let item of this.upiStudentKitPaymentDaywisePaymentReportList) data["upiStudentKitPaymentDaywisePaymentReportList"].push(item.toJSON());
    }
    data["upiStudentKitPaymentDaywisePaymentReportTotal"] = this.upiStudentKitPaymentDaywisePaymentReportTotal ? this.upiStudentKitPaymentDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new UpiStudentKitDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class NetBankingStudentKitDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["netBankingStudentKitDaywisePaymentReportList"])) {
        this.netBankingStudentKitDaywisePaymentReportList = [];
        for (let item of _data["netBankingStudentKitDaywisePaymentReportList"]) this.netBankingStudentKitDaywisePaymentReportList.push(StudentKitDaywisePaymentReport.fromJS(item));
      }
      this.netBankingStudentKitDaywisePaymentReportTotal = _data["netBankingStudentKitDaywisePaymentReportTotal"] ? StudentKitDaywisePaymentReportTotal.fromJS(_data["netBankingStudentKitDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new NetBankingStudentKitDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.netBankingStudentKitDaywisePaymentReportList)) {
      data["netBankingStudentKitDaywisePaymentReportList"] = [];
      for (let item of this.netBankingStudentKitDaywisePaymentReportList) data["netBankingStudentKitDaywisePaymentReportList"].push(item.toJSON());
    }
    data["netBankingStudentKitDaywisePaymentReportTotal"] = this.netBankingStudentKitDaywisePaymentReportTotal ? this.netBankingStudentKitDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new NetBankingStudentKitDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class CardStudentKitDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["cardStudentKitDaywisePaymentReportList"])) {
        this.cardStudentKitDaywisePaymentReportList = [];
        for (let item of _data["cardStudentKitDaywisePaymentReportList"]) this.cardStudentKitDaywisePaymentReportList.push(StudentKitDaywisePaymentReport.fromJS(item));
      }
      this.cardStudentKitDaywisePaymentReportTotal = _data["cardStudentKitDaywisePaymentReportTotal"] ? StudentKitDaywisePaymentReportTotal.fromJS(_data["cardStudentKitDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CardStudentKitDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.cardStudentKitDaywisePaymentReportList)) {
      data["cardStudentKitDaywisePaymentReportList"] = [];
      for (let item of this.cardStudentKitDaywisePaymentReportList) data["cardStudentKitDaywisePaymentReportList"].push(item.toJSON());
    }
    data["cardStudentKitDaywisePaymentReportTotal"] = this.cardStudentKitDaywisePaymentReportTotal ? this.cardStudentKitDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CardStudentKitDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class StudentKitDaywisePaymentReportRequest {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.startDate = _data["startDate"] ? SchoolNgbDateModel.fromJS(_data["startDate"]) : undefined;
      this.endDate = _data["endDate"] ? SchoolNgbDateModel.fromJS(_data["endDate"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitDaywisePaymentReportRequest();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["startDate"] = this.startDate ? this.startDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitDaywisePaymentReportRequest();
    result.init(json);
    return result;
  }
}
class StudentDocumentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.documentId = _data["documentId"];
      this.documentName = _data["documentName"];
      this.documentUrl = _data["documentUrl"];
      this.documentFileType = _data["documentFileType"];
      this.documentBase64Image = _data["documentBase64Image"];
      this.documentImageContentType = _data["documentImageContentType"];
      if (Array.isArray(_data["studentDocuments"])) {
        this.studentDocuments = [];
        for (let item of _data["studentDocuments"]) this.studentDocuments.push(StudentDocumentTypeDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentDocumentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["documentId"] = this.documentId;
    data["documentName"] = this.documentName;
    data["documentUrl"] = this.documentUrl;
    data["documentFileType"] = this.documentFileType;
    data["documentBase64Image"] = this.documentBase64Image;
    data["documentImageContentType"] = this.documentImageContentType;
    if (Array.isArray(this.studentDocuments)) {
      data["studentDocuments"] = [];
      for (let item of this.studentDocuments) data["studentDocuments"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentDocumentDto();
    result.init(json);
    return result;
  }
}
class StudentDocumentTypeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.documentId = _data["documentId"];
      this.documentName = _data["documentName"];
      this.documentUrl = _data["documentUrl"];
      this.documentFileType = _data["documentFileType"];
      this.documentBase64Image = _data["documentBase64Image"];
      this.documentImageContentType = _data["documentImageContentType"];
      this.uploadedDate = _data["uploadedDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["uploadedDate"].toString()) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentDocumentTypeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["documentId"] = this.documentId;
    data["documentName"] = this.documentName;
    data["documentUrl"] = this.documentUrl;
    data["documentFileType"] = this.documentFileType;
    data["documentBase64Image"] = this.documentBase64Image;
    data["documentImageContentType"] = this.documentImageContentType;
    data["uploadedDate"] = this.uploadedDate ? this.uploadedDate.toISOString() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentDocumentTypeDto();
    result.init(json);
    return result;
  }
}
class TeacherDropdownResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["teacherDropdownList"])) {
        this.teacherDropdownList = [];
        for (let item of _data["teacherDropdownList"]) this.teacherDropdownList.push(TeacherDropDownDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherDropdownResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.teacherDropdownList)) {
      data["teacherDropdownList"] = [];
      for (let item of this.teacherDropdownList) data["teacherDropdownList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherDropdownResponseDto();
    result.init(json);
    return result;
  }
}
class TeacherDropDownDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.teacherId = _data["teacherId"];
      this.fullName = _data["fullName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherDropDownDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["teacherId"] = this.teacherId;
    data["fullName"] = this.fullName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherDropDownDto();
    result.init(json);
    return result;
  }
}
class StudentAttendanceMobileResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["lstStudentAttendance"])) {
        this.lstStudentAttendance = [];
        for (let item of _data["lstStudentAttendance"]) this.lstStudentAttendance.push(StudentAttendanceMobileDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentAttendanceMobileResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.lstStudentAttendance)) {
      data["lstStudentAttendance"] = [];
      for (let item of this.lstStudentAttendance) data["lstStudentAttendance"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentAttendanceMobileResponseDto();
    result.init(json);
    return result;
  }
}
class StudentAttendanceMobileDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.studentAttendanceId = _data["studentAttendanceId"];
      this.teacherId = _data["teacherId"];
      this.attendanceDateTime = _data["attendanceDateTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["attendanceDateTime"].toString()) : undefined;
      this.statusId = _data["statusId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentAttendanceMobileDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["studentAttendanceId"] = this.studentAttendanceId;
    data["teacherId"] = this.teacherId;
    data["attendanceDateTime"] = this.attendanceDateTime ? this.attendanceDateTime.toISOString() : undefined;
    data["statusId"] = this.statusId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentAttendanceMobileDto();
    result.init(json);
    return result;
  }
}
class SchoolVacationDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolVacationId = _data["schoolVacationId"];
      this.academicYearId = _data["academicYearId"];
      this.vacationName = _data["vacationName"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.ngbEndDate = _data["ngbEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEndDate"]) : undefined;
      this.userId = _data["userId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolVacationDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolVacationId"] = this.schoolVacationId;
    data["academicYearId"] = this.academicYearId;
    data["vacationName"] = this.vacationName;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["ngbEndDate"] = this.ngbEndDate ? this.ngbEndDate.toJSON() : undefined;
    data["userId"] = this.userId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolVacationDto();
    result.init(json);
    return result;
  }
}
class SchoolHolidayResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.userId = _data["userId"];
      if (Array.isArray(_data["holidayTypeDetailsList"])) {
        this.holidayTypeDetailsList = [];
        for (let item of _data["holidayTypeDetailsList"]) this.holidayTypeDetailsList.push(SchoolHolidayDetailDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolHolidayResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["userId"] = this.userId;
    if (Array.isArray(this.holidayTypeDetailsList)) {
      data["holidayTypeDetailsList"] = [];
      for (let item of this.holidayTypeDetailsList) data["holidayTypeDetailsList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolHolidayResponseDto();
    result.init(json);
    return result;
  }
}
class SchoolHolidayDetailDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolHolidayId = _data["schoolHolidayId"];
      this.academicYearId = _data["academicYearId"];
      this.dayNo = _data["dayNo"];
      this.calendarDate = _data["calendarDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["calendarDate"].toString()) : undefined;
      this.ngbCalendarDate = _data["ngbCalendarDate"] ? SchoolNgbDateModel.fromJS(_data["ngbCalendarDate"]) : undefined;
      this.holidayReason = _data["holidayReason"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolHolidayDetailDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolHolidayId"] = this.schoolHolidayId;
    data["academicYearId"] = this.academicYearId;
    data["dayNo"] = this.dayNo;
    data["calendarDate"] = this.calendarDate ? this.calendarDate.toISOString() : undefined;
    data["ngbCalendarDate"] = this.ngbCalendarDate ? this.ngbCalendarDate.toJSON() : undefined;
    data["holidayReason"] = this.holidayReason;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolHolidayDetailDto();
    result.init(json);
    return result;
  }
}
class ExistResposeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.calendarDate = _data["calendarDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["calendarDate"].toString()) : undefined;
      this.exist = _data["exist"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ExistResposeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["calendarDate"] = this.calendarDate ? this.calendarDate.toISOString() : undefined;
    data["exist"] = this.exist;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ExistResposeDto();
    result.init(json);
    return result;
  }
}
class CalendarDateRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.calendarDate = _data["calendarDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["calendarDate"].toString()) : undefined;
      this.ngbCalendarDate = _data["ngbCalendarDate"] ? SchoolNgbDateModel.fromJS(_data["ngbCalendarDate"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CalendarDateRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["calendarDate"] = this.calendarDate ? this.calendarDate.toISOString() : undefined;
    data["ngbCalendarDate"] = this.ngbCalendarDate ? this.ngbCalendarDate.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CalendarDateRequestDto();
    result.init(json);
    return result;
  }
}
class SchoolEventDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolEventId = _data["schoolEventId"];
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.gradeName = _data["gradeName"];
      this.divisionId = _data["divisionId"];
      this.divisionName = _data["divisionName"];
      if (Array.isArray(_data["classId"])) {
        this.classId = [];
        for (let item of _data["classId"]) this.classId.push(item);
      }
      this.eventTitle = _data["eventTitle"];
      this.eventDescription = _data["eventDescription"];
      this.eventFess = _data["eventFess"];
      this.eventVenue = _data["eventVenue"];
      this.eventCoordinator = _data["eventCoordinator"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.ngbEndDate = _data["ngbEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEndDate"]) : undefined;
      this.startTime = _data["startTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startTime"].toString()) : undefined;
      this.ngbStartTime = _data["ngbStartTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbStartTime"]) : undefined;
      this.endTime = _data["endTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endTime"].toString()) : undefined;
      this.ngbEndTime = _data["ngbEndTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbEndTime"]) : undefined;
      this.isCompulsory = _data["isCompulsory"];
      this.isPublished = _data["isPublished"];
      this.status = _data["status"];
      this.remark = _data["remark"];
      this.createdBy = _data["createdBy"];
      this.modifiedBy = _data["modifiedBy"];
      this.createdDate = _data["createdDate"];
      this.modifiedDate = _data["modifiedDate"];
      this.userId = _data["userId"];
      if (Array.isArray(_data["fileNameList"])) {
        this.fileNameList = [];
        for (let item of _data["fileNameList"]) this.fileNameList.push(SchoolEventFileDto.fromJS(item));
      }
      if (Array.isArray(_data["mediaFileArray"])) {
        this.mediaFileArray = [];
        for (let item of _data["mediaFileArray"]) this.mediaFileArray.push(SchoolEventFileDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolEventDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolEventId"] = this.schoolEventId;
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["gradeName"] = this.gradeName;
    data["divisionId"] = this.divisionId;
    data["divisionName"] = this.divisionName;
    if (Array.isArray(this.classId)) {
      data["classId"] = [];
      for (let item of this.classId) data["classId"].push(item);
    }
    data["eventTitle"] = this.eventTitle;
    data["eventDescription"] = this.eventDescription;
    data["eventFess"] = this.eventFess;
    data["eventVenue"] = this.eventVenue;
    data["eventCoordinator"] = this.eventCoordinator;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["ngbEndDate"] = this.ngbEndDate ? this.ngbEndDate.toJSON() : undefined;
    data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
    data["ngbStartTime"] = this.ngbStartTime ? this.ngbStartTime.toJSON() : undefined;
    data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined;
    data["ngbEndTime"] = this.ngbEndTime ? this.ngbEndTime.toJSON() : undefined;
    data["isCompulsory"] = this.isCompulsory;
    data["isPublished"] = this.isPublished;
    data["status"] = this.status;
    data["remark"] = this.remark;
    data["createdBy"] = this.createdBy;
    data["modifiedBy"] = this.modifiedBy;
    data["createdDate"] = this.createdDate;
    data["modifiedDate"] = this.modifiedDate;
    data["userId"] = this.userId;
    if (Array.isArray(this.fileNameList)) {
      data["fileNameList"] = [];
      for (let item of this.fileNameList) data["fileNameList"].push(item.toJSON());
    }
    if (Array.isArray(this.mediaFileArray)) {
      data["mediaFileArray"] = [];
      for (let item of this.mediaFileArray) data["mediaFileArray"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolEventDto();
    result.init(json);
    return result;
  }
}
class SchoolEventFileDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.base64Image = _data["base64Image"];
      this.imageContentType = _data["imageContentType"];
      this.fileName = _data["fileName"];
      this.fileType = _data["fileType"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolEventFileDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["base64Image"] = this.base64Image;
    data["imageContentType"] = this.imageContentType;
    data["fileName"] = this.fileName;
    data["fileType"] = this.fileType;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolEventFileDto();
    result.init(json);
    return result;
  }
}
class PublishUnpublishSchoolEventDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolEventId = _data["schoolEventId"];
      this.isPublished = _data["isPublished"];
      this.classId = _data["classId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PublishUnpublishSchoolEventDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolEventId"] = this.schoolEventId;
    data["isPublished"] = this.isPublished;
    data["classId"] = this.classId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PublishUnpublishSchoolEventDto();
    result.init(json);
    return result;
  }
}
class SchoolCalendarResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["eventHolidayList"])) {
        this.eventHolidayList = [];
        for (let item of _data["eventHolidayList"]) this.eventHolidayList.push(SchoolCalendarDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolCalendarResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.eventHolidayList)) {
      data["eventHolidayList"] = [];
      for (let item of this.eventHolidayList) data["eventHolidayList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolCalendarResponseDto();
    result.init(json);
    return result;
  }
}
class SchoolCalendarDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.eventType = _data["eventType"];
      this.id = _data["id"];
      this.academicYearId = _data["academicYearId"];
      this.eventTitle = _data["eventTitle"];
      this.eventFess = _data["eventFess"];
      this.eventCoordinator = _data["eventCoordinator"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.ngbEndDate = _data["ngbEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEndDate"]) : undefined;
      this.startTime = _data["startTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startTime"].toString()) : undefined;
      this.ngbStartTime = _data["ngbStartTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbStartTime"]) : undefined;
      this.endTime = _data["endTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endTime"].toString()) : undefined;
      this.ngbEndTime = _data["ngbEndTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbEndTime"]) : undefined;
      this.isPublished = _data["isPublished"];
      this.isCompulsory = _data["isCompulsory"];
      this.calendarDate = _data["calendarDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["calendarDate"].toString()) : undefined;
      this.ngbCalendarDate = _data["ngbCalendarDate"] ? SchoolNgbDateModel.fromJS(_data["ngbCalendarDate"]) : undefined;
      this.holidayReason = _data["holidayReason"];
      this.eventDescription = _data["eventDescription"];
      this.vacationName = _data["vacationName"];
      this.weeklyOffName = _data["weeklyOffName"];
      this.vacationStartDate = _data["vacationStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vacationStartDate"].toString()) : undefined;
      this.ngbVacationStartDate = _data["ngbVacationStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVacationStartDate"]) : undefined;
      this.vacationEndDate = _data["vacationEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vacationEndDate"].toString()) : undefined;
      this.ngbVacationEndDate = _data["ngbVacationEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVacationEndDate"]) : undefined;
      this.weeklyOffDate = _data["weeklyOffDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["weeklyOffDate"].toString()) : undefined;
      this.ngbWeeklyOffDate = _data["ngbWeeklyOffDate"] ? SchoolNgbDateModel.fromJS(_data["ngbWeeklyOffDate"]) : undefined;
      if (Array.isArray(_data["lstEventDetail"])) {
        this.lstEventDetail = [];
        for (let item of _data["lstEventDetail"]) this.lstEventDetail.push(SchoolCalendarEventDetailAppDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolCalendarDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["eventType"] = this.eventType;
    data["id"] = this.id;
    data["academicYearId"] = this.academicYearId;
    data["eventTitle"] = this.eventTitle;
    data["eventFess"] = this.eventFess;
    data["eventCoordinator"] = this.eventCoordinator;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["ngbEndDate"] = this.ngbEndDate ? this.ngbEndDate.toJSON() : undefined;
    data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
    data["ngbStartTime"] = this.ngbStartTime ? this.ngbStartTime.toJSON() : undefined;
    data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined;
    data["ngbEndTime"] = this.ngbEndTime ? this.ngbEndTime.toJSON() : undefined;
    data["isPublished"] = this.isPublished;
    data["isCompulsory"] = this.isCompulsory;
    data["calendarDate"] = this.calendarDate ? this.calendarDate.toISOString() : undefined;
    data["ngbCalendarDate"] = this.ngbCalendarDate ? this.ngbCalendarDate.toJSON() : undefined;
    data["holidayReason"] = this.holidayReason;
    data["eventDescription"] = this.eventDescription;
    data["vacationName"] = this.vacationName;
    data["weeklyOffName"] = this.weeklyOffName;
    data["vacationStartDate"] = this.vacationStartDate ? this.vacationStartDate.toISOString() : undefined;
    data["ngbVacationStartDate"] = this.ngbVacationStartDate ? this.ngbVacationStartDate.toJSON() : undefined;
    data["vacationEndDate"] = this.vacationEndDate ? this.vacationEndDate.toISOString() : undefined;
    data["ngbVacationEndDate"] = this.ngbVacationEndDate ? this.ngbVacationEndDate.toJSON() : undefined;
    data["weeklyOffDate"] = this.weeklyOffDate ? this.weeklyOffDate.toISOString() : undefined;
    data["ngbWeeklyOffDate"] = this.ngbWeeklyOffDate ? this.ngbWeeklyOffDate.toJSON() : undefined;
    if (Array.isArray(this.lstEventDetail)) {
      data["lstEventDetail"] = [];
      for (let item of this.lstEventDetail) data["lstEventDetail"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolCalendarDto();
    result.init(json);
    return result;
  }
}
class SchoolCalendarEventDetailAppDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolEventId = _data["schoolEventId"];
      this.schoolEventDetailsId = _data["schoolEventDetailsId"];
      this.fileName = _data["fileName"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolCalendarEventDetailAppDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolEventId"] = this.schoolEventId;
    data["schoolEventDetailsId"] = this.schoolEventDetailsId;
    data["fileName"] = this.fileName;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolCalendarEventDetailAppDto();
    result.init(json);
    return result;
  }
}
class SchoolCalendarAppResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["lstEvents"])) {
        this.lstEvents = [];
        for (let item of _data["lstEvents"]) this.lstEvents.push(SchoolCalendarDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolCalendarAppResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.lstEvents)) {
      data["lstEvents"] = [];
      for (let item of this.lstEvents) data["lstEvents"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolCalendarAppResponseDto();
    result.init(json);
    return result;
  }
}
class PromoteGridResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["promoteList"])) {
        this.promoteList = [];
        for (let item of _data["promoteList"]) this.promoteList.push(PromoteGridDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PromoteGridResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.promoteList)) {
      data["promoteList"] = [];
      for (let item of this.promoteList) data["promoteList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PromoteGridResponseDto();
    result.init(json);
    return result;
  }
}
class PromoteGridDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.studentId = _data["studentId"];
      this.fullName = _data["fullName"];
      this.rollNumber = _data["rollNumber"];
      this.userId = _data["userId"];
      this.isPassed = _data["isPassed"];
      this.promotedAcademicYearId = _data["promotedAcademicYearId"];
      this.promotedGradeId = _data["promotedGradeId"];
      this.promotedDivisionId = _data["promotedDivisionId"];
      this.statusId = _data["statusId"];
      this.isChecked = _data["isChecked"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PromoteGridDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["studentId"] = this.studentId;
    data["fullName"] = this.fullName;
    data["rollNumber"] = this.rollNumber;
    data["userId"] = this.userId;
    data["isPassed"] = this.isPassed;
    data["promotedAcademicYearId"] = this.promotedAcademicYearId;
    data["promotedGradeId"] = this.promotedGradeId;
    data["promotedDivisionId"] = this.promotedDivisionId;
    data["statusId"] = this.statusId;
    data["isChecked"] = this.isChecked;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PromoteGridDto();
    result.init(json);
    return result;
  }
}
class PromoteGridRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PromoteGridRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PromoteGridRequestDto();
    result.init(json);
    return result;
  }
}
class PaymentAnalyticsDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.paymentAnalyticsSchool = _data["paymentAnalyticsSchool"] ? PaymentAnalyticsSchoolDto.fromJS(_data["paymentAnalyticsSchool"]) : undefined;
      if (Array.isArray(_data["paymentAnalyticsGrade"])) {
        this.paymentAnalyticsGrade = [];
        for (let item of _data["paymentAnalyticsGrade"]) this.paymentAnalyticsGrade.push(PaymentAnalyticsGradeDto.fromJS(item));
      }
      if (Array.isArray(_data["paymentAnalyticsDivision"])) {
        this.paymentAnalyticsDivision = [];
        for (let item of _data["paymentAnalyticsDivision"]) this.paymentAnalyticsDivision.push(PaymentAnalyticsDivisionDto.fromJS(item));
      }
      if (Array.isArray(_data["paymentAnalyticsStudent"])) {
        this.paymentAnalyticsStudent = [];
        for (let item of _data["paymentAnalyticsStudent"]) this.paymentAnalyticsStudent.push(PaymentAnalyticsStudentDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentAnalyticsDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["paymentAnalyticsSchool"] = this.paymentAnalyticsSchool ? this.paymentAnalyticsSchool.toJSON() : undefined;
    if (Array.isArray(this.paymentAnalyticsGrade)) {
      data["paymentAnalyticsGrade"] = [];
      for (let item of this.paymentAnalyticsGrade) data["paymentAnalyticsGrade"].push(item.toJSON());
    }
    if (Array.isArray(this.paymentAnalyticsDivision)) {
      data["paymentAnalyticsDivision"] = [];
      for (let item of this.paymentAnalyticsDivision) data["paymentAnalyticsDivision"].push(item.toJSON());
    }
    if (Array.isArray(this.paymentAnalyticsStudent)) {
      data["paymentAnalyticsStudent"] = [];
      for (let item of this.paymentAnalyticsStudent) data["paymentAnalyticsStudent"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PaymentAnalyticsDto();
    result.init(json);
    return result;
  }
}
class PaymentAnalyticsSchoolDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.schoolName = _data["schoolName"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.receivableFee = _data["receivableFee"];
      this.collectionInPercentage = _data["collectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentAnalyticsSchoolDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["schoolName"] = this.schoolName;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["receivableFee"] = this.receivableFee;
    data["collectionInPercentage"] = this.collectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PaymentAnalyticsSchoolDto();
    result.init(json);
    return result;
  }
}
class PaymentAnalyticsGradeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.academicYearId = _data["academicYearId"];
      this.gradeName = _data["gradeName"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.receivableFee = _data["receivableFee"];
      this.collectionInPercentage = _data["collectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentAnalyticsGradeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["academicYearId"] = this.academicYearId;
    data["gradeName"] = this.gradeName;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["receivableFee"] = this.receivableFee;
    data["collectionInPercentage"] = this.collectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PaymentAnalyticsGradeDto();
    result.init(json);
    return result;
  }
}
class PaymentAnalyticsDivisionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.academicYearId = _data["academicYearId"];
      this.divisionName = _data["divisionName"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.receivableFee = _data["receivableFee"];
      this.collectionInPercentage = _data["collectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentAnalyticsDivisionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["academicYearId"] = this.academicYearId;
    data["divisionName"] = this.divisionName;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["receivableFee"] = this.receivableFee;
    data["collectionInPercentage"] = this.collectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PaymentAnalyticsDivisionDto();
    result.init(json);
    return result;
  }
}
class PaymentAnalyticsStudentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.studentName = _data["studentName"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.academicYearId = _data["academicYearId"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.receivableFee = _data["receivableFee"];
      this.collectionInPercentage = _data["collectionInPercentage"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentAnalyticsStudentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["studentName"] = this.studentName;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["academicYearId"] = this.academicYearId;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["receivableFee"] = this.receivableFee;
    data["collectionInPercentage"] = this.collectionInPercentage;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PaymentAnalyticsStudentDto();
    result.init(json);
    return result;
  }
}
class ParentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.parentId = _data["parentId"];
      this.parentTypeId = _data["parentTypeId"];
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.gender = _data["gender"];
      this.contactNumber = _data["contactNumber"];
      this.mobileNumber = _data["mobileNumber"];
      this.emailId = _data["emailId"];
      this.addressLine1 = _data["addressLine1"];
      this.addressLine2 = _data["addressLine2"];
      this.talukaId = _data["talukaId"];
      this.districtId = _data["districtId"];
      this.stateId = _data["stateId"];
      this.countryId = _data["countryId"];
      this.talukaName = _data["talukaName"];
      this.districtName = _data["districtName"];
      this.stateName = _data["stateName"];
      this.countryName = _data["countryName"];
      this.zipcode = _data["zipcode"];
      this.adharNumber = _data["adharNumber"];
      this.education = _data["education"];
      this.occupation = _data["occupation"];
      this.annualIncome = _data["annualIncome"];
      this.bloodGroup = _data["bloodGroup"];
      this.profileImageURL = _data["profileImageURL"];
      this.ngbBirthDate = _data["ngbBirthDate"] ? SchoolNgbDateModel.fromJS(_data["ngbBirthDate"]) : undefined;
      this.birthDate = _data["birthDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["birthDate"].toString()) : undefined;
      this.userId = _data["userId"];
      this.studentId = _data["studentId"];
      this.profileBase64Image = _data["profileBase64Image"];
      this.profileImageContentType = _data["profileImageContentType"];
      this.studentFullName = _data["studentFullName"];
      this.parentFullName = _data["parentFullName"];
      this.parentType = _data["parentType"];
      this.address = _data["address"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["parentId"] = this.parentId;
    data["parentTypeId"] = this.parentTypeId;
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["gender"] = this.gender;
    data["contactNumber"] = this.contactNumber;
    data["mobileNumber"] = this.mobileNumber;
    data["emailId"] = this.emailId;
    data["addressLine1"] = this.addressLine1;
    data["addressLine2"] = this.addressLine2;
    data["talukaId"] = this.talukaId;
    data["districtId"] = this.districtId;
    data["stateId"] = this.stateId;
    data["countryId"] = this.countryId;
    data["talukaName"] = this.talukaName;
    data["districtName"] = this.districtName;
    data["stateName"] = this.stateName;
    data["countryName"] = this.countryName;
    data["zipcode"] = this.zipcode;
    data["adharNumber"] = this.adharNumber;
    data["education"] = this.education;
    data["occupation"] = this.occupation;
    data["annualIncome"] = this.annualIncome;
    data["bloodGroup"] = this.bloodGroup;
    data["profileImageURL"] = this.profileImageURL;
    data["ngbBirthDate"] = this.ngbBirthDate ? this.ngbBirthDate.toJSON() : undefined;
    data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : undefined;
    data["userId"] = this.userId;
    data["studentId"] = this.studentId;
    data["profileBase64Image"] = this.profileBase64Image;
    data["profileImageContentType"] = this.profileImageContentType;
    data["studentFullName"] = this.studentFullName;
    data["parentFullName"] = this.parentFullName;
    data["parentType"] = this.parentType;
    data["address"] = this.address;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentDto();
    result.init(json);
    return result;
  }
}
class ParentDeleteRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentDeleteRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentDeleteRespose();
    result.init(json);
    return result;
  }
}
class ParentAppNoticeResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["noticeList"])) {
        this.noticeList = [];
        for (let item of _data["noticeList"]) this.noticeList.push(ParentAppNoticeDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentAppNoticeResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.noticeList)) {
      data["noticeList"] = [];
      for (let item of this.noticeList) data["noticeList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentAppNoticeResponseDto();
    result.init(json);
    return result;
  }
}
class ParentAppNoticeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.noticeId = _data["noticeId"];
      this.studentId = _data["studentId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.isImportant = _data["isImportant"];
      this.noticeToType = _data["noticeToType"];
      this.noticeTitle = _data["noticeTitle"];
      this.noticeDescription = _data["noticeDescription"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.ngbEndDate = _data["ngbEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEndDate"]) : undefined;
      this.isPublished = _data["isPublished"];
      this.userId = _data["userId"];
      this.roleId = _data["roleId"];
      this.roleKey = _data["roleKey"];
      this.name = _data["name"];
      this.roleName = _data["roleName"];
      this.createdDate = _data["createdDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["createdDate"].toString()) : undefined;
      if (Array.isArray(_data["lstNoticeDetail"])) {
        this.lstNoticeDetail = [];
        for (let item of _data["lstNoticeDetail"]) this.lstNoticeDetail.push(ParentAppNoticeDetailDto.fromJS(item));
      }
      if (Array.isArray(_data["lstNoticeMediaDetail"])) {
        this.lstNoticeMediaDetail = [];
        for (let item of _data["lstNoticeMediaDetail"]) this.lstNoticeMediaDetail.push(NoticetMediaContentDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentAppNoticeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["noticeId"] = this.noticeId;
    data["studentId"] = this.studentId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["isImportant"] = this.isImportant;
    data["noticeToType"] = this.noticeToType;
    data["noticeTitle"] = this.noticeTitle;
    data["noticeDescription"] = this.noticeDescription;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["ngbEndDate"] = this.ngbEndDate ? this.ngbEndDate.toJSON() : undefined;
    data["isPublished"] = this.isPublished;
    data["userId"] = this.userId;
    data["roleId"] = this.roleId;
    data["roleKey"] = this.roleKey;
    data["name"] = this.name;
    data["roleName"] = this.roleName;
    data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
    if (Array.isArray(this.lstNoticeDetail)) {
      data["lstNoticeDetail"] = [];
      for (let item of this.lstNoticeDetail) data["lstNoticeDetail"].push(item.toJSON());
    }
    if (Array.isArray(this.lstNoticeMediaDetail)) {
      data["lstNoticeMediaDetail"] = [];
      for (let item of this.lstNoticeMediaDetail) data["lstNoticeMediaDetail"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentAppNoticeDto();
    result.init(json);
    return result;
  }
}
class ParentAppNoticeDetailDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.noticeId = _data["noticeId"];
      this.fileName = _data["fileName"];
      this.fileType = _data["fileType"];
      this.fullPath = _data["fullPath"];
      this.contentUrl = _data["contentUrl"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentAppNoticeDetailDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["noticeId"] = this.noticeId;
    data["fileName"] = this.fileName;
    data["fileType"] = this.fileType;
    data["fullPath"] = this.fullPath;
    data["contentUrl"] = this.contentUrl;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentAppNoticeDetailDto();
    result.init(json);
    return result;
  }
}
class NoticetMediaContentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.noticeId = _data["noticeId"];
      this.contentUrl = _data["contentUrl"];
      this.fileName = _data["fileName"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new NoticetMediaContentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["noticeId"] = this.noticeId;
    data["contentUrl"] = this.contentUrl;
    data["fileName"] = this.fileName;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new NoticetMediaContentDto();
    result.init(json);
    return result;
  }
}
class ParentAppNoticeRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.studentId = _data["studentId"];
      this.month = _data["month"];
      this.year = _data["year"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentAppNoticeRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["studentId"] = this.studentId;
    data["month"] = this.month;
    data["year"] = this.year;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentAppNoticeRequestDto();
    result.init(json);
    return result;
  }
}
class StudentDetailMobileResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["lstStudents"])) {
        this.lstStudents = [];
        for (let item of _data["lstStudents"]) this.lstStudents.push(StudentDetailMobileDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentDetailMobileResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.lstStudents)) {
      data["lstStudents"] = [];
      for (let item of this.lstStudents) data["lstStudents"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentDetailMobileResponseDto();
    result.init(json);
    return result;
  }
}
class StudentDetailMobileDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.parentId = _data["parentId"];
      this.studentFullName = _data["studentFullName"];
      this.classId = _data["classId"];
      this.className = _data["className"];
      this.rollNumber = _data["rollNumber"];
      this.profileImageURL = _data["profileImageURL"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentDetailMobileDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["parentId"] = this.parentId;
    data["studentFullName"] = this.studentFullName;
    data["classId"] = this.classId;
    data["className"] = this.className;
    data["rollNumber"] = this.rollNumber;
    data["profileImageURL"] = this.profileImageURL;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentDetailMobileDto();
    result.init(json);
    return result;
  }
}
class StudentProfileMobileDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.studentFullName = _data["studentFullName"];
      this.currentAddressLine1 = _data["currentAddressLine1"];
      this.currentAddressLine2 = _data["currentAddressLine2"];
      this.currentCountryId = _data["currentCountryId"];
      this.currentStateId = _data["currentStateId"];
      this.currentDistrictId = _data["currentDistrictId"];
      this.currentTalukaId = _data["currentTalukaId"];
      this.currentZipcode = _data["currentZipcode"];
      this.profileImageURL = _data["profileImageURL"];
      this.profileImageContentType = _data["profileImageContentType"];
      this.profileBase64Image = _data["profileBase64Image"];
      this.userId = _data["userId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentProfileMobileDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["studentFullName"] = this.studentFullName;
    data["currentAddressLine1"] = this.currentAddressLine1;
    data["currentAddressLine2"] = this.currentAddressLine2;
    data["currentCountryId"] = this.currentCountryId;
    data["currentStateId"] = this.currentStateId;
    data["currentDistrictId"] = this.currentDistrictId;
    data["currentTalukaId"] = this.currentTalukaId;
    data["currentZipcode"] = this.currentZipcode;
    data["profileImageURL"] = this.profileImageURL;
    data["profileImageContentType"] = this.profileImageContentType;
    data["profileBase64Image"] = this.profileBase64Image;
    data["userId"] = this.userId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentProfileMobileDto();
    result.init(json);
    return result;
  }
}
class ParentProfileMobileResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.fatherDetail = _data["fatherDetail"] ? ParentProfileMobileDto.fromJS(_data["fatherDetail"]) : undefined;
      this.motherDetail = _data["motherDetail"] ? ParentProfileMobileDto.fromJS(_data["motherDetail"]) : undefined;
      this.guardianDetail = _data["guardianDetail"] ? ParentProfileMobileDto.fromJS(_data["guardianDetail"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentProfileMobileResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["fatherDetail"] = this.fatherDetail ? this.fatherDetail.toJSON() : undefined;
    data["motherDetail"] = this.motherDetail ? this.motherDetail.toJSON() : undefined;
    data["guardianDetail"] = this.guardianDetail ? this.guardianDetail.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentProfileMobileResponseDto();
    result.init(json);
    return result;
  }
}
class ParentProfileMobileDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.parentId = _data["parentId"];
      this.parentTypeId = _data["parentTypeId"];
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.fullName = _data["fullName"];
      this.addressLine1 = _data["addressLine1"];
      this.addressLine2 = _data["addressLine2"];
      this.countryId = _data["countryId"];
      this.stateId = _data["stateId"];
      this.districtId = _data["districtId"];
      this.talukaId = _data["talukaId"];
      this.zipcode = _data["zipcode"];
      this.profileImageURL = _data["profileImageURL"];
      this.profileImageContentType = _data["profileImageContentType"];
      this.profileBase64Image = _data["profileBase64Image"];
      this.userId = _data["userId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentProfileMobileDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["parentId"] = this.parentId;
    data["parentTypeId"] = this.parentTypeId;
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["fullName"] = this.fullName;
    data["addressLine1"] = this.addressLine1;
    data["addressLine2"] = this.addressLine2;
    data["countryId"] = this.countryId;
    data["stateId"] = this.stateId;
    data["districtId"] = this.districtId;
    data["talukaId"] = this.talukaId;
    data["zipcode"] = this.zipcode;
    data["profileImageURL"] = this.profileImageURL;
    data["profileImageContentType"] = this.profileImageContentType;
    data["profileBase64Image"] = this.profileBase64Image;
    data["userId"] = this.userId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentProfileMobileDto();
    result.init(json);
    return result;
  }
}
class FeePaymentTopSectionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.totalFee = _data["totalFee"];
      this.totalPaid = _data["totalPaid"];
      this.totalDue = _data["totalDue"];
      this.totalDiscount = _data["totalDiscount"];
      this.feeWavierTypeId = _data["feeWavierTypeId"];
      if (Array.isArray(_data["feePaymentParticularSectionDtoList"])) {
        this.feePaymentParticularSectionDtoList = [];
        for (let item of _data["feePaymentParticularSectionDtoList"]) this.feePaymentParticularSectionDtoList.push(FeePaymentParticularSectionDto.fromJS(item));
      }
      if (Array.isArray(_data["feePaymentAndDiscountSectionDtoList"])) {
        this.feePaymentAndDiscountSectionDtoList = [];
        for (let item of _data["feePaymentAndDiscountSectionDtoList"]) this.feePaymentAndDiscountSectionDtoList.push(FeePaymentAndDiscountSectionDto.fromJS(item));
      }
      if (Array.isArray(_data["paymentHistoryReceiptDtoList"])) {
        this.paymentHistoryReceiptDtoList = [];
        for (let item of _data["paymentHistoryReceiptDtoList"]) this.paymentHistoryReceiptDtoList.push(PaymentHistoryReceiptDto.fromJS(item));
      }
      if (Array.isArray(_data["feeInstallmentDetailDtoList"])) {
        this.feeInstallmentDetailDtoList = [];
        for (let item of _data["feeInstallmentDetailDtoList"]) this.feeInstallmentDetailDtoList.push(FeeInstallmentDetailDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeePaymentTopSectionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["totalFee"] = this.totalFee;
    data["totalPaid"] = this.totalPaid;
    data["totalDue"] = this.totalDue;
    data["totalDiscount"] = this.totalDiscount;
    data["feeWavierTypeId"] = this.feeWavierTypeId;
    if (Array.isArray(this.feePaymentParticularSectionDtoList)) {
      data["feePaymentParticularSectionDtoList"] = [];
      for (let item of this.feePaymentParticularSectionDtoList) data["feePaymentParticularSectionDtoList"].push(item.toJSON());
    }
    if (Array.isArray(this.feePaymentAndDiscountSectionDtoList)) {
      data["feePaymentAndDiscountSectionDtoList"] = [];
      for (let item of this.feePaymentAndDiscountSectionDtoList) data["feePaymentAndDiscountSectionDtoList"].push(item.toJSON());
    }
    if (Array.isArray(this.paymentHistoryReceiptDtoList)) {
      data["paymentHistoryReceiptDtoList"] = [];
      for (let item of this.paymentHistoryReceiptDtoList) data["paymentHistoryReceiptDtoList"].push(item.toJSON());
    }
    if (Array.isArray(this.feeInstallmentDetailDtoList)) {
      data["feeInstallmentDetailDtoList"] = [];
      for (let item of this.feeInstallmentDetailDtoList) data["feeInstallmentDetailDtoList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeePaymentTopSectionDto();
    result.init(json);
    return result;
  }
}
class FeePaymentParticularSectionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.particularName = _data["particularName"];
      this.totalFee = _data["totalFee"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeePaymentParticularSectionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["particularName"] = this.particularName;
    data["totalFee"] = this.totalFee;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeePaymentParticularSectionDto();
    result.init(json);
    return result;
  }
}
class FeePaymentAndDiscountSectionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeWavierDisplayName = _data["feeWavierDisplayName"];
      this.feeWavierTypeId = _data["feeWavierTypeId"];
      this.totalFee = _data["totalFee"];
      this.discountInPercent = _data["discountInPercent"];
      this.applicableFee = _data["applicableFee"];
      this.numberOfInstallments = _data["numberOfInstallments"];
      this.discountEndDate = _data["discountEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["discountEndDate"].toString()) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeePaymentAndDiscountSectionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeWavierDisplayName"] = this.feeWavierDisplayName;
    data["feeWavierTypeId"] = this.feeWavierTypeId;
    data["totalFee"] = this.totalFee;
    data["discountInPercent"] = this.discountInPercent;
    data["applicableFee"] = this.applicableFee;
    data["numberOfInstallments"] = this.numberOfInstallments;
    data["discountEndDate"] = this.discountEndDate ? this.discountEndDate.toISOString() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeePaymentAndDiscountSectionDto();
    result.init(json);
    return result;
  }
}
class PaymentHistoryReceiptDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.installmentNumber = _data["installmentNumber"];
      this.invoiceNumber = _data["invoiceNumber"];
      this.onlineTransactionDateTime = _data["onlineTransactionDateTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["onlineTransactionDateTime"].toString()) : undefined;
      this.paidAmount = _data["paidAmount"];
      this.paymentTypeName = _data["paymentTypeName"];
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.onlineTransactionId = _data["onlineTransactionId"];
      this.isChequeOrDDClear = _data["isChequeOrDDClear"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentHistoryReceiptDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["installmentNumber"] = this.installmentNumber;
    data["invoiceNumber"] = this.invoiceNumber;
    data["onlineTransactionDateTime"] = this.onlineTransactionDateTime ? this.onlineTransactionDateTime.toISOString() : undefined;
    data["paidAmount"] = this.paidAmount;
    data["paymentTypeName"] = this.paymentTypeName;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["onlineTransactionId"] = this.onlineTransactionId;
    data["isChequeOrDDClear"] = this.isChequeOrDDClear;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PaymentHistoryReceiptDto();
    result.init(json);
    return result;
  }
}
class FeeInstallmentDetailDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.discountEndDate = _data["discountEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["discountEndDate"].toString()) : undefined;
      this.lateFeeStartDate = _data["lateFeeStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["lateFeeStartDate"].toString()) : undefined;
      this.feeWavierTypeId = _data["feeWavierTypeId"];
      this.installmentNumber = _data["installmentNumber"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeeInstallmentDetailDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["discountEndDate"] = this.discountEndDate ? this.discountEndDate.toISOString() : undefined;
    data["lateFeeStartDate"] = this.lateFeeStartDate ? this.lateFeeStartDate.toISOString() : undefined;
    data["feeWavierTypeId"] = this.feeWavierTypeId;
    data["installmentNumber"] = this.installmentNumber;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeeInstallmentDetailDto();
    result.init(json);
    return result;
  }
}
class TransportFeePaymentTopSectionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.totalFee = _data["totalFee"];
      this.totalPaid = _data["totalPaid"];
      this.totalDue = _data["totalDue"];
      this.totalDiscount = _data["totalDiscount"];
      if (Array.isArray(_data["transportFeePaymentParticularSectionDtoList"])) {
        this.transportFeePaymentParticularSectionDtoList = [];
        for (let item of _data["transportFeePaymentParticularSectionDtoList"]) this.transportFeePaymentParticularSectionDtoList.push(TransportFeePaymentParticularSectionDto.fromJS(item));
      }
      if (Array.isArray(_data["transportPaymentHistoryReceiptDtoList"])) {
        this.transportPaymentHistoryReceiptDtoList = [];
        for (let item of _data["transportPaymentHistoryReceiptDtoList"]) this.transportPaymentHistoryReceiptDtoList.push(TransportPaymentHistoryReceiptDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeePaymentTopSectionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["totalFee"] = this.totalFee;
    data["totalPaid"] = this.totalPaid;
    data["totalDue"] = this.totalDue;
    data["totalDiscount"] = this.totalDiscount;
    if (Array.isArray(this.transportFeePaymentParticularSectionDtoList)) {
      data["transportFeePaymentParticularSectionDtoList"] = [];
      for (let item of this.transportFeePaymentParticularSectionDtoList) data["transportFeePaymentParticularSectionDtoList"].push(item.toJSON());
    }
    if (Array.isArray(this.transportPaymentHistoryReceiptDtoList)) {
      data["transportPaymentHistoryReceiptDtoList"] = [];
      for (let item of this.transportPaymentHistoryReceiptDtoList) data["transportPaymentHistoryReceiptDtoList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeePaymentTopSectionDto();
    result.init(json);
    return result;
  }
}
class TransportFeePaymentParticularSectionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.consumerId = _data["consumerId"];
      this.roleId = _data["roleId"];
      this.transportConsumerStoppageMappingId = _data["transportConsumerStoppageMappingId"];
      this.routeName = _data["routeName"];
      this.pickDropId = _data["pickDropId"];
      this.pickDropPrice = _data["pickDropPrice"];
      this.months = _data["months"];
      this.fromDateString = _data["fromDateString"];
      this.toDateString = _data["toDateString"];
      this.stoppageName = _data["stoppageName"];
      this.academicYearId = _data["academicYearId"];
      this.academicYearKey = _data["academicYearKey"];
      this.fullName = _data["fullName"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.paidAmount = _data["paidAmount"];
      this.otherPaidAmount = _data["otherPaidAmount"];
      this.dueAmount = _data["dueAmount"];
      this.chequeClearedAmount = _data["chequeClearedAmount"];
      this.chequeUnclearAmount = _data["chequeUnclearAmount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportFeePaymentParticularSectionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["consumerId"] = this.consumerId;
    data["roleId"] = this.roleId;
    data["transportConsumerStoppageMappingId"] = this.transportConsumerStoppageMappingId;
    data["routeName"] = this.routeName;
    data["pickDropId"] = this.pickDropId;
    data["pickDropPrice"] = this.pickDropPrice;
    data["months"] = this.months;
    data["fromDateString"] = this.fromDateString;
    data["toDateString"] = this.toDateString;
    data["stoppageName"] = this.stoppageName;
    data["academicYearId"] = this.academicYearId;
    data["academicYearKey"] = this.academicYearKey;
    data["fullName"] = this.fullName;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["paidAmount"] = this.paidAmount;
    data["otherPaidAmount"] = this.otherPaidAmount;
    data["dueAmount"] = this.dueAmount;
    data["chequeClearedAmount"] = this.chequeClearedAmount;
    data["chequeUnclearAmount"] = this.chequeUnclearAmount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportFeePaymentParticularSectionDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentHistoryReceiptDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.installmentNumber = _data["installmentNumber"];
      this.invoiceNumber = _data["invoiceNumber"];
      this.onlineTransactionDateTime = _data["onlineTransactionDateTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["onlineTransactionDateTime"].toString()) : undefined;
      this.paidAmount = _data["paidAmount"];
      this.paymentTypeName = _data["paymentTypeName"];
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.onlineTransactionId = _data["onlineTransactionId"];
      this.isChequeOrDDClear = _data["isChequeOrDDClear"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentHistoryReceiptDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["installmentNumber"] = this.installmentNumber;
    data["invoiceNumber"] = this.invoiceNumber;
    data["onlineTransactionDateTime"] = this.onlineTransactionDateTime ? this.onlineTransactionDateTime.toISOString() : undefined;
    data["paidAmount"] = this.paidAmount;
    data["paymentTypeName"] = this.paymentTypeName;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["onlineTransactionId"] = this.onlineTransactionId;
    data["isChequeOrDDClear"] = this.isChequeOrDDClear;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentHistoryReceiptDto();
    result.init(json);
    return result;
  }
}
class OneMonthEventParentAppResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["oneMonthEventList"])) {
        this.oneMonthEventList = [];
        for (let item of _data["oneMonthEventList"]) this.oneMonthEventList.push(OneMonthEventParentAppDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new OneMonthEventParentAppResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.oneMonthEventList)) {
      data["oneMonthEventList"] = [];
      for (let item of this.oneMonthEventList) data["oneMonthEventList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new OneMonthEventParentAppResponseDto();
    result.init(json);
    return result;
  }
}
class OneMonthEventParentAppDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolEventId = _data["schoolEventId"];
      this.academicYearId = _data["academicYearId"];
      this.classId = _data["classId"];
      this.gradeId = _data["gradeId"];
      this.gradeName = _data["gradeName"];
      this.divisionId = _data["divisionId"];
      this.divisionName = _data["divisionName"];
      this.eventTitle = _data["eventTitle"];
      this.eventDescription = _data["eventDescription"];
      this.eventFess = _data["eventFess"];
      this.eventVenue = _data["eventVenue"];
      this.eventCoordinator = _data["eventCoordinator"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.ngbEndDate = _data["ngbEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEndDate"]) : undefined;
      this.startTime = _data["startTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startTime"].toString()) : undefined;
      this.ngbStartTime = _data["ngbStartTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbStartTime"]) : undefined;
      this.endTime = _data["endTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endTime"].toString()) : undefined;
      this.ngbEndTime = _data["ngbEndTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbEndTime"]) : undefined;
      this.isCompulsory = _data["isCompulsory"];
      this.isPublished = _data["isPublished"];
      if (Array.isArray(_data["lstEventDetail"])) {
        this.lstEventDetail = [];
        for (let item of _data["lstEventDetail"]) this.lstEventDetail.push(OneMonthEventFileDetailsParentAppDto.fromJS(item));
      }
      if (Array.isArray(_data["lstEventDate"])) {
        this.lstEventDate = [];
        for (let item of _data["lstEventDate"]) this.lstEventDate.push(OneMonthEventDateParentAppDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new OneMonthEventParentAppDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolEventId"] = this.schoolEventId;
    data["academicYearId"] = this.academicYearId;
    data["classId"] = this.classId;
    data["gradeId"] = this.gradeId;
    data["gradeName"] = this.gradeName;
    data["divisionId"] = this.divisionId;
    data["divisionName"] = this.divisionName;
    data["eventTitle"] = this.eventTitle;
    data["eventDescription"] = this.eventDescription;
    data["eventFess"] = this.eventFess;
    data["eventVenue"] = this.eventVenue;
    data["eventCoordinator"] = this.eventCoordinator;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["ngbEndDate"] = this.ngbEndDate ? this.ngbEndDate.toJSON() : undefined;
    data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
    data["ngbStartTime"] = this.ngbStartTime ? this.ngbStartTime.toJSON() : undefined;
    data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined;
    data["ngbEndTime"] = this.ngbEndTime ? this.ngbEndTime.toJSON() : undefined;
    data["isCompulsory"] = this.isCompulsory;
    data["isPublished"] = this.isPublished;
    if (Array.isArray(this.lstEventDetail)) {
      data["lstEventDetail"] = [];
      for (let item of this.lstEventDetail) data["lstEventDetail"].push(item.toJSON());
    }
    if (Array.isArray(this.lstEventDate)) {
      data["lstEventDate"] = [];
      for (let item of this.lstEventDate) data["lstEventDate"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new OneMonthEventParentAppDto();
    result.init(json);
    return result;
  }
}
class OneMonthEventFileDetailsParentAppDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolEventId = _data["schoolEventId"];
      this.schoolEventDetailsId = _data["schoolEventDetailsId"];
      this.fileName = _data["fileName"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new OneMonthEventFileDetailsParentAppDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolEventId"] = this.schoolEventId;
    data["schoolEventDetailsId"] = this.schoolEventDetailsId;
    data["fileName"] = this.fileName;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new OneMonthEventFileDetailsParentAppDto();
    result.init(json);
    return result;
  }
}
class OneMonthEventDateParentAppDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolEventId = _data["schoolEventId"];
      this.eventStartDate = _data["eventStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["eventStartDate"].toString()) : undefined;
      this.eventEndDate = _data["eventEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["eventEndDate"].toString()) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new OneMonthEventDateParentAppDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolEventId"] = this.schoolEventId;
    data["eventStartDate"] = this.eventStartDate ? this.eventStartDate.toISOString() : undefined;
    data["eventEndDate"] = this.eventEndDate ? this.eventEndDate.toISOString() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new OneMonthEventDateParentAppDto();
    result.init(json);
    return result;
  }
}
class TeacherOneDayLecturesParentAppResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["teacherOneDayLectureList"])) {
        this.teacherOneDayLectureList = [];
        for (let item of _data["teacherOneDayLectureList"]) this.teacherOneDayLectureList.push(TeacherOneDayLecturesParentAppDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherOneDayLecturesParentAppResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.teacherOneDayLectureList)) {
      data["teacherOneDayLectureList"] = [];
      for (let item of this.teacherOneDayLectureList) data["teacherOneDayLectureList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherOneDayLecturesParentAppResponseDto();
    result.init(json);
    return result;
  }
}
class TeacherOneDayLecturesParentAppDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.teacherName = _data["teacherName"];
      this.startTime = _data["startTime"];
      this.endTime = _data["endTime"];
      this.gradeId = _data["gradeId"];
      this.classId = _data["classId"];
      this.gradeName = _data["gradeName"];
      this.divisionId = _data["divisionId"];
      this.divisionName = _data["divisionName"];
      this.dayNo = _data["dayNo"];
      this.subjectId = _data["subjectId"];
      this.subjectName = _data["subjectName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherOneDayLecturesParentAppDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["teacherName"] = this.teacherName;
    data["startTime"] = this.startTime;
    data["endTime"] = this.endTime;
    data["gradeId"] = this.gradeId;
    data["classId"] = this.classId;
    data["gradeName"] = this.gradeName;
    data["divisionId"] = this.divisionId;
    data["divisionName"] = this.divisionName;
    data["dayNo"] = this.dayNo;
    data["subjectId"] = this.subjectId;
    data["subjectName"] = this.subjectName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherOneDayLecturesParentAppDto();
    result.init(json);
    return result;
  }
}
class MissingAttendanceParentAppDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.status = _data["status"];
      this.studentId = _data["studentId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new MissingAttendanceParentAppDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["status"] = this.status;
    data["studentId"] = this.studentId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new MissingAttendanceParentAppDto();
    result.init(json);
    return result;
  }
}
class StudentGradeDivisionParentAppDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.gradeName = _data["gradeName"];
      this.divisionId = _data["divisionId"];
      this.divisionName = _data["divisionName"];
      this.fullName = _data["fullName"];
      this.studentId = _data["studentId"];
      this.parentId = _data["parentId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentGradeDivisionParentAppDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["gradeName"] = this.gradeName;
    data["divisionId"] = this.divisionId;
    data["divisionName"] = this.divisionName;
    data["fullName"] = this.fullName;
    data["studentId"] = this.studentId;
    data["parentId"] = this.parentId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentGradeDivisionParentAppDto();
    result.init(json);
    return result;
  }
}
class SchoolParentCalendarResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["parentLstEvents"])) {
        this.parentLstEvents = [];
        for (let item of _data["parentLstEvents"]) this.parentLstEvents.push(CalendarParentAppModuleDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolParentCalendarResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.parentLstEvents)) {
      data["parentLstEvents"] = [];
      for (let item of this.parentLstEvents) data["parentLstEvents"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolParentCalendarResponseDto();
    result.init(json);
    return result;
  }
}
class CalendarParentAppModuleDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolEventId = _data["schoolEventId"];
      this.id = _data["id"];
      this.eventType = _data["eventType"];
      this.academicYearId = _data["academicYearId"];
      this.classId = _data["classId"];
      this.eventTitle = _data["eventTitle"];
      this.eventCoordinator = _data["eventCoordinator"];
      this.eventFess = _data["eventFess"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.ngbEndDate = _data["ngbEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEndDate"]) : undefined;
      this.startTime = _data["startTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startTime"].toString()) : undefined;
      this.ngbStartTime = _data["ngbStartTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbStartTime"]) : undefined;
      this.endTime = _data["endTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endTime"].toString()) : undefined;
      this.ngbEndTime = _data["ngbEndTime"] ? SchoolNgbTimeModel.fromJS(_data["ngbEndTime"]) : undefined;
      this.isPublished = _data["isPublished"];
      this.isCompulsory = _data["isCompulsory"];
      this.calendarDate = _data["calendarDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["calendarDate"].toString()) : undefined;
      this.ngbCalendarDate = _data["ngbCalendarDate"] ? SchoolNgbDateModel.fromJS(_data["ngbCalendarDate"]) : undefined;
      this.holidayReason = _data["holidayReason"];
      this.eventDescription = _data["eventDescription"];
      this.vacationName = _data["vacationName"];
      this.weeklyOffName = _data["weeklyOffName"];
      this.vacationStartDate = _data["vacationStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vacationStartDate"].toString()) : undefined;
      this.ngbVacationStartDate = _data["ngbVacationStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVacationStartDate"]) : undefined;
      this.vacationEndDate = _data["vacationEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["vacationEndDate"].toString()) : undefined;
      this.ngbVacationEndDate = _data["ngbVacationEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbVacationEndDate"]) : undefined;
      this.weeklyOffDate = _data["weeklyOffDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["weeklyOffDate"].toString()) : undefined;
      this.ngbWeeklyOffDate = _data["ngbWeeklyOffDate"] ? SchoolNgbDateModel.fromJS(_data["ngbWeeklyOffDate"]) : undefined;
      if (Array.isArray(_data["lstEventDetail"])) {
        this.lstEventDetail = [];
        for (let item of _data["lstEventDetail"]) this.lstEventDetail.push(SchoolParentCalendarEventDetailAppDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CalendarParentAppModuleDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolEventId"] = this.schoolEventId;
    data["id"] = this.id;
    data["eventType"] = this.eventType;
    data["academicYearId"] = this.academicYearId;
    data["classId"] = this.classId;
    data["eventTitle"] = this.eventTitle;
    data["eventCoordinator"] = this.eventCoordinator;
    data["eventFess"] = this.eventFess;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["ngbEndDate"] = this.ngbEndDate ? this.ngbEndDate.toJSON() : undefined;
    data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
    data["ngbStartTime"] = this.ngbStartTime ? this.ngbStartTime.toJSON() : undefined;
    data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined;
    data["ngbEndTime"] = this.ngbEndTime ? this.ngbEndTime.toJSON() : undefined;
    data["isPublished"] = this.isPublished;
    data["isCompulsory"] = this.isCompulsory;
    data["calendarDate"] = this.calendarDate ? this.calendarDate.toISOString() : undefined;
    data["ngbCalendarDate"] = this.ngbCalendarDate ? this.ngbCalendarDate.toJSON() : undefined;
    data["holidayReason"] = this.holidayReason;
    data["eventDescription"] = this.eventDescription;
    data["vacationName"] = this.vacationName;
    data["weeklyOffName"] = this.weeklyOffName;
    data["vacationStartDate"] = this.vacationStartDate ? this.vacationStartDate.toISOString() : undefined;
    data["ngbVacationStartDate"] = this.ngbVacationStartDate ? this.ngbVacationStartDate.toJSON() : undefined;
    data["vacationEndDate"] = this.vacationEndDate ? this.vacationEndDate.toISOString() : undefined;
    data["ngbVacationEndDate"] = this.ngbVacationEndDate ? this.ngbVacationEndDate.toJSON() : undefined;
    data["weeklyOffDate"] = this.weeklyOffDate ? this.weeklyOffDate.toISOString() : undefined;
    data["ngbWeeklyOffDate"] = this.ngbWeeklyOffDate ? this.ngbWeeklyOffDate.toJSON() : undefined;
    if (Array.isArray(this.lstEventDetail)) {
      data["lstEventDetail"] = [];
      for (let item of this.lstEventDetail) data["lstEventDetail"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CalendarParentAppModuleDto();
    result.init(json);
    return result;
  }
}
class SchoolParentCalendarEventDetailAppDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolEventId = _data["schoolEventId"];
      this.schoolEventDetailsId = _data["schoolEventDetailsId"];
      this.fileName = _data["fileName"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolParentCalendarEventDetailAppDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolEventId"] = this.schoolEventId;
    data["schoolEventDetailsId"] = this.schoolEventDetailsId;
    data["fileName"] = this.fileName;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolParentCalendarEventDetailAppDto();
    result.init(json);
    return result;
  }
}
class VehicleTrackResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["vehicleTrackList"])) {
        this.vehicleTrackList = [];
        for (let item of _data["vehicleTrackList"]) this.vehicleTrackList.push(VehicleTrackDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new VehicleTrackResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.vehicleTrackList)) {
      data["vehicleTrackList"] = [];
      for (let item of this.vehicleTrackList) data["vehicleTrackList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new VehicleTrackResponseDto();
    result.init(json);
    return result;
  }
}
class VehicleTrackDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.lat = _data["lat"];
      this.lng = _data["lng"];
      this.vehicleNo = _data["vehicleNo"];
      this.registrationNo = _data["registrationNo"];
      this.stopName = _data["stopName"];
      this.orderNo = _data["orderNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new VehicleTrackDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["lat"] = this.lat;
    data["lng"] = this.lng;
    data["vehicleNo"] = this.vehicleNo;
    data["registrationNo"] = this.registrationNo;
    data["stopName"] = this.stopName;
    data["orderNo"] = this.orderNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new VehicleTrackDto();
    result.init(json);
    return result;
  }
}
class StoppageTrackResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["stoppageTrackList"])) {
        this.stoppageTrackList = [];
        for (let item of _data["stoppageTrackList"]) this.stoppageTrackList.push(VehicleTrackDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StoppageTrackResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.stoppageTrackList)) {
      data["stoppageTrackList"] = [];
      for (let item of this.stoppageTrackList) data["stoppageTrackList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StoppageTrackResponseDto();
    result.init(json);
    return result;
  }
}
class AddressMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["countryList"])) {
        this.countryList = [];
        for (let item of _data["countryList"]) this.countryList.push(CountryMasterDto.fromJS(item));
      }
      if (Array.isArray(_data["stateList"])) {
        this.stateList = [];
        for (let item of _data["stateList"]) this.stateList.push(StateMasterDto.fromJS(item));
      }
      if (Array.isArray(_data["districtList"])) {
        this.districtList = [];
        for (let item of _data["districtList"]) this.districtList.push(DistrictMasterDto.fromJS(item));
      }
      if (Array.isArray(_data["talukaList"])) {
        this.talukaList = [];
        for (let item of _data["talukaList"]) this.talukaList.push(TalukaMasterDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AddressMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.countryList)) {
      data["countryList"] = [];
      for (let item of this.countryList) data["countryList"].push(item.toJSON());
    }
    if (Array.isArray(this.stateList)) {
      data["stateList"] = [];
      for (let item of this.stateList) data["stateList"].push(item.toJSON());
    }
    if (Array.isArray(this.districtList)) {
      data["districtList"] = [];
      for (let item of this.districtList) data["districtList"].push(item.toJSON());
    }
    if (Array.isArray(this.talukaList)) {
      data["talukaList"] = [];
      for (let item of this.talukaList) data["talukaList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AddressMasterDto();
    result.init(json);
    return result;
  }
}
class CountryMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.countryId = _data["countryId"];
      this.countryName = _data["countryName"];
      this.countryKey = _data["countryKey"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CountryMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["countryId"] = this.countryId;
    data["countryName"] = this.countryName;
    data["countryKey"] = this.countryKey;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CountryMasterDto();
    result.init(json);
    return result;
  }
}
class StateMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.stateId = _data["stateId"];
      this.countryId = _data["countryId"];
      this.stateName = _data["stateName"];
      this.stateKey = _data["stateKey"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StateMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["stateId"] = this.stateId;
    data["countryId"] = this.countryId;
    data["stateName"] = this.stateName;
    data["stateKey"] = this.stateKey;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StateMasterDto();
    result.init(json);
    return result;
  }
}
class DistrictMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.districtId = _data["districtId"];
      this.stateId = _data["stateId"];
      this.districtName = _data["districtName"];
      this.districtKey = _data["districtKey"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DistrictMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["districtId"] = this.districtId;
    data["stateId"] = this.stateId;
    data["districtName"] = this.districtName;
    data["districtKey"] = this.districtKey;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DistrictMasterDto();
    result.init(json);
    return result;
  }
}
class TalukaMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.talukaId = _data["talukaId"];
      this.districtId = _data["districtId"];
      this.talukaName = _data["talukaName"];
      this.talukaKey = _data["talukaKey"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TalukaMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["talukaId"] = this.talukaId;
    data["districtId"] = this.districtId;
    data["talukaName"] = this.talukaName;
    data["talukaKey"] = this.talukaKey;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TalukaMasterDto();
    result.init(json);
    return result;
  }
}
class MediumTypeResponse {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["mediumTypes"])) {
        this.mediumTypes = [];
        for (let item of _data["mediumTypes"]) this.mediumTypes.push(MediumType.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new MediumTypeResponse();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.mediumTypes)) {
      data["mediumTypes"] = [];
      for (let item of this.mediumTypes) data["mediumTypes"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new MediumTypeResponse();
    result.init(json);
    return result;
  }
}
class MediumType {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.mediumTypeId = _data["mediumTypeId"];
      this.mediumTypeName = _data["mediumTypeName"];
      this.mediumTypeKey = _data["mediumTypeKey"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new MediumType();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["mediumTypeId"] = this.mediumTypeId;
    data["mediumTypeName"] = this.mediumTypeName;
    data["mediumTypeKey"] = this.mediumTypeKey;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new MediumType();
    result.init(json);
    return result;
  }
}
class AcademicYearResponse {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["academicYears"])) {
        this.academicYears = [];
        for (let item of _data["academicYears"]) this.academicYears.push(AcademicYear.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AcademicYearResponse();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.academicYears)) {
      data["academicYears"] = [];
      for (let item of this.academicYears) data["academicYears"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AcademicYearResponse();
    result.init(json);
    return result;
  }
}
class AcademicYear {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.academicYearName = _data["academicYearName"];
      this.academicYearKey = _data["academicYearKey"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AcademicYear();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["academicYearName"] = this.academicYearName;
    data["academicYearKey"] = this.academicYearKey;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AcademicYear();
    result.init(json);
    return result;
  }
}
class GradeDivisionMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["schoolGradeDivisionMatrixCascadeList"])) {
        this.schoolGradeDivisionMatrixCascadeList = [];
        for (let item of _data["schoolGradeDivisionMatrixCascadeList"]) this.schoolGradeDivisionMatrixCascadeList.push(SchoolGradeDivisionMatrixDto.fromJS(item));
      }
      if (Array.isArray(_data["grades"])) {
        this.grades = [];
        for (let item of _data["grades"]) this.grades.push(Grade.fromJS(item));
      }
      if (Array.isArray(_data["divisions"])) {
        this.divisions = [];
        for (let item of _data["divisions"]) this.divisions.push(Division.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GradeDivisionMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.schoolGradeDivisionMatrixCascadeList)) {
      data["schoolGradeDivisionMatrixCascadeList"] = [];
      for (let item of this.schoolGradeDivisionMatrixCascadeList) data["schoolGradeDivisionMatrixCascadeList"].push(item.toJSON());
    }
    if (Array.isArray(this.grades)) {
      data["grades"] = [];
      for (let item of this.grades) data["grades"].push(item.toJSON());
    }
    if (Array.isArray(this.divisions)) {
      data["divisions"] = [];
      for (let item of this.divisions) data["divisions"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GradeDivisionMasterDto();
    result.init(json);
    return result;
  }
}
class Grade {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.gradeId = _data["gradeId"];
      this.gradeName = _data["gradeName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Grade();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["gradeId"] = this.gradeId;
    data["gradeName"] = this.gradeName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new Grade();
    result.init(json);
    return result;
  }
}
class Division {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.divisionId = _data["divisionId"];
      this.divisionName = _data["divisionName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Division();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["divisionId"] = this.divisionId;
    data["divisionName"] = this.divisionName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new Division();
    result.init(json);
    return result;
  }
}
class MonthMasterResponse {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["monthMasters"])) {
        this.monthMasters = [];
        for (let item of _data["monthMasters"]) this.monthMasters.push(MonthMasterDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new MonthMasterResponse();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.monthMasters)) {
      data["monthMasters"] = [];
      for (let item of this.monthMasters) data["monthMasters"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new MonthMasterResponse();
    result.init(json);
    return result;
  }
}
class MonthMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.monthMasterId = _data["monthMasterId"];
      this.monthName = _data["monthName"];
      this.monthNameKey = _data["monthNameKey"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new MonthMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["monthMasterId"] = this.monthMasterId;
    data["monthName"] = this.monthName;
    data["monthNameKey"] = this.monthNameKey;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new MonthMasterDto();
    result.init(json);
    return result;
  }
}
class TeacherDropdownSelectListResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["lstDropdownValues"])) {
        this.lstDropdownValues = [];
        for (let item of _data["lstDropdownValues"]) this.lstDropdownValues.push(TeacherDropdownSelectListDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherDropdownSelectListResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.lstDropdownValues)) {
      data["lstDropdownValues"] = [];
      for (let item of this.lstDropdownValues) data["lstDropdownValues"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherDropdownSelectListResponseDto();
    result.init(json);
    return result;
  }
}
class TeacherDropdownSelectListDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.teacherId = _data["teacherId"];
      this.teacherName = _data["teacherName"];
      this.subjectMasterId = _data["subjectMasterId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherDropdownSelectListDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["teacherId"] = this.teacherId;
    data["teacherName"] = this.teacherName;
    data["subjectMasterId"] = this.subjectMasterId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherDropdownSelectListDto();
    result.init(json);
    return result;
  }
}
class SchoolDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolId = _data["schoolId"];
      this.schoolName = _data["schoolName"];
      this.schoolCode = _data["schoolCode"];
      this.schoolCodeNo = _data["schoolCodeNo"];
      this.schoolAddress = _data["schoolAddress"];
      this.mediumTypeName = _data["mediumTypeName"];
      this.schoolEmail = _data["schoolEmail"];
      this.schoolContactNo1 = _data["schoolContactNo1"];
      this.schoolContactNo2 = _data["schoolContactNo2"];
      this.schoolAddressLine1 = _data["schoolAddressLine1"];
      this.schoolAddressLine2 = _data["schoolAddressLine2"];
      this.talukaId = _data["talukaId"];
      this.districtId = _data["districtId"];
      this.stateId = _data["stateId"];
      this.countryId = _data["countryId"];
      this.talukaName = _data["talukaName"];
      this.districtName = _data["districtName"];
      this.stateName = _data["stateName"];
      this.countryName = _data["countryName"];
      this.pincode = _data["pincode"];
      this.establishmentDate = _data["establishmentDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["establishmentDate"].toString()) : undefined;
      this.ngbEstablishmentDate = _data["ngbEstablishmentDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEstablishmentDate"]) : undefined;
      this.schoolRank = _data["schoolRank"];
      this.schoolWebsiteUrl = _data["schoolWebsiteUrl"];
      this.logoUrl = _data["logoUrl"];
      this.bannerUrl = _data["bannerUrl"];
      this.schoolDescription = _data["schoolDescription"];
      this.contactPersonName = _data["contactPersonName"];
      this.contactPersonRole = _data["contactPersonRole"];
      this.contactPersonEmail = _data["contactPersonEmail"];
      this.contactPersonMobileNo = _data["contactPersonMobileNo"];
      this.academicYearId = _data["academicYearId"];
      this.authorisedBy = _data["authorisedBy"];
      this.section = _data["section"];
      this.schoolMediumId = _data["schoolMediumId"];
      this.schoolPermission = _data["schoolPermission"];
      this.registrationNumber = _data["registrationNumber"];
      this.schoolType = _data["schoolType"];
      this.udiseNumber = _data["udiseNumber"];
      this.board = _data["board"];
      this.affiliationNumber = _data["affiliationNumber"];
      this.hscOrSscIndexNo = _data["hscOrSscIndexNo"];
      this.base64LogoImage = _data["base64LogoImage"];
      this.logoImageContentType = _data["logoImageContentType"];
      this.langaugeCode = _data["langaugeCode"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolId"] = this.schoolId;
    data["schoolName"] = this.schoolName;
    data["schoolCode"] = this.schoolCode;
    data["schoolCodeNo"] = this.schoolCodeNo;
    data["schoolAddress"] = this.schoolAddress;
    data["mediumTypeName"] = this.mediumTypeName;
    data["schoolEmail"] = this.schoolEmail;
    data["schoolContactNo1"] = this.schoolContactNo1;
    data["schoolContactNo2"] = this.schoolContactNo2;
    data["schoolAddressLine1"] = this.schoolAddressLine1;
    data["schoolAddressLine2"] = this.schoolAddressLine2;
    data["talukaId"] = this.talukaId;
    data["districtId"] = this.districtId;
    data["stateId"] = this.stateId;
    data["countryId"] = this.countryId;
    data["talukaName"] = this.talukaName;
    data["districtName"] = this.districtName;
    data["stateName"] = this.stateName;
    data["countryName"] = this.countryName;
    data["pincode"] = this.pincode;
    data["establishmentDate"] = this.establishmentDate ? this.establishmentDate.toISOString() : undefined;
    data["ngbEstablishmentDate"] = this.ngbEstablishmentDate ? this.ngbEstablishmentDate.toJSON() : undefined;
    data["schoolRank"] = this.schoolRank;
    data["schoolWebsiteUrl"] = this.schoolWebsiteUrl;
    data["logoUrl"] = this.logoUrl;
    data["bannerUrl"] = this.bannerUrl;
    data["schoolDescription"] = this.schoolDescription;
    data["contactPersonName"] = this.contactPersonName;
    data["contactPersonRole"] = this.contactPersonRole;
    data["contactPersonEmail"] = this.contactPersonEmail;
    data["contactPersonMobileNo"] = this.contactPersonMobileNo;
    data["academicYearId"] = this.academicYearId;
    data["authorisedBy"] = this.authorisedBy;
    data["section"] = this.section;
    data["schoolMediumId"] = this.schoolMediumId;
    data["schoolPermission"] = this.schoolPermission;
    data["registrationNumber"] = this.registrationNumber;
    data["schoolType"] = this.schoolType;
    data["udiseNumber"] = this.udiseNumber;
    data["board"] = this.board;
    data["affiliationNumber"] = this.affiliationNumber;
    data["hscOrSscIndexNo"] = this.hscOrSscIndexNo;
    data["base64LogoImage"] = this.base64LogoImage;
    data["logoImageContentType"] = this.logoImageContentType;
    data["langaugeCode"] = this.langaugeCode;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolDto();
    result.init(json);
    return result;
  }
}
class SchoolSettingDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolId = _data["schoolId"];
      this.academicYearId = _data["academicYearId"];
      this.academicYearStartMonth = _data["academicYearStartMonth"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["academicYearStartMonth"].toString()) : undefined;
      this.ngbAcademicYearStartMonth = _data["ngbAcademicYearStartMonth"] ? SchoolNgbDateModel.fromJS(_data["ngbAcademicYearStartMonth"]) : undefined;
      this.invoiceNoPrefix = _data["invoiceNoPrefix"];
      this.invoiceNoStartNumber = _data["invoiceNoStartNumber"];
      this.transportInvoiceNoPrefix = _data["transportInvoiceNoPrefix"];
      this.transportInvoiceNoStartNumber = _data["transportInvoiceNoStartNumber"];
      this.additionalFeeInvoiceNoPrefix = _data["additionalFeeInvoiceNoPrefix"];
      this.additionalFeeInvoiceNoStartNumber = _data["additionalFeeInvoiceNoStartNumber"];
      this.schoolKitInvoiceNoPrefix = _data["schoolKitInvoiceNoPrefix"];
      this.schoolKitInvoiceNoStartNumber = _data["schoolKitInvoiceNoStartNumber"];
      this.serialNoStartNumber = _data["serialNoStartNumber"];
      this.accountNumber = _data["accountNumber"];
      this.accountTypeId = _data["accountTypeId"];
      this.ifscCode = _data["ifscCode"];
      this.accountName = _data["accountName"];
      this.schoolEmail = _data["schoolEmail"];
      this.schoolContactNo1 = _data["schoolContactNo1"];
      this.langaugeCode = _data["langaugeCode"];
      this.isSharedTransport = _data["isSharedTransport"];
      this.isFeeApplicableToStaff = _data["isFeeApplicableToStaff"];
      if (Array.isArray(_data["monthList"])) {
        this.monthList = [];
        for (let item of _data["monthList"]) this.monthList.push(item);
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolSettingDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolId"] = this.schoolId;
    data["academicYearId"] = this.academicYearId;
    data["academicYearStartMonth"] = this.academicYearStartMonth ? this.academicYearStartMonth.toISOString() : undefined;
    data["ngbAcademicYearStartMonth"] = this.ngbAcademicYearStartMonth ? this.ngbAcademicYearStartMonth.toJSON() : undefined;
    data["invoiceNoPrefix"] = this.invoiceNoPrefix;
    data["invoiceNoStartNumber"] = this.invoiceNoStartNumber;
    data["transportInvoiceNoPrefix"] = this.transportInvoiceNoPrefix;
    data["transportInvoiceNoStartNumber"] = this.transportInvoiceNoStartNumber;
    data["additionalFeeInvoiceNoPrefix"] = this.additionalFeeInvoiceNoPrefix;
    data["additionalFeeInvoiceNoStartNumber"] = this.additionalFeeInvoiceNoStartNumber;
    data["schoolKitInvoiceNoPrefix"] = this.schoolKitInvoiceNoPrefix;
    data["schoolKitInvoiceNoStartNumber"] = this.schoolKitInvoiceNoStartNumber;
    data["serialNoStartNumber"] = this.serialNoStartNumber;
    data["accountNumber"] = this.accountNumber;
    data["accountTypeId"] = this.accountTypeId;
    data["ifscCode"] = this.ifscCode;
    data["accountName"] = this.accountName;
    data["schoolEmail"] = this.schoolEmail;
    data["schoolContactNo1"] = this.schoolContactNo1;
    data["langaugeCode"] = this.langaugeCode;
    data["isSharedTransport"] = this.isSharedTransport;
    data["isFeeApplicableToStaff"] = this.isFeeApplicableToStaff;
    if (Array.isArray(this.monthList)) {
      data["monthList"] = [];
      for (let item of this.monthList) data["monthList"].push(item);
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolSettingDto();
    result.init(json);
    return result;
  }
}
class AppVersionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.configurationValue = _data["configurationValue"];
      this.isUpdateCheck = _data["isUpdateCheck"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AppVersionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["configurationValue"] = this.configurationValue;
    data["isUpdateCheck"] = this.isUpdateCheck;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AppVersionDto();
    result.init(json);
    return result;
  }
}
class ResponseImportStudentDataDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["hasPaymentHistoryList"])) {
        this.hasPaymentHistoryList = [];
        for (let item of _data["hasPaymentHistoryList"]) this.hasPaymentHistoryList.push(ResposnsePaymentHistory.fromJS(item));
      }
      if (Array.isArray(_data["hasDublicateGenRegNoList"])) {
        this.hasDublicateGenRegNoList = [];
        for (let item of _data["hasDublicateGenRegNoList"]) this.hasDublicateGenRegNoList.push(ResposnseDublicateGenRegNo.fromJS(item));
      }
      if (Array.isArray(_data["students"])) {
        this.students = [];
        for (let item of _data["students"]) this.students.push(ImportStudentDataDto.fromJS(item));
      }
      this.suceess = _data["suceess"];
      this.insertedCount = _data["insertedCount"];
      this.updatedCount = _data["updatedCount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ResponseImportStudentDataDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.hasPaymentHistoryList)) {
      data["hasPaymentHistoryList"] = [];
      for (let item of this.hasPaymentHistoryList) data["hasPaymentHistoryList"].push(item.toJSON());
    }
    if (Array.isArray(this.hasDublicateGenRegNoList)) {
      data["hasDublicateGenRegNoList"] = [];
      for (let item of this.hasDublicateGenRegNoList) data["hasDublicateGenRegNoList"].push(item.toJSON());
    }
    if (Array.isArray(this.students)) {
      data["students"] = [];
      for (let item of this.students) data["students"].push(item.toJSON());
    }
    data["suceess"] = this.suceess;
    data["insertedCount"] = this.insertedCount;
    data["updatedCount"] = this.updatedCount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ResponseImportStudentDataDto();
    result.init(json);
    return result;
  }
}
class ResposnsePaymentHistory {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.student_First_Name = _data["student_First_Name"];
      this.student_Middle_Name = _data["student_Middle_Name"];
      this.student_Last_Name = _data["student_Last_Name"];
      this.hasPaymentHistory = _data["hasPaymentHistory"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ResposnsePaymentHistory();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["student_First_Name"] = this.student_First_Name;
    data["student_Middle_Name"] = this.student_Middle_Name;
    data["student_Last_Name"] = this.student_Last_Name;
    data["hasPaymentHistory"] = this.hasPaymentHistory;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ResposnsePaymentHistory();
    result.init(json);
    return result;
  }
}
class ResposnseDublicateGenRegNo {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.student_First_Name = _data["student_First_Name"];
      this.student_Middle_Name = _data["student_Middle_Name"];
      this.student_Last_Name = _data["student_Last_Name"];
      this.studentId = _data["studentId"];
      this.genRegNoExist = _data["genRegNoExist"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ResposnseDublicateGenRegNo();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["student_First_Name"] = this.student_First_Name;
    data["student_Middle_Name"] = this.student_Middle_Name;
    data["student_Last_Name"] = this.student_Last_Name;
    data["studentId"] = this.studentId;
    data["genRegNoExist"] = this.genRegNoExist;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ResposnseDublicateGenRegNo();
    result.init(json);
    return result;
  }
}
class ImportStudentDataDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.gen_Reg_No = _data["gen_Reg_No"];
      this.admission_No = _data["admission_No"];
      this.roll_No = _data["roll_No"];
      this.grade = _data["grade"];
      this.division = _data["division"];
      this.admission_Date = _data["admission_Date"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["admission_Date"].toString()) : undefined;
      this.cbsC_Student_Id = _data["cbsC_Student_Id"];
      this.student_First_Name = _data["student_First_Name"];
      this.student_Middle_Name = _data["student_Middle_Name"];
      this.student_Last_Name = _data["student_Last_Name"];
      this.gender = _data["gender"];
      this.adhaar_No = _data["adhaar_No"];
      this.religion = _data["religion"];
      this.category = _data["category"];
      this.cast = _data["cast"];
      this.sub_Caste = _data["sub_Caste"];
      this.nationality = _data["nationality"];
      this.mother_Tongue = _data["mother_Tongue"];
      this.emergency_Contact_Person_Name = _data["emergency_Contact_Person_Name"];
      this.emergency_Contact_No = _data["emergency_Contact_No"];
      this.family_Doctor_Name = _data["family_Doctor_Name"];
      this.family_Doctor_No = _data["family_Doctor_No"];
      this.birth_Place = _data["birth_Place"];
      this.birthDate = _data["birthDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["birthDate"].toString()) : undefined;
      this.date_Of_Birth_In_Words = _data["date_Of_Birth_In_Words"];
      this.birth_Country = _data["birth_Country"];
      this.birth_State = _data["birth_State"];
      this.birth_District = _data["birth_District"];
      this.birth_Taluka = _data["birth_Taluka"];
      this.current_Address_Line_1 = _data["current_Address_Line_1"];
      this.current_Address_Line_2 = _data["current_Address_Line_2"];
      this.current_Pincode = _data["current_Pincode"];
      this.current_Country = _data["current_Country"];
      this.current_State = _data["current_State"];
      this.current_District = _data["current_District"];
      this.current_Taluka = _data["current_Taluka"];
      this.blood_Group = _data["blood_Group"];
      this.height = _data["height"];
      this.weight = _data["weight"];
      this.medical_History_Notes = _data["medical_History_Notes"];
      this.previous_School_Name = _data["previous_School_Name"];
      this.previous_School_Standard = _data["previous_School_Standard"];
      this.previous_School_Division = _data["previous_School_Division"];
      this.progress_Note_From_Last_School = _data["progress_Note_From_Last_School"];
      this.conduct_Note_From_Last_School = _data["conduct_Note_From_Last_School"];
      this.reason_of_Leaving_School = _data["reason_of_Leaving_School"];
      this.date_of_Leaving_of_Previous_School = _data["date_of_Leaving_of_Previous_School"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["date_of_Leaving_of_Previous_School"].toString()) : undefined;
      this.remark = _data["remark"];
      this.is_New_Student = _data["is_New_Student"];
      this.is_Deactive = _data["is_Deactive"];
      this.is_RTE = _data["is_RTE"];
      this.apply_Concession = _data["apply_Concession"];
      this.concession_Fee = _data["concession_Fee"];
      this.academic_Year = _data["academic_Year"];
      this.previousAcademicYearPendingFeeAmount = _data["previousAcademicYearPendingFeeAmount"];
      this.do_you_required_parent_mobile_app_access = _data["do_you_required_parent_mobile_app_access"];
      this.mobile_Number_for_Application_Access = _data["mobile_Number_for_Application_Access"];
      this.appAccessOneTimePassword = _data["appAccessOneTimePassword"];
      this.passwordSalt = _data["passwordSalt"];
      this.upassword = _data["upassword"];
      this.father_First_Name = _data["father_First_Name"];
      this.father_Middle_Name = _data["father_Middle_Name"];
      this.father_Last_Name = _data["father_Last_Name"];
      this.father_Gender = _data["father_Gender"];
      this.father_Mobile_No = _data["father_Mobile_No"];
      this.father_Alternate_Contact_No = _data["father_Alternate_Contact_No"];
      this.father_Email_Id = _data["father_Email_Id"];
      this.father_Address_Line_1 = _data["father_Address_Line_1"];
      this.father_Address_Line_2 = _data["father_Address_Line_2"];
      this.father_Country = _data["father_Country"];
      this.father_State = _data["father_State"];
      this.father_District = _data["father_District"];
      this.father_Taluka = _data["father_Taluka"];
      this.father_Pincode = _data["father_Pincode"];
      this.father_Adhaar_No = _data["father_Adhaar_No"];
      this.father_Education = _data["father_Education"];
      this.father_Birth_Date = _data["father_Birth_Date"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["father_Birth_Date"].toString()) : undefined;
      this.father_Occupation = _data["father_Occupation"];
      this.father_Annual_Income = _data["father_Annual_Income"];
      this.father_Blood_Group = _data["father_Blood_Group"];
      this.mother_First_Name = _data["mother_First_Name"];
      this.mother_Middle_Name = _data["mother_Middle_Name"];
      this.mother_Last_Name = _data["mother_Last_Name"];
      this.mother_Gender = _data["mother_Gender"];
      this.mother_Mobile_No = _data["mother_Mobile_No"];
      this.mother_Alternate_Contact_No = _data["mother_Alternate_Contact_No"];
      this.mother_Email_Id = _data["mother_Email_Id"];
      this.mother_Address_Line_1 = _data["mother_Address_Line_1"];
      this.mother_Address_Line_2 = _data["mother_Address_Line_2"];
      this.mother_Country = _data["mother_Country"];
      this.mother_State = _data["mother_State"];
      this.mother_District = _data["mother_District"];
      this.mother_Taluka = _data["mother_Taluka"];
      this.mother_Pincode = _data["mother_Pincode"];
      this.mother_Adhaar_No = _data["mother_Adhaar_No"];
      this.mother_Education = _data["mother_Education"];
      this.mother_Birth_Date = _data["mother_Birth_Date"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["mother_Birth_Date"].toString()) : undefined;
      this.mother_Occupation = _data["mother_Occupation"];
      this.mother_Annual_Income = _data["mother_Annual_Income"];
      this.mother_Blood_Group = _data["mother_Blood_Group"];
      this.guardian_First_Name = _data["guardian_First_Name"];
      this.guardian_Middle_Name = _data["guardian_Middle_Name"];
      this.guardian_Last_Name = _data["guardian_Last_Name"];
      this.guardian_Gender = _data["guardian_Gender"];
      this.guardian_Mobile_No = _data["guardian_Mobile_No"];
      this.guardian_Alternate_Contact_No = _data["guardian_Alternate_Contact_No"];
      this.guardian_Email_Id = _data["guardian_Email_Id"];
      this.guardian_Address_Line_1 = _data["guardian_Address_Line_1"];
      this.guardian_Address_Line_2 = _data["guardian_Address_Line_2"];
      this.guardian_Country = _data["guardian_Country"];
      this.guardian_State = _data["guardian_State"];
      this.guardian_District = _data["guardian_District"];
      this.guardian_Taluka = _data["guardian_Taluka"];
      this.guardian_Pincode = _data["guardian_Pincode"];
      this.guardian_Adhaar_No = _data["guardian_Adhaar_No"];
      this.guardian_Education = _data["guardian_Education"];
      this.guardian_Birth_Date = _data["guardian_Birth_Date"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["guardian_Birth_Date"].toString()) : undefined;
      this.guardian_Occupation = _data["guardian_Occupation"];
      this.guardian_Annual_Income = _data["guardian_Annual_Income"];
      this.guardian_Blood_Group = _data["guardian_Blood_Group"];
      this.current_CountryId = _data["current_CountryId"];
      this.current_StateId = _data["current_StateId"];
      this.current_DistrictId = _data["current_DistrictId"];
      this.current_TalukaId = _data["current_TalukaId"];
      this.birth_CountryId = _data["birth_CountryId"];
      this.birth_StateId = _data["birth_StateId"];
      this.birth_DistrictId = _data["birth_DistrictId"];
      this.birth_TalukaId = _data["birth_TalukaId"];
      this.father_CountryId = _data["father_CountryId"];
      this.father_StateId = _data["father_StateId"];
      this.father_DistrictId = _data["father_DistrictId"];
      this.father_TalukaId = _data["father_TalukaId"];
      this.mother_CountryId = _data["mother_CountryId"];
      this.mother_StateId = _data["mother_StateId"];
      this.mother_DistrictId = _data["mother_DistrictId"];
      this.mother_TalukaId = _data["mother_TalukaId"];
      this.gaurdian_CountryId = _data["gaurdian_CountryId"];
      this.gaurdian_StateId = _data["gaurdian_StateId"];
      this.gaurdian_DistrictId = _data["gaurdian_DistrictId"];
      this.gaurdian_TalukaId = _data["gaurdian_TalukaId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ImportStudentDataDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["gen_Reg_No"] = this.gen_Reg_No;
    data["admission_No"] = this.admission_No;
    data["roll_No"] = this.roll_No;
    data["grade"] = this.grade;
    data["division"] = this.division;
    data["admission_Date"] = this.admission_Date ? this.admission_Date.toISOString() : undefined;
    data["cbsC_Student_Id"] = this.cbsC_Student_Id;
    data["student_First_Name"] = this.student_First_Name;
    data["student_Middle_Name"] = this.student_Middle_Name;
    data["student_Last_Name"] = this.student_Last_Name;
    data["gender"] = this.gender;
    data["adhaar_No"] = this.adhaar_No;
    data["religion"] = this.religion;
    data["category"] = this.category;
    data["cast"] = this.cast;
    data["sub_Caste"] = this.sub_Caste;
    data["nationality"] = this.nationality;
    data["mother_Tongue"] = this.mother_Tongue;
    data["emergency_Contact_Person_Name"] = this.emergency_Contact_Person_Name;
    data["emergency_Contact_No"] = this.emergency_Contact_No;
    data["family_Doctor_Name"] = this.family_Doctor_Name;
    data["family_Doctor_No"] = this.family_Doctor_No;
    data["birth_Place"] = this.birth_Place;
    data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : undefined;
    data["date_Of_Birth_In_Words"] = this.date_Of_Birth_In_Words;
    data["birth_Country"] = this.birth_Country;
    data["birth_State"] = this.birth_State;
    data["birth_District"] = this.birth_District;
    data["birth_Taluka"] = this.birth_Taluka;
    data["current_Address_Line_1"] = this.current_Address_Line_1;
    data["current_Address_Line_2"] = this.current_Address_Line_2;
    data["current_Pincode"] = this.current_Pincode;
    data["current_Country"] = this.current_Country;
    data["current_State"] = this.current_State;
    data["current_District"] = this.current_District;
    data["current_Taluka"] = this.current_Taluka;
    data["blood_Group"] = this.blood_Group;
    data["height"] = this.height;
    data["weight"] = this.weight;
    data["medical_History_Notes"] = this.medical_History_Notes;
    data["previous_School_Name"] = this.previous_School_Name;
    data["previous_School_Standard"] = this.previous_School_Standard;
    data["previous_School_Division"] = this.previous_School_Division;
    data["progress_Note_From_Last_School"] = this.progress_Note_From_Last_School;
    data["conduct_Note_From_Last_School"] = this.conduct_Note_From_Last_School;
    data["reason_of_Leaving_School"] = this.reason_of_Leaving_School;
    data["date_of_Leaving_of_Previous_School"] = this.date_of_Leaving_of_Previous_School ? this.date_of_Leaving_of_Previous_School.toISOString() : undefined;
    data["remark"] = this.remark;
    data["is_New_Student"] = this.is_New_Student;
    data["is_Deactive"] = this.is_Deactive;
    data["is_RTE"] = this.is_RTE;
    data["apply_Concession"] = this.apply_Concession;
    data["concession_Fee"] = this.concession_Fee;
    data["academic_Year"] = this.academic_Year;
    data["previousAcademicYearPendingFeeAmount"] = this.previousAcademicYearPendingFeeAmount;
    data["do_you_required_parent_mobile_app_access"] = this.do_you_required_parent_mobile_app_access;
    data["mobile_Number_for_Application_Access"] = this.mobile_Number_for_Application_Access;
    data["appAccessOneTimePassword"] = this.appAccessOneTimePassword;
    data["passwordSalt"] = this.passwordSalt;
    data["upassword"] = this.upassword;
    data["father_First_Name"] = this.father_First_Name;
    data["father_Middle_Name"] = this.father_Middle_Name;
    data["father_Last_Name"] = this.father_Last_Name;
    data["father_Gender"] = this.father_Gender;
    data["father_Mobile_No"] = this.father_Mobile_No;
    data["father_Alternate_Contact_No"] = this.father_Alternate_Contact_No;
    data["father_Email_Id"] = this.father_Email_Id;
    data["father_Address_Line_1"] = this.father_Address_Line_1;
    data["father_Address_Line_2"] = this.father_Address_Line_2;
    data["father_Country"] = this.father_Country;
    data["father_State"] = this.father_State;
    data["father_District"] = this.father_District;
    data["father_Taluka"] = this.father_Taluka;
    data["father_Pincode"] = this.father_Pincode;
    data["father_Adhaar_No"] = this.father_Adhaar_No;
    data["father_Education"] = this.father_Education;
    data["father_Birth_Date"] = this.father_Birth_Date ? this.father_Birth_Date.toISOString() : undefined;
    data["father_Occupation"] = this.father_Occupation;
    data["father_Annual_Income"] = this.father_Annual_Income;
    data["father_Blood_Group"] = this.father_Blood_Group;
    data["mother_First_Name"] = this.mother_First_Name;
    data["mother_Middle_Name"] = this.mother_Middle_Name;
    data["mother_Last_Name"] = this.mother_Last_Name;
    data["mother_Gender"] = this.mother_Gender;
    data["mother_Mobile_No"] = this.mother_Mobile_No;
    data["mother_Alternate_Contact_No"] = this.mother_Alternate_Contact_No;
    data["mother_Email_Id"] = this.mother_Email_Id;
    data["mother_Address_Line_1"] = this.mother_Address_Line_1;
    data["mother_Address_Line_2"] = this.mother_Address_Line_2;
    data["mother_Country"] = this.mother_Country;
    data["mother_State"] = this.mother_State;
    data["mother_District"] = this.mother_District;
    data["mother_Taluka"] = this.mother_Taluka;
    data["mother_Pincode"] = this.mother_Pincode;
    data["mother_Adhaar_No"] = this.mother_Adhaar_No;
    data["mother_Education"] = this.mother_Education;
    data["mother_Birth_Date"] = this.mother_Birth_Date ? this.mother_Birth_Date.toISOString() : undefined;
    data["mother_Occupation"] = this.mother_Occupation;
    data["mother_Annual_Income"] = this.mother_Annual_Income;
    data["mother_Blood_Group"] = this.mother_Blood_Group;
    data["guardian_First_Name"] = this.guardian_First_Name;
    data["guardian_Middle_Name"] = this.guardian_Middle_Name;
    data["guardian_Last_Name"] = this.guardian_Last_Name;
    data["guardian_Gender"] = this.guardian_Gender;
    data["guardian_Mobile_No"] = this.guardian_Mobile_No;
    data["guardian_Alternate_Contact_No"] = this.guardian_Alternate_Contact_No;
    data["guardian_Email_Id"] = this.guardian_Email_Id;
    data["guardian_Address_Line_1"] = this.guardian_Address_Line_1;
    data["guardian_Address_Line_2"] = this.guardian_Address_Line_2;
    data["guardian_Country"] = this.guardian_Country;
    data["guardian_State"] = this.guardian_State;
    data["guardian_District"] = this.guardian_District;
    data["guardian_Taluka"] = this.guardian_Taluka;
    data["guardian_Pincode"] = this.guardian_Pincode;
    data["guardian_Adhaar_No"] = this.guardian_Adhaar_No;
    data["guardian_Education"] = this.guardian_Education;
    data["guardian_Birth_Date"] = this.guardian_Birth_Date ? this.guardian_Birth_Date.toISOString() : undefined;
    data["guardian_Occupation"] = this.guardian_Occupation;
    data["guardian_Annual_Income"] = this.guardian_Annual_Income;
    data["guardian_Blood_Group"] = this.guardian_Blood_Group;
    data["current_CountryId"] = this.current_CountryId;
    data["current_StateId"] = this.current_StateId;
    data["current_DistrictId"] = this.current_DistrictId;
    data["current_TalukaId"] = this.current_TalukaId;
    data["birth_CountryId"] = this.birth_CountryId;
    data["birth_StateId"] = this.birth_StateId;
    data["birth_DistrictId"] = this.birth_DistrictId;
    data["birth_TalukaId"] = this.birth_TalukaId;
    data["father_CountryId"] = this.father_CountryId;
    data["father_StateId"] = this.father_StateId;
    data["father_DistrictId"] = this.father_DistrictId;
    data["father_TalukaId"] = this.father_TalukaId;
    data["mother_CountryId"] = this.mother_CountryId;
    data["mother_StateId"] = this.mother_StateId;
    data["mother_DistrictId"] = this.mother_DistrictId;
    data["mother_TalukaId"] = this.mother_TalukaId;
    data["gaurdian_CountryId"] = this.gaurdian_CountryId;
    data["gaurdian_StateId"] = this.gaurdian_StateId;
    data["gaurdian_DistrictId"] = this.gaurdian_DistrictId;
    data["gaurdian_TalukaId"] = this.gaurdian_TalukaId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ImportStudentDataDto();
    result.init(json);
    return result;
  }
}
class ResponseImportSubjectDataDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["subjects"])) {
        this.subjects = [];
        for (let item of _data["subjects"]) this.subjects.push(ImportSubjectDataDto.fromJS(item));
      }
      this.suceess = _data["suceess"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ResponseImportSubjectDataDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.subjects)) {
      data["subjects"] = [];
      for (let item of this.subjects) data["subjects"].push(item.toJSON());
    }
    data["suceess"] = this.suceess;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ResponseImportSubjectDataDto();
    result.init(json);
    return result;
  }
}
class ImportSubjectDataDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.subject_Name = _data["subject_Name"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ImportSubjectDataDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["subject_Name"] = this.subject_Name;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ImportSubjectDataDto();
    result.init(json);
    return result;
  }
}
class ResponseImportTeacherDataDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["teachers"])) {
        this.teachers = [];
        for (let item of _data["teachers"]) this.teachers.push(ImportTeacherDataDto.fromJS(item));
      }
      this.suceess = _data["suceess"];
      this.insertedCount = _data["insertedCount"];
      this.updatedCount = _data["updatedCount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ResponseImportTeacherDataDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.teachers)) {
      data["teachers"] = [];
      for (let item of this.teachers) data["teachers"].push(item.toJSON());
    }
    data["suceess"] = this.suceess;
    data["insertedCount"] = this.insertedCount;
    data["updatedCount"] = this.updatedCount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ResponseImportTeacherDataDto();
    result.init(json);
    return result;
  }
}
class ImportTeacherDataDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.gender = _data["gender"];
      this.mobileNumber = _data["mobileNumber"];
      this.contactNumber = _data["contactNumber"];
      this.emailId = _data["emailId"];
      this.addressLine1 = _data["addressLine1"];
      this.addressLine2 = _data["addressLine2"];
      this.countryName = _data["countryName"];
      this.stateName = _data["stateName"];
      this.districtName = _data["districtName"];
      this.talukaName = _data["talukaName"];
      this.pincode = _data["pincode"];
      this.adharNumber = _data["adharNumber"];
      this.education = _data["education"];
      this.birthDate = _data["birthDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["birthDate"].toString()) : undefined;
      this.bloodGroup = _data["bloodGroup"];
      this.isAppAccess = _data["isAppAccess"];
      this.appAccessMobileNo = _data["appAccessMobileNo"];
      this.appAccessOneTimePassword = _data["appAccessOneTimePassword"];
      this.passwordSalt = _data["passwordSalt"];
      this.upassword = _data["upassword"];
      this.countryId = _data["countryId"];
      this.stateId = _data["stateId"];
      this.districtId = _data["districtId"];
      this.talukaId = _data["talukaId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ImportTeacherDataDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["gender"] = this.gender;
    data["mobileNumber"] = this.mobileNumber;
    data["contactNumber"] = this.contactNumber;
    data["emailId"] = this.emailId;
    data["addressLine1"] = this.addressLine1;
    data["addressLine2"] = this.addressLine2;
    data["countryName"] = this.countryName;
    data["stateName"] = this.stateName;
    data["districtName"] = this.districtName;
    data["talukaName"] = this.talukaName;
    data["pincode"] = this.pincode;
    data["adharNumber"] = this.adharNumber;
    data["education"] = this.education;
    data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : undefined;
    data["bloodGroup"] = this.bloodGroup;
    data["isAppAccess"] = this.isAppAccess;
    data["appAccessMobileNo"] = this.appAccessMobileNo;
    data["appAccessOneTimePassword"] = this.appAccessOneTimePassword;
    data["passwordSalt"] = this.passwordSalt;
    data["upassword"] = this.upassword;
    data["countryId"] = this.countryId;
    data["stateId"] = this.stateId;
    data["districtId"] = this.districtId;
    data["talukaId"] = this.talukaId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ImportTeacherDataDto();
    result.init(json);
    return result;
  }
}
class SubjectMappingDropdownResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["subjectsList"])) {
        this.subjectsList = [];
        for (let item of _data["subjectsList"]) this.subjectsList.push(SubjectMappingDropdownDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SubjectMappingDropdownResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.subjectsList)) {
      data["subjectsList"] = [];
      for (let item of this.subjectsList) data["subjectsList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SubjectMappingDropdownResponseDto();
    result.init(json);
    return result;
  }
}
class SubjectMappingDropdownDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.subjectId = _data["subjectId"];
      this.academicYearId = _data["academicYearId"];
      this.subjectName = _data["subjectName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SubjectMappingDropdownDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["subjectId"] = this.subjectId;
    data["academicYearId"] = this.academicYearId;
    data["subjectName"] = this.subjectName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SubjectMappingDropdownDto();
    result.init(json);
    return result;
  }
}
class ParentAppHomeworkResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["homeworkList"])) {
        this.homeworkList = [];
        for (let item of _data["homeworkList"]) this.homeworkList.push(ParentAppHomeworkDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentAppHomeworkResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.homeworkList)) {
      data["homeworkList"] = [];
      for (let item of this.homeworkList) data["homeworkList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentAppHomeworkResponseDto();
    result.init(json);
    return result;
  }
}
class ParentAppHomeworkDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.homeworkId = _data["homeworkId"];
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.studentId = _data["studentId"];
      this.subjectId = _data["subjectId"];
      this.subjectName = _data["subjectName"];
      this.homeworkTitle = _data["homeworkTitle"];
      this.homeworkDescription = _data["homeworkDescription"];
      this.fromDate = _data["fromDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["fromDate"].toString()) : undefined;
      this.ngbFromDate = _data["ngbFromDate"] ? SchoolNgbDateModel.fromJS(_data["ngbFromDate"]) : undefined;
      this.tillDate = _data["tillDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["tillDate"].toString()) : undefined;
      this.ngbTillDate = _data["ngbTillDate"] ? SchoolNgbDateModel.fromJS(_data["ngbTillDate"]) : undefined;
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.endDate = _data["endDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["endDate"].toString()) : undefined;
      this.ngbEndDate = _data["ngbEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbEndDate"]) : undefined;
      this.isPublished = _data["isPublished"];
      this.userId = _data["userId"];
      this.fileType = _data["fileType"];
      if (Array.isArray(_data["lstMediaVideoText"])) {
        this.lstMediaVideoText = [];
        for (let item of _data["lstMediaVideoText"]) this.lstMediaVideoText.push(ParentAppHomeworkMediaContentDto.fromJS(item));
      }
      if (Array.isArray(_data["lstHomeworkDetail"])) {
        this.lstHomeworkDetail = [];
        for (let item of _data["lstHomeworkDetail"]) this.lstHomeworkDetail.push(ParentAppHomeworkDetailDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentAppHomeworkDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["homeworkId"] = this.homeworkId;
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["studentId"] = this.studentId;
    data["subjectId"] = this.subjectId;
    data["subjectName"] = this.subjectName;
    data["homeworkTitle"] = this.homeworkTitle;
    data["homeworkDescription"] = this.homeworkDescription;
    data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : undefined;
    data["ngbFromDate"] = this.ngbFromDate ? this.ngbFromDate.toJSON() : undefined;
    data["tillDate"] = this.tillDate ? this.tillDate.toISOString() : undefined;
    data["ngbTillDate"] = this.ngbTillDate ? this.ngbTillDate.toJSON() : undefined;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["ngbEndDate"] = this.ngbEndDate ? this.ngbEndDate.toJSON() : undefined;
    data["isPublished"] = this.isPublished;
    data["userId"] = this.userId;
    data["fileType"] = this.fileType;
    if (Array.isArray(this.lstMediaVideoText)) {
      data["lstMediaVideoText"] = [];
      for (let item of this.lstMediaVideoText) data["lstMediaVideoText"].push(item.toJSON());
    }
    if (Array.isArray(this.lstHomeworkDetail)) {
      data["lstHomeworkDetail"] = [];
      for (let item of this.lstHomeworkDetail) data["lstHomeworkDetail"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentAppHomeworkDto();
    result.init(json);
    return result;
  }
}
var MediaContentType4;
(function (MediaContentType4) {
  MediaContentType4[MediaContentType4["IMAGE"] = 1] = "IMAGE";
  MediaContentType4[MediaContentType4["VIDEO"] = 2] = "VIDEO";
})(MediaContentType4 || (MediaContentType4 = {}));
class ParentAppHomeworkMediaContentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.homeworkId = _data["homeworkId"];
      this.contentUrl = _data["contentUrl"];
      this.fileName = _data["fileName"];
      this.fileType = _data["fileType"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentAppHomeworkMediaContentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["homeworkId"] = this.homeworkId;
    data["contentUrl"] = this.contentUrl;
    data["fileName"] = this.fileName;
    data["fileType"] = this.fileType;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentAppHomeworkMediaContentDto();
    result.init(json);
    return result;
  }
}
class ParentAppHomeworkDetailDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.homeworkId = _data["homeworkId"];
      this.fileName = _data["fileName"];
      this.fileType = _data["fileType"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentAppHomeworkDetailDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["homeworkId"] = this.homeworkId;
    data["fileName"] = this.fileName;
    data["fileType"] = this.fileType;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentAppHomeworkDetailDto();
    result.init(json);
    return result;
  }
}
class ParentAppHomeworkRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.month = _data["month"];
      this.year = _data["year"];
      this.studentId = _data["studentId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentAppHomeworkRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["month"] = this.month;
    data["year"] = this.year;
    data["studentId"] = this.studentId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentAppHomeworkRequestDto();
    result.init(json);
    return result;
  }
}
class GradeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.gradeId = _data["gradeId"];
      this.gradeName = _data["gradeName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GradeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["gradeId"] = this.gradeId;
    data["gradeName"] = this.gradeName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GradeDto();
    result.init(json);
    return result;
  }
}
class GradeUpdateRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.exits = _data["exits"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GradeUpdateRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["exits"] = this.exits;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GradeUpdateRespose();
    result.init(json);
    return result;
  }
}
class GradeDeleteRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GradeDeleteRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GradeDeleteRespose();
    result.init(json);
    return result;
  }
}
class GradeDivisionMatrixDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.gradeId = _data["gradeId"];
      this.gradeName = _data["gradeName"];
      if (Array.isArray(_data["divisionId"])) {
        this.divisionId = [];
        for (let item of _data["divisionId"]) this.divisionId.push(item);
      }
      this.gradeDivisions = _data["gradeDivisions"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GradeDivisionMatrixDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["gradeId"] = this.gradeId;
    data["gradeName"] = this.gradeName;
    if (Array.isArray(this.divisionId)) {
      data["divisionId"] = [];
      for (let item of this.divisionId) data["divisionId"].push(item);
    }
    data["gradeDivisions"] = this.gradeDivisions;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GradeDivisionMatrixDto();
    result.init(json);
    return result;
  }
}
class GradeDivisionMatrixDeleteRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GradeDivisionMatrixDeleteRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GradeDivisionMatrixDeleteRespose();
    result.init(json);
    return result;
  }
}
class ParentAppGalleryResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["galleryList"])) {
        this.galleryList = [];
        for (let item of _data["galleryList"]) this.galleryList.push(ParentAppGalleryDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentAppGalleryResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.galleryList)) {
      data["galleryList"] = [];
      for (let item of this.galleryList) data["galleryList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentAppGalleryResponseDto();
    result.init(json);
    return result;
  }
}
class ParentAppGalleryDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.galleryId = _data["galleryId"];
      this.studentId = _data["studentId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.galleryToType = _data["galleryToType"];
      this.galleryTitle = _data["galleryTitle"];
      this.description = _data["description"];
      this.startDate = _data["startDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["startDate"].toString()) : undefined;
      this.ngbStartDate = _data["ngbStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbStartDate"]) : undefined;
      this.isPublished = _data["isPublished"];
      this.userId = _data["userId"];
      this.roleId = _data["roleId"];
      this.roleKey = _data["roleKey"];
      this.name = _data["name"];
      this.roleName = _data["roleName"];
      this.createdDate = _data["createdDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["createdDate"].toString()) : undefined;
      if (Array.isArray(_data["lstGalleryDetail"])) {
        this.lstGalleryDetail = [];
        for (let item of _data["lstGalleryDetail"]) this.lstGalleryDetail.push(ParentAppGalleryDetailDto.fromJS(item));
      }
      if (Array.isArray(_data["lstGalleryMediaDetail"])) {
        this.lstGalleryMediaDetail = [];
        for (let item of _data["lstGalleryMediaDetail"]) this.lstGalleryMediaDetail.push(MediaGalleryContentDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentAppGalleryDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["galleryId"] = this.galleryId;
    data["studentId"] = this.studentId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["galleryToType"] = this.galleryToType;
    data["galleryTitle"] = this.galleryTitle;
    data["description"] = this.description;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["ngbStartDate"] = this.ngbStartDate ? this.ngbStartDate.toJSON() : undefined;
    data["isPublished"] = this.isPublished;
    data["userId"] = this.userId;
    data["roleId"] = this.roleId;
    data["roleKey"] = this.roleKey;
    data["name"] = this.name;
    data["roleName"] = this.roleName;
    data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
    if (Array.isArray(this.lstGalleryDetail)) {
      data["lstGalleryDetail"] = [];
      for (let item of this.lstGalleryDetail) data["lstGalleryDetail"].push(item.toJSON());
    }
    if (Array.isArray(this.lstGalleryMediaDetail)) {
      data["lstGalleryMediaDetail"] = [];
      for (let item of this.lstGalleryMediaDetail) data["lstGalleryMediaDetail"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentAppGalleryDto();
    result.init(json);
    return result;
  }
}
class ParentAppGalleryDetailDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.galleryId = _data["galleryId"];
      this.fileName = _data["fileName"];
      this.fileType = _data["fileType"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentAppGalleryDetailDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["galleryId"] = this.galleryId;
    data["fileName"] = this.fileName;
    data["fileType"] = this.fileType;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentAppGalleryDetailDto();
    result.init(json);
    return result;
  }
}
class MediaGalleryContentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.galleryId = _data["galleryId"];
      this.contentUrl = _data["contentUrl"];
      this.fileName = _data["fileName"];
      this.fileType = _data["fileType"];
      this.fullPath = _data["fullPath"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new MediaGalleryContentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["galleryId"] = this.galleryId;
    data["contentUrl"] = this.contentUrl;
    data["fileName"] = this.fileName;
    data["fileType"] = this.fileType;
    data["fullPath"] = this.fullPath;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new MediaGalleryContentDto();
    result.init(json);
    return result;
  }
}
class ParentAppGalleryRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.fromDate = _data["fromDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["fromDate"].toString()) : undefined;
      this.tillDate = _data["tillDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["tillDate"].toString()) : undefined;
      this.studentId = _data["studentId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ParentAppGalleryRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : undefined;
    data["tillDate"] = this.tillDate ? this.tillDate.toISOString() : undefined;
    data["studentId"] = this.studentId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ParentAppGalleryRequestDto();
    result.init(json);
    return result;
  }
}
class FeeWavierTypeSelectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeWavierTypeId = _data["feeWavierTypeId"];
      this.academicYearId = _data["academicYearId"];
      this.feeWavierTypeName = _data["feeWavierTypeName"];
      this.feeWavierDisplayName = _data["feeWavierDisplayName"];
      this.description = _data["description"];
      this.categoryId = _data["categoryId"];
      this.numberOfInstallments = _data["numberOfInstallments"];
      this.discountInPercent = _data["discountInPercent"];
      this.latePerDayFeeInPercent = _data["latePerDayFeeInPercent"];
      this.isActive = _data["isActive"];
      if (Array.isArray(_data["feeWavierTypesInstallmentsDetailsTypes"])) {
        this.feeWavierTypesInstallmentsDetailsTypes = [];
        for (let item of _data["feeWavierTypesInstallmentsDetailsTypes"]) this.feeWavierTypesInstallmentsDetailsTypes.push(FeeWavierTypesInstallmentsDetailsTypeDto.fromJS(item));
      }
      this.isInstallmentUsedInFeePayment = _data["isInstallmentUsedInFeePayment"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeeWavierTypeSelectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeWavierTypeId"] = this.feeWavierTypeId;
    data["academicYearId"] = this.academicYearId;
    data["feeWavierTypeName"] = this.feeWavierTypeName;
    data["feeWavierDisplayName"] = this.feeWavierDisplayName;
    data["description"] = this.description;
    data["categoryId"] = this.categoryId;
    data["numberOfInstallments"] = this.numberOfInstallments;
    data["discountInPercent"] = this.discountInPercent;
    data["latePerDayFeeInPercent"] = this.latePerDayFeeInPercent;
    data["isActive"] = this.isActive;
    if (Array.isArray(this.feeWavierTypesInstallmentsDetailsTypes)) {
      data["feeWavierTypesInstallmentsDetailsTypes"] = [];
      for (let item of this.feeWavierTypesInstallmentsDetailsTypes) data["feeWavierTypesInstallmentsDetailsTypes"].push(item.toJSON());
    }
    data["isInstallmentUsedInFeePayment"] = this.isInstallmentUsedInFeePayment;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeeWavierTypeSelectDto();
    result.init(json);
    return result;
  }
}
class FeeWavierTypesInstallmentsDetailsTypeDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeWavierTypesInstallmentsDetailsTypeId = _data["feeWavierTypesInstallmentsDetailsTypeId"];
      this.lateFeeStartDate = _data["lateFeeStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["lateFeeStartDate"].toString()) : undefined;
      this.ngbLateFeeStartDate = _data["ngbLateFeeStartDate"] ? SchoolNgbDateModel.fromJS(_data["ngbLateFeeStartDate"]) : undefined;
      this.discountEndDate = _data["discountEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["discountEndDate"].toString()) : undefined;
      this.ngbDiscountEndDate = _data["ngbDiscountEndDate"] ? SchoolNgbDateModel.fromJS(_data["ngbDiscountEndDate"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeeWavierTypesInstallmentsDetailsTypeDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeWavierTypesInstallmentsDetailsTypeId"] = this.feeWavierTypesInstallmentsDetailsTypeId;
    data["lateFeeStartDate"] = this.lateFeeStartDate ? this.lateFeeStartDate.toISOString() : undefined;
    data["ngbLateFeeStartDate"] = this.ngbLateFeeStartDate ? this.ngbLateFeeStartDate.toJSON() : undefined;
    data["discountEndDate"] = this.discountEndDate ? this.discountEndDate.toISOString() : undefined;
    data["ngbDiscountEndDate"] = this.ngbDiscountEndDate ? this.ngbDiscountEndDate.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeeWavierTypesInstallmentsDetailsTypeDto();
    result.init(json);
    return result;
  }
}
class CommonSuccessResponse {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.id = _data["id"];
      this.statusCode = _data["statusCode"];
      this.message = _data["message"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CommonSuccessResponse();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["statusCode"] = this.statusCode;
    data["message"] = this.message;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CommonSuccessResponse();
    result.init(json);
    return result;
  }
}
var CommonSuccessResponseEnum;
(function (CommonSuccessResponseEnum) {
  CommonSuccessResponseEnum[CommonSuccessResponseEnum["FEE_WAVIER_ALREADY_EXIST"] = 101] = "FEE_WAVIER_ALREADY_EXIST";
  CommonSuccessResponseEnum[CommonSuccessResponseEnum["FEE_WAVIER_ALREADY_USED"] = 102] = "FEE_WAVIER_ALREADY_USED";
  CommonSuccessResponseEnum[CommonSuccessResponseEnum["SUCCESS"] = 200] = "SUCCESS";
})(CommonSuccessResponseEnum || (CommonSuccessResponseEnum = {}));
class FeeWavierTypeUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeWavierTypeId = _data["feeWavierTypeId"];
      this.academicYearId = _data["academicYearId"];
      this.feeWavierTypeName = _data["feeWavierTypeName"];
      this.feeWavierDisplayName = _data["feeWavierDisplayName"];
      this.description = _data["description"];
      this.categoryId = _data["categoryId"];
      this.numberOfInstallments = _data["numberOfInstallments"];
      this.discountInPercent = _data["discountInPercent"];
      this.latePerDayFeeInPercent = _data["latePerDayFeeInPercent"];
      this.isActive = _data["isActive"];
      this.userId = _data["userId"];
      if (Array.isArray(_data["feeWavierTypesInstallmentsDetailsTypes"])) {
        this.feeWavierTypesInstallmentsDetailsTypes = [];
        for (let item of _data["feeWavierTypesInstallmentsDetailsTypes"]) this.feeWavierTypesInstallmentsDetailsTypes.push(FeeWavierTypesInstallmentsDetailsTypeDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeeWavierTypeUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeWavierTypeId"] = this.feeWavierTypeId;
    data["academicYearId"] = this.academicYearId;
    data["feeWavierTypeName"] = this.feeWavierTypeName;
    data["feeWavierDisplayName"] = this.feeWavierDisplayName;
    data["description"] = this.description;
    data["categoryId"] = this.categoryId;
    data["numberOfInstallments"] = this.numberOfInstallments;
    data["discountInPercent"] = this.discountInPercent;
    data["latePerDayFeeInPercent"] = this.latePerDayFeeInPercent;
    data["isActive"] = this.isActive;
    data["userId"] = this.userId;
    if (Array.isArray(this.feeWavierTypesInstallmentsDetailsTypes)) {
      data["feeWavierTypesInstallmentsDetailsTypes"] = [];
      for (let item of this.feeWavierTypesInstallmentsDetailsTypes) data["feeWavierTypesInstallmentsDetailsTypes"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeeWavierTypeUpsertDto();
    result.init(json);
    return result;
  }
}
class FeeWavierTypeDeleteResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeeWavierTypeDeleteResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeeWavierTypeDeleteResponseDto();
    result.init(json);
    return result;
  }
}
class FeePaymentSelectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.paymentInstallmentDone = _data["paymentInstallmentDone"];
      this.skipDiscountCount = _data["skipDiscountCount"];
      this.fullName = _data["fullName"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.isNewStudent = _data["isNewStudent"];
      this.isRTEStudent = _data["isRTEStudent"];
      this.isConsationApplicable = _data["isConsationApplicable"];
      this.consationAmount = _data["consationAmount"];
      this.previousAcademicYearPendingFeeAmount = _data["previousAcademicYearPendingFeeAmount"];
      this.appAccessMobileNo = _data["appAccessMobileNo"];
      this.academicYearId = _data["academicYearId"];
      this.rollNumber = _data["rollNumber"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.classId = _data["classId"];
      if (Array.isArray(_data["feePaymentDiscountList"])) {
        this.feePaymentDiscountList = [];
        for (let item of _data["feePaymentDiscountList"]) this.feePaymentDiscountList.push(FeePaymentDiscount.fromJS(item));
      }
      if (Array.isArray(_data["feePaymentAdditionalDiscountList"])) {
        this.feePaymentAdditionalDiscountList = [];
        for (let item of _data["feePaymentAdditionalDiscountList"]) this.feePaymentAdditionalDiscountList.push(FeePaymentAdditionalDiscount.fromJS(item));
      }
      if (Array.isArray(_data["feePaymentParticularsList"])) {
        this.feePaymentParticularsList = [];
        for (let item of _data["feePaymentParticularsList"]) this.feePaymentParticularsList.push(FeePaymentParticulars.fromJS(item));
      }
      if (Array.isArray(_data["usedInstallmentList"])) {
        this.usedInstallmentList = [];
        for (let item of _data["usedInstallmentList"]) this.usedInstallmentList.push(item);
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeePaymentSelectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["paymentInstallmentDone"] = this.paymentInstallmentDone;
    data["skipDiscountCount"] = this.skipDiscountCount;
    data["fullName"] = this.fullName;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["isNewStudent"] = this.isNewStudent;
    data["isRTEStudent"] = this.isRTEStudent;
    data["isConsationApplicable"] = this.isConsationApplicable;
    data["consationAmount"] = this.consationAmount;
    data["previousAcademicYearPendingFeeAmount"] = this.previousAcademicYearPendingFeeAmount;
    data["appAccessMobileNo"] = this.appAccessMobileNo;
    data["academicYearId"] = this.academicYearId;
    data["rollNumber"] = this.rollNumber;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["classId"] = this.classId;
    if (Array.isArray(this.feePaymentDiscountList)) {
      data["feePaymentDiscountList"] = [];
      for (let item of this.feePaymentDiscountList) data["feePaymentDiscountList"].push(item.toJSON());
    }
    if (Array.isArray(this.feePaymentAdditionalDiscountList)) {
      data["feePaymentAdditionalDiscountList"] = [];
      for (let item of this.feePaymentAdditionalDiscountList) data["feePaymentAdditionalDiscountList"].push(item.toJSON());
    }
    if (Array.isArray(this.feePaymentParticularsList)) {
      data["feePaymentParticularsList"] = [];
      for (let item of this.feePaymentParticularsList) data["feePaymentParticularsList"].push(item.toJSON());
    }
    if (Array.isArray(this.usedInstallmentList)) {
      data["usedInstallmentList"] = [];
      for (let item of this.usedInstallmentList) data["usedInstallmentList"].push(item);
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeePaymentSelectDto();
    result.init(json);
    return result;
  }
}
class FeePaymentDiscount {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.feeParticularWavierMappingId = _data["feeParticularWavierMappingId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeePaymentDiscount();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["feeParticularWavierMappingId"] = this.feeParticularWavierMappingId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeePaymentDiscount();
    result.init(json);
    return result;
  }
}
class FeePaymentAdditionalDiscount {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeAdditionalDiscountId = _data["feeAdditionalDiscountId"];
      this.academicYearId = _data["academicYearId"];
      this.additionalDiscountedAmount = _data["additionalDiscountedAmount"];
      this.installmentPaybleFee = _data["installmentPaybleFee"];
      this.paymentInstallmentNumber = _data["paymentInstallmentNumber"];
      this.additionalDiscountedRemark = _data["additionalDiscountedRemark"];
      this.appliedDate = _data["appliedDate"];
      this.totalFee = _data["totalFee"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeePaymentAdditionalDiscount();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeAdditionalDiscountId"] = this.feeAdditionalDiscountId;
    data["academicYearId"] = this.academicYearId;
    data["additionalDiscountedAmount"] = this.additionalDiscountedAmount;
    data["installmentPaybleFee"] = this.installmentPaybleFee;
    data["paymentInstallmentNumber"] = this.paymentInstallmentNumber;
    data["additionalDiscountedRemark"] = this.additionalDiscountedRemark;
    data["appliedDate"] = this.appliedDate;
    data["totalFee"] = this.totalFee;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeePaymentAdditionalDiscount();
    result.init(json);
    return result;
  }
}
class FeePaymentParticulars {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.additionalDiscInPercentage = _data["additionalDiscInPercentage"];
      this.feeParticularId = _data["feeParticularId"];
      this.isDiscountApplicable = _data["isDiscountApplicable"];
      this.particularName = _data["particularName"];
      this.totalFee = _data["totalFee"];
      this.feeAfterDiscount = _data["feeAfterDiscount"];
      this.paybleFee = _data["paybleFee"];
      this.dueAmount = _data["dueAmount"];
      this.alreadyPaid = _data["alreadyPaid"];
      this.additionalDiscAmount = _data["additionalDiscAmount"];
      this.showError = _data["showError"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeePaymentParticulars();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["additionalDiscInPercentage"] = this.additionalDiscInPercentage;
    data["feeParticularId"] = this.feeParticularId;
    data["isDiscountApplicable"] = this.isDiscountApplicable;
    data["particularName"] = this.particularName;
    data["totalFee"] = this.totalFee;
    data["feeAfterDiscount"] = this.feeAfterDiscount;
    data["paybleFee"] = this.paybleFee;
    data["dueAmount"] = this.dueAmount;
    data["alreadyPaid"] = this.alreadyPaid;
    data["additionalDiscAmount"] = this.additionalDiscAmount;
    data["showError"] = this.showError;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeePaymentParticulars();
    result.init(json);
    return result;
  }
}
class FeePaymentUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.studentId = _data["studentId"];
      this.onlineTransactionId = _data["onlineTransactionId"];
      this.onlineTransactionDateTime = _data["onlineTransactionDateTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["onlineTransactionDateTime"].toString()) : undefined;
      this.ngbOnlineTransactionDateTime = _data["ngbOnlineTransactionDateTime"] ? SchoolNgbDateModel.fromJS(_data["ngbOnlineTransactionDateTime"]) : undefined;
      this.onlinePaymentRequest = _data["onlinePaymentRequest"];
      this.onlinePaymentResponse = _data["onlinePaymentResponse"];
      this.paidToBank = _data["paidToBank"];
      this.paidAmount = _data["paidAmount"];
      this.paymentTypeId = _data["paymentTypeId"];
      this.chequeNumber = _data["chequeNumber"];
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.ngbChequeDate = _data["ngbChequeDate"] ? SchoolNgbDateModel.fromJS(_data["ngbChequeDate"]) : undefined;
      this.chequeBank = _data["chequeBank"];
      this.chequeAmount = _data["chequeAmount"];
      this.isChequeClear = _data["isChequeClear"];
      this.skipDiscount = _data["skipDiscount"];
      this.feeWavierTypesInstallmentsDetailsId = _data["feeWavierTypesInstallmentsDetailsId"];
      this.remark = _data["remark"];
      this.additionalDiscountedAmount = _data["additionalDiscountedAmount"];
      this.installmentPaybleFee = _data["installmentPaybleFee"];
      this.additionalDiscountedRemark = _data["additionalDiscountedRemark"];
      this.userId = _data["userId"];
      if (Array.isArray(_data["feePaymentAppliedWavierMappingTypeUpsertDtoList"])) {
        this.feePaymentAppliedWavierMappingTypeUpsertDtoList = [];
        for (let item of _data["feePaymentAppliedWavierMappingTypeUpsertDtoList"]) this.feePaymentAppliedWavierMappingTypeUpsertDtoList.push(FeePaymentAppliedWavierMappingTypeUpsertDto.fromJS(item));
      }
      if (Array.isArray(_data["feePaymentDetailTypeUpsertDtoList"])) {
        this.feePaymentDetailTypeUpsertDtoList = [];
        for (let item of _data["feePaymentDetailTypeUpsertDtoList"]) this.feePaymentDetailTypeUpsertDtoList.push(FeePaymentDetailTypeUpsertDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeePaymentUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["studentId"] = this.studentId;
    data["onlineTransactionId"] = this.onlineTransactionId;
    data["onlineTransactionDateTime"] = this.onlineTransactionDateTime ? this.onlineTransactionDateTime.toISOString() : undefined;
    data["ngbOnlineTransactionDateTime"] = this.ngbOnlineTransactionDateTime ? this.ngbOnlineTransactionDateTime.toJSON() : undefined;
    data["onlinePaymentRequest"] = this.onlinePaymentRequest;
    data["onlinePaymentResponse"] = this.onlinePaymentResponse;
    data["paidToBank"] = this.paidToBank;
    data["paidAmount"] = this.paidAmount;
    data["paymentTypeId"] = this.paymentTypeId;
    data["chequeNumber"] = this.chequeNumber;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["ngbChequeDate"] = this.ngbChequeDate ? this.ngbChequeDate.toJSON() : undefined;
    data["chequeBank"] = this.chequeBank;
    data["chequeAmount"] = this.chequeAmount;
    data["isChequeClear"] = this.isChequeClear;
    data["skipDiscount"] = this.skipDiscount;
    data["feeWavierTypesInstallmentsDetailsId"] = this.feeWavierTypesInstallmentsDetailsId;
    data["remark"] = this.remark;
    data["additionalDiscountedAmount"] = this.additionalDiscountedAmount;
    data["installmentPaybleFee"] = this.installmentPaybleFee;
    data["additionalDiscountedRemark"] = this.additionalDiscountedRemark;
    data["userId"] = this.userId;
    if (Array.isArray(this.feePaymentAppliedWavierMappingTypeUpsertDtoList)) {
      data["feePaymentAppliedWavierMappingTypeUpsertDtoList"] = [];
      for (let item of this.feePaymentAppliedWavierMappingTypeUpsertDtoList) data["feePaymentAppliedWavierMappingTypeUpsertDtoList"].push(item.toJSON());
    }
    if (Array.isArray(this.feePaymentDetailTypeUpsertDtoList)) {
      data["feePaymentDetailTypeUpsertDtoList"] = [];
      for (let item of this.feePaymentDetailTypeUpsertDtoList) data["feePaymentDetailTypeUpsertDtoList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeePaymentUpsertDto();
    result.init(json);
    return result;
  }
}
class FeePaymentAppliedWavierMappingTypeUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeParticularWavierMappingId = _data["feeParticularWavierMappingId"];
      this.discountedPercent = _data["discountedPercent"];
      this.discountedAmount = _data["discountedAmount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeePaymentAppliedWavierMappingTypeUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeParticularWavierMappingId"] = this.feeParticularWavierMappingId;
    data["discountedPercent"] = this.discountedPercent;
    data["discountedAmount"] = this.discountedAmount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeePaymentAppliedWavierMappingTypeUpsertDto();
    result.init(json);
    return result;
  }
}
class FeePaymentDetailTypeUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeParticularId = _data["feeParticularId"];
      this.otherFeeReason = _data["otherFeeReason"];
      this.paidAmount = _data["paidAmount"];
      this.feeAfterDiscount = _data["feeAfterDiscount"];
      this.additionalDiscInPercentage = _data["additionalDiscInPercentage"];
      this.additionalDiscAmount = _data["additionalDiscAmount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeePaymentDetailTypeUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeParticularId"] = this.feeParticularId;
    data["otherFeeReason"] = this.otherFeeReason;
    data["paidAmount"] = this.paidAmount;
    data["feeAfterDiscount"] = this.feeAfterDiscount;
    data["additionalDiscInPercentage"] = this.additionalDiscInPercentage;
    data["additionalDiscAmount"] = this.additionalDiscAmount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeePaymentDetailTypeUpsertDto();
    result.init(json);
    return result;
  }
}
class PaymentFeePageMasterActivityList {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["availFeeWavierDiscList"])) {
        this.availFeeWavierDiscList = [];
        for (let item of _data["availFeeWavierDiscList"]) this.availFeeWavierDiscList.push(AvailFeeWavierDiscDto.fromJS(item));
      }
      if (Array.isArray(_data["availFeeWavierDiscByInstallments"])) {
        this.availFeeWavierDiscByInstallments = [];
        for (let item of _data["availFeeWavierDiscByInstallments"]) this.availFeeWavierDiscByInstallments.push(AvailFeeWavierDiscByInstallmentDto.fromJS(item));
      }
      this.totalFee = _data["totalFee"];
      if (Array.isArray(_data["installmentDetails"])) {
        this.installmentDetails = [];
        for (let item of _data["installmentDetails"]) this.installmentDetails.push(FeeWaiverDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentFeePageMasterActivityList();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.availFeeWavierDiscList)) {
      data["availFeeWavierDiscList"] = [];
      for (let item of this.availFeeWavierDiscList) data["availFeeWavierDiscList"].push(item.toJSON());
    }
    if (Array.isArray(this.availFeeWavierDiscByInstallments)) {
      data["availFeeWavierDiscByInstallments"] = [];
      for (let item of this.availFeeWavierDiscByInstallments) data["availFeeWavierDiscByInstallments"].push(item.toJSON());
    }
    data["totalFee"] = this.totalFee;
    if (Array.isArray(this.installmentDetails)) {
      data["installmentDetails"] = [];
      for (let item of this.installmentDetails) data["installmentDetails"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PaymentFeePageMasterActivityList();
    result.init(json);
    return result;
  }
}
class AvailFeeWavierDiscDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.totalFee = _data["totalFee"];
      this.feeParticularWavierMappingId = _data["feeParticularWavierMappingId"];
      this.appliedFeeParticularWavierMappingId = _data["appliedFeeParticularWavierMappingId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.feeWavierTypeId = _data["feeWavierTypeId"];
      this.sortBy = _data["sortBy"];
      this.feeWavierDisplayName = _data["feeWavierDisplayName"];
      this.feeWavierTypeName = _data["feeWavierTypeName"];
      this.discountInPercent = _data["discountInPercent"];
      this.latePerDayFeeInPercent = _data["latePerDayFeeInPercent"];
      this.numberOfInstallments = _data["numberOfInstallments"];
      this.applicableFee = _data["applicableFee"];
      this.lateFeeStartDate = _data["lateFeeStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["lateFeeStartDate"].toString()) : undefined;
      this.discountEndDate = _data["discountEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["discountEndDate"].toString()) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AvailFeeWavierDiscDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["totalFee"] = this.totalFee;
    data["feeParticularWavierMappingId"] = this.feeParticularWavierMappingId;
    data["appliedFeeParticularWavierMappingId"] = this.appliedFeeParticularWavierMappingId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["feeWavierTypeId"] = this.feeWavierTypeId;
    data["sortBy"] = this.sortBy;
    data["feeWavierDisplayName"] = this.feeWavierDisplayName;
    data["feeWavierTypeName"] = this.feeWavierTypeName;
    data["discountInPercent"] = this.discountInPercent;
    data["latePerDayFeeInPercent"] = this.latePerDayFeeInPercent;
    data["numberOfInstallments"] = this.numberOfInstallments;
    data["applicableFee"] = this.applicableFee;
    data["lateFeeStartDate"] = this.lateFeeStartDate ? this.lateFeeStartDate.toISOString() : undefined;
    data["discountEndDate"] = this.discountEndDate ? this.discountEndDate.toISOString() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AvailFeeWavierDiscDto();
    result.init(json);
    return result;
  }
}
class AvailFeeWavierDiscByInstallmentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.installmentNumber = _data["installmentNumber"];
      this.discountEndDate = _data["discountEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["discountEndDate"].toString()) : undefined;
      this.feeWavierTypeId = _data["feeWavierTypeId"];
      this.feeWavierTypesInstallmentsDetailsId = _data["feeWavierTypesInstallmentsDetailsId"];
      this.feeWavierDisplayName = _data["feeWavierDisplayName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AvailFeeWavierDiscByInstallmentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["installmentNumber"] = this.installmentNumber;
    data["discountEndDate"] = this.discountEndDate ? this.discountEndDate.toISOString() : undefined;
    data["feeWavierTypeId"] = this.feeWavierTypeId;
    data["feeWavierTypesInstallmentsDetailsId"] = this.feeWavierTypesInstallmentsDetailsId;
    data["feeWavierDisplayName"] = this.feeWavierDisplayName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AvailFeeWavierDiscByInstallmentDto();
    result.init(json);
    return result;
  }
}
class FeeWaiverDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeParticularWavierMappingId = _data["feeParticularWavierMappingId"];
      this.feeWavierTypeId = _data["feeWavierTypeId"];
      this.feeWavierTypeName = _data["feeWavierTypeName"];
      this.feeWavierDisplayName = _data["feeWavierDisplayName"];
      this.discountInPercent = _data["discountInPercent"];
      this.latePerDayFeeInPercent = _data["latePerDayFeeInPercent"];
      this.isAlreadyAdded = _data["isAlreadyAdded"];
      this.isFeePaymentAlreadyDone = _data["isFeePaymentAlreadyDone"];
      this.lateFeeStartDate = _data["lateFeeStartDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["lateFeeStartDate"].toString()) : undefined;
      this.discountEndDate = _data["discountEndDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["discountEndDate"].toString()) : undefined;
      this.numberOfInstallments = _data["numberOfInstallments"];
      this.installmentNumber = _data["installmentNumber"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeeWaiverDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeParticularWavierMappingId"] = this.feeParticularWavierMappingId;
    data["feeWavierTypeId"] = this.feeWavierTypeId;
    data["feeWavierTypeName"] = this.feeWavierTypeName;
    data["feeWavierDisplayName"] = this.feeWavierDisplayName;
    data["discountInPercent"] = this.discountInPercent;
    data["latePerDayFeeInPercent"] = this.latePerDayFeeInPercent;
    data["isAlreadyAdded"] = this.isAlreadyAdded;
    data["isFeePaymentAlreadyDone"] = this.isFeePaymentAlreadyDone;
    data["lateFeeStartDate"] = this.lateFeeStartDate ? this.lateFeeStartDate.toISOString() : undefined;
    data["discountEndDate"] = this.discountEndDate ? this.discountEndDate.toISOString() : undefined;
    data["numberOfInstallments"] = this.numberOfInstallments;
    data["installmentNumber"] = this.installmentNumber;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeeWaiverDto();
    result.init(json);
    return result;
  }
}
class FeePaymentHistorySelectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolName = _data["schoolName"];
      this.schoolAddress = _data["schoolAddress"];
      this.academicYearId = _data["academicYearId"];
      this.studentName = _data["studentName"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.rollNumber = _data["rollNumber"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.paymentTypeName = _data["paymentTypeName"];
      this.paymentDate = _data["paymentDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["paymentDate"].toString()) : undefined;
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.chequeBank = _data["chequeBank"];
      this.transactionId = _data["transactionId"];
      this.invoiceNumber = _data["invoiceNumber"];
      if (Array.isArray(_data["feeParticularsSelectList"])) {
        this.feeParticularsSelectList = [];
        for (let item of _data["feeParticularsSelectList"]) this.feeParticularsSelectList.push(FeeParticularsSelectDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeePaymentHistorySelectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolName"] = this.schoolName;
    data["schoolAddress"] = this.schoolAddress;
    data["academicYearId"] = this.academicYearId;
    data["studentName"] = this.studentName;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["rollNumber"] = this.rollNumber;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["paymentTypeName"] = this.paymentTypeName;
    data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : undefined;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["chequeBank"] = this.chequeBank;
    data["transactionId"] = this.transactionId;
    data["invoiceNumber"] = this.invoiceNumber;
    if (Array.isArray(this.feeParticularsSelectList)) {
      data["feeParticularsSelectList"] = [];
      for (let item of this.feeParticularsSelectList) data["feeParticularsSelectList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeePaymentHistorySelectDto();
    result.init(json);
    return result;
  }
}
class FeeParticularsSelectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeParticularId = _data["feeParticularId"];
      this.particularName = _data["particularName"];
      this.totalFee = _data["totalFee"];
      this.feeAfterDiscount = _data["feeAfterDiscount"];
      this.paidAmount = _data["paidAmount"];
      this.dueAmount = _data["dueAmount"];
      this.alreadyPaid = _data["alreadyPaid"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeeParticularsSelectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeParticularId"] = this.feeParticularId;
    data["particularName"] = this.particularName;
    data["totalFee"] = this.totalFee;
    data["feeAfterDiscount"] = this.feeAfterDiscount;
    data["paidAmount"] = this.paidAmount;
    data["dueAmount"] = this.dueAmount;
    data["alreadyPaid"] = this.alreadyPaid;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeeParticularsSelectDto();
    result.init(json);
    return result;
  }
}
class DaywisePaymentReportDTO {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.cashDaywisePaymentReport = _data["cashDaywisePaymentReport"] ? CashDaywisePaymentReport.fromJS(_data["cashDaywisePaymentReport"]) : undefined;
      this.chequeDaywisePaymentReport = _data["chequeDaywisePaymentReport"] ? ChequeDaywisePaymentReport.fromJS(_data["chequeDaywisePaymentReport"]) : undefined;
      this.ddDaywisePaymentReport = _data["ddDaywisePaymentReport"] ? DDDaywisePaymentReport.fromJS(_data["ddDaywisePaymentReport"]) : undefined;
      this.upiPaymentDaywisePaymentReport = _data["upiPaymentDaywisePaymentReport"] ? UpiPaymentDaywisePaymentReport.fromJS(_data["upiPaymentDaywisePaymentReport"]) : undefined;
      this.netBankingDaywisePaymentReport = _data["netBankingDaywisePaymentReport"] ? NetBankingDaywisePaymentReport.fromJS(_data["netBankingDaywisePaymentReport"]) : undefined;
      this.cardDaywisePaymentReport = _data["cardDaywisePaymentReport"] ? CardDaywisePaymentReport.fromJS(_data["cardDaywisePaymentReport"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DaywisePaymentReportDTO();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["cashDaywisePaymentReport"] = this.cashDaywisePaymentReport ? this.cashDaywisePaymentReport.toJSON() : undefined;
    data["chequeDaywisePaymentReport"] = this.chequeDaywisePaymentReport ? this.chequeDaywisePaymentReport.toJSON() : undefined;
    data["ddDaywisePaymentReport"] = this.ddDaywisePaymentReport ? this.ddDaywisePaymentReport.toJSON() : undefined;
    data["upiPaymentDaywisePaymentReport"] = this.upiPaymentDaywisePaymentReport ? this.upiPaymentDaywisePaymentReport.toJSON() : undefined;
    data["netBankingDaywisePaymentReport"] = this.netBankingDaywisePaymentReport ? this.netBankingDaywisePaymentReport.toJSON() : undefined;
    data["cardDaywisePaymentReport"] = this.cardDaywisePaymentReport ? this.cardDaywisePaymentReport.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DaywisePaymentReportDTO();
    result.init(json);
    return result;
  }
}
class CashDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["cashDaywisePaymentReportList"])) {
        this.cashDaywisePaymentReportList = [];
        for (let item of _data["cashDaywisePaymentReportList"]) this.cashDaywisePaymentReportList.push(DaywisePaymentReport.fromJS(item));
      }
      this.cashDaywisePaymentReportTotal = _data["cashDaywisePaymentReportTotal"] ? DaywisePaymentReportTotal.fromJS(_data["cashDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CashDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.cashDaywisePaymentReportList)) {
      data["cashDaywisePaymentReportList"] = [];
      for (let item of this.cashDaywisePaymentReportList) data["cashDaywisePaymentReportList"].push(item.toJSON());
    }
    data["cashDaywisePaymentReportTotal"] = this.cashDaywisePaymentReportTotal ? this.cashDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CashDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class DaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentName = _data["studentName"];
      this.class = _data["class"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.chequeNumber = _data["chequeNumber"];
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.chequeBank = _data["chequeBank"];
      this.academicYearName = _data["academicYearName"];
      this.paymentAmount = _data["paymentAmount"];
      this.invoiceNumber = _data["invoiceNumber"];
      this.transactionDate = _data["transactionDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["transactionDate"].toString()) : undefined;
      this.paymentMode = _data["paymentMode"];
      this.chequeUnclearedAmount = _data["chequeUnclearedAmount"];
      this.transactionBy = _data["transactionBy"];
      this.transactionId = _data["transactionId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentName"] = this.studentName;
    data["class"] = this.class;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["chequeNumber"] = this.chequeNumber;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["chequeBank"] = this.chequeBank;
    data["academicYearName"] = this.academicYearName;
    data["paymentAmount"] = this.paymentAmount;
    data["invoiceNumber"] = this.invoiceNumber;
    data["transactionDate"] = this.transactionDate ? this.transactionDate.toISOString() : undefined;
    data["paymentMode"] = this.paymentMode;
    data["chequeUnclearedAmount"] = this.chequeUnclearedAmount;
    data["transactionBy"] = this.transactionBy;
    data["transactionId"] = this.transactionId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class DaywisePaymentReportTotal {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.totalPaymentAmount = _data["totalPaymentAmount"];
      this.totalChequeUnclearedAmount = _data["totalChequeUnclearedAmount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DaywisePaymentReportTotal();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["totalPaymentAmount"] = this.totalPaymentAmount;
    data["totalChequeUnclearedAmount"] = this.totalChequeUnclearedAmount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DaywisePaymentReportTotal();
    result.init(json);
    return result;
  }
}
class ChequeDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["chequeDaywisePaymentReportList"])) {
        this.chequeDaywisePaymentReportList = [];
        for (let item of _data["chequeDaywisePaymentReportList"]) this.chequeDaywisePaymentReportList.push(DaywisePaymentReport.fromJS(item));
      }
      this.chequeDaywisePaymentReportTotal = _data["chequeDaywisePaymentReportTotal"] ? DaywisePaymentReportTotal.fromJS(_data["chequeDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ChequeDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.chequeDaywisePaymentReportList)) {
      data["chequeDaywisePaymentReportList"] = [];
      for (let item of this.chequeDaywisePaymentReportList) data["chequeDaywisePaymentReportList"].push(item.toJSON());
    }
    data["chequeDaywisePaymentReportTotal"] = this.chequeDaywisePaymentReportTotal ? this.chequeDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ChequeDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class DDDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["ddDaywisePaymentReportList"])) {
        this.ddDaywisePaymentReportList = [];
        for (let item of _data["ddDaywisePaymentReportList"]) this.ddDaywisePaymentReportList.push(DaywisePaymentReport.fromJS(item));
      }
      this.ddDaywisePaymentReportTotal = _data["ddDaywisePaymentReportTotal"] ? DaywisePaymentReportTotal.fromJS(_data["ddDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DDDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.ddDaywisePaymentReportList)) {
      data["ddDaywisePaymentReportList"] = [];
      for (let item of this.ddDaywisePaymentReportList) data["ddDaywisePaymentReportList"].push(item.toJSON());
    }
    data["ddDaywisePaymentReportTotal"] = this.ddDaywisePaymentReportTotal ? this.ddDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DDDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class UpiPaymentDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["upiPaymentDaywisePaymentReportList"])) {
        this.upiPaymentDaywisePaymentReportList = [];
        for (let item of _data["upiPaymentDaywisePaymentReportList"]) this.upiPaymentDaywisePaymentReportList.push(DaywisePaymentReport.fromJS(item));
      }
      this.upiPaymentDaywisePaymentReportTotal = _data["upiPaymentDaywisePaymentReportTotal"] ? DaywisePaymentReportTotal.fromJS(_data["upiPaymentDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new UpiPaymentDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.upiPaymentDaywisePaymentReportList)) {
      data["upiPaymentDaywisePaymentReportList"] = [];
      for (let item of this.upiPaymentDaywisePaymentReportList) data["upiPaymentDaywisePaymentReportList"].push(item.toJSON());
    }
    data["upiPaymentDaywisePaymentReportTotal"] = this.upiPaymentDaywisePaymentReportTotal ? this.upiPaymentDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new UpiPaymentDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class NetBankingDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["netBankingDaywisePaymentReportList"])) {
        this.netBankingDaywisePaymentReportList = [];
        for (let item of _data["netBankingDaywisePaymentReportList"]) this.netBankingDaywisePaymentReportList.push(DaywisePaymentReport.fromJS(item));
      }
      this.netBankingDaywisePaymentReportTotal = _data["netBankingDaywisePaymentReportTotal"] ? DaywisePaymentReportTotal.fromJS(_data["netBankingDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new NetBankingDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.netBankingDaywisePaymentReportList)) {
      data["netBankingDaywisePaymentReportList"] = [];
      for (let item of this.netBankingDaywisePaymentReportList) data["netBankingDaywisePaymentReportList"].push(item.toJSON());
    }
    data["netBankingDaywisePaymentReportTotal"] = this.netBankingDaywisePaymentReportTotal ? this.netBankingDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new NetBankingDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class CardDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["cardDaywisePaymentReportList"])) {
        this.cardDaywisePaymentReportList = [];
        for (let item of _data["cardDaywisePaymentReportList"]) this.cardDaywisePaymentReportList.push(DaywisePaymentReport.fromJS(item));
      }
      this.cardDaywisePaymentReportTotal = _data["cardDaywisePaymentReportTotal"] ? DaywisePaymentReportTotal.fromJS(_data["cardDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CardDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.cardDaywisePaymentReportList)) {
      data["cardDaywisePaymentReportList"] = [];
      for (let item of this.cardDaywisePaymentReportList) data["cardDaywisePaymentReportList"].push(item.toJSON());
    }
    data["cardDaywisePaymentReportTotal"] = this.cardDaywisePaymentReportTotal ? this.cardDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CardDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class DaywisePaymentReportRequest {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.startDate = _data["startDate"] ? SchoolNgbDateModel.fromJS(_data["startDate"]) : undefined;
      this.endDate = _data["endDate"] ? SchoolNgbDateModel.fromJS(_data["endDate"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DaywisePaymentReportRequest();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["startDate"] = this.startDate ? this.startDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DaywisePaymentReportRequest();
    result.init(json);
    return result;
  }
}
class FeeStructureDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      if (Array.isArray(_data["classId"])) {
        this.classId = [];
        for (let item of _data["classId"]) this.classId.push(item);
      }
      this.isPublish = _data["isPublish"];
      this.className = _data["className"];
      if (Array.isArray(_data["feeParticulars"])) {
        this.feeParticulars = [];
        for (let item of _data["feeParticulars"]) this.feeParticulars.push(FeeParticularsDto.fromJS(item));
      }
      if (Array.isArray(_data["divisionId"])) {
        this.divisionId = [];
        for (let item of _data["divisionId"]) this.divisionId.push(item);
      }
      if (Array.isArray(_data["feeParticularWaiverMappings"])) {
        this.feeParticularWaiverMappings = [];
        for (let item of _data["feeParticularWaiverMappings"]) this.feeParticularWaiverMappings.push(FeeWaiverDto.fromJS(item));
      }
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      if (Array.isArray(_data["installmentDetails"])) {
        this.installmentDetails = [];
        for (let item of _data["installmentDetails"]) this.installmentDetails.push(FeeWaiverDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeeStructureDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    if (Array.isArray(this.classId)) {
      data["classId"] = [];
      for (let item of this.classId) data["classId"].push(item);
    }
    data["isPublish"] = this.isPublish;
    data["className"] = this.className;
    if (Array.isArray(this.feeParticulars)) {
      data["feeParticulars"] = [];
      for (let item of this.feeParticulars) data["feeParticulars"].push(item.toJSON());
    }
    if (Array.isArray(this.divisionId)) {
      data["divisionId"] = [];
      for (let item of this.divisionId) data["divisionId"].push(item);
    }
    if (Array.isArray(this.feeParticularWaiverMappings)) {
      data["feeParticularWaiverMappings"] = [];
      for (let item of this.feeParticularWaiverMappings) data["feeParticularWaiverMappings"].push(item.toJSON());
    }
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    if (Array.isArray(this.installmentDetails)) {
      data["installmentDetails"] = [];
      for (let item of this.installmentDetails) data["installmentDetails"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeeStructureDto();
    result.init(json);
    return result;
  }
}
class FeeParticularsDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeParticularId = _data["feeParticularId"];
      this.amount = _data["amount"];
      this.classId = _data["classId"];
      this.isDiscountApplicable = _data["isDiscountApplicable"];
      this.isRTEApplicable = _data["isRTEApplicable"];
      this.particularName = _data["particularName"];
      this.isPublish = _data["isPublish"];
      this.sortBy = _data["sortBy"];
      this.isFeePaymentAlreadyDone = _data["isFeePaymentAlreadyDone"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeeParticularsDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeParticularId"] = this.feeParticularId;
    data["amount"] = this.amount;
    data["classId"] = this.classId;
    data["isDiscountApplicable"] = this.isDiscountApplicable;
    data["isRTEApplicable"] = this.isRTEApplicable;
    data["particularName"] = this.particularName;
    data["isPublish"] = this.isPublish;
    data["sortBy"] = this.sortBy;
    data["isFeePaymentAlreadyDone"] = this.isFeePaymentAlreadyDone;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeeParticularsDto();
    result.init(json);
    return result;
  }
}
class FeeWaiverResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["feeWaivers"])) {
        this.feeWaivers = [];
        for (let item of _data["feeWaivers"]) this.feeWaivers.push(FeeWaiverDto.fromJS(item));
      }
      if (Array.isArray(_data["installmentDetails"])) {
        this.installmentDetails = [];
        for (let item of _data["installmentDetails"]) this.installmentDetails.push(FeeWaiverDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeeWaiverResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.feeWaivers)) {
      data["feeWaivers"] = [];
      for (let item of this.feeWaivers) data["feeWaivers"].push(item.toJSON());
    }
    if (Array.isArray(this.installmentDetails)) {
      data["installmentDetails"] = [];
      for (let item of this.installmentDetails) data["installmentDetails"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeeWaiverResponseDto();
    result.init(json);
    return result;
  }
}
class GradeDivisionWithDisabledCommonMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["schoolGradeDivisionMatrixCascadeList"])) {
        this.schoolGradeDivisionMatrixCascadeList = [];
        for (let item of _data["schoolGradeDivisionMatrixCascadeList"]) this.schoolGradeDivisionMatrixCascadeList.push(SchoolGradeDivisionMatrixWithDisabledDto.fromJS(item));
      }
      if (Array.isArray(_data["grades"])) {
        this.grades = [];
        for (let item of _data["grades"]) this.grades.push(Grade.fromJS(item));
      }
      if (Array.isArray(_data["divisions"])) {
        this.divisions = [];
        for (let item of _data["divisions"]) this.divisions.push(CommonDivisionWithDisabled.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GradeDivisionWithDisabledCommonMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.schoolGradeDivisionMatrixCascadeList)) {
      data["schoolGradeDivisionMatrixCascadeList"] = [];
      for (let item of this.schoolGradeDivisionMatrixCascadeList) data["schoolGradeDivisionMatrixCascadeList"].push(item.toJSON());
    }
    if (Array.isArray(this.grades)) {
      data["grades"] = [];
      for (let item of this.grades) data["grades"].push(item.toJSON());
    }
    if (Array.isArray(this.divisions)) {
      data["divisions"] = [];
      for (let item of this.divisions) data["divisions"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GradeDivisionWithDisabledCommonMasterDto();
    result.init(json);
    return result;
  }
}
class SchoolGradeDivisionMatrixWithDisabledDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolGradeDivisionMatrixId = _data["schoolGradeDivisionMatrixId"];
      this.className = _data["className"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.isAlreadyExist = _data["isAlreadyExist"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new SchoolGradeDivisionMatrixWithDisabledDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolGradeDivisionMatrixId"] = this.schoolGradeDivisionMatrixId;
    data["className"] = this.className;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["isAlreadyExist"] = this.isAlreadyExist;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new SchoolGradeDivisionMatrixWithDisabledDto();
    result.init(json);
    return result;
  }
}
class CommonDivisionWithDisabled {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.divisionId = _data["divisionId"];
      this.divisionName = _data["divisionName"];
      this.disabled = _data["disabled"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CommonDivisionWithDisabled();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["divisionId"] = this.divisionId;
    data["divisionName"] = this.divisionName;
    data["disabled"] = this.disabled;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CommonDivisionWithDisabled();
    result.init(json);
    return result;
  }
}
class PublishUnpublishParticularDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.academicYearId = _data["academicYearId"];
      this.isPublish = _data["isPublish"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PublishUnpublishParticularDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["academicYearId"] = this.academicYearId;
    data["isPublish"] = this.isPublish;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PublishUnpublishParticularDto();
    result.init(json);
    return result;
  }
}
class FeeParticularCloneDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.fromClassId = _data["fromClassId"];
      this.fromClassName = _data["fromClassName"];
      if (Array.isArray(_data["toClassId"])) {
        this.toClassId = [];
        for (let item of _data["toClassId"]) this.toClassId.push(item);
      }
      this.academicYearId = _data["academicYearId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeeParticularCloneDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["fromClassId"] = this.fromClassId;
    data["fromClassName"] = this.fromClassName;
    if (Array.isArray(this.toClassId)) {
      data["toClassId"] = [];
      for (let item of this.toClassId) data["toClassId"].push(item);
    }
    data["academicYearId"] = this.academicYearId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeeParticularCloneDto();
    result.init(json);
    return result;
  }
}
class StudentKitFeeStructureDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      if (Array.isArray(_data["classId"])) {
        this.classId = [];
        for (let item of _data["classId"]) this.classId.push(item);
      }
      this.isPublish = _data["isPublish"];
      this.className = _data["className"];
      if (Array.isArray(_data["feeParticulars"])) {
        this.feeParticulars = [];
        for (let item of _data["feeParticulars"]) this.feeParticulars.push(StudentKitFeeParticularsDto.fromJS(item));
      }
      if (Array.isArray(_data["divisionId"])) {
        this.divisionId = [];
        for (let item of _data["divisionId"]) this.divisionId.push(item);
      }
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitFeeStructureDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    if (Array.isArray(this.classId)) {
      data["classId"] = [];
      for (let item of this.classId) data["classId"].push(item);
    }
    data["isPublish"] = this.isPublish;
    data["className"] = this.className;
    if (Array.isArray(this.feeParticulars)) {
      data["feeParticulars"] = [];
      for (let item of this.feeParticulars) data["feeParticulars"].push(item.toJSON());
    }
    if (Array.isArray(this.divisionId)) {
      data["divisionId"] = [];
      for (let item of this.divisionId) data["divisionId"].push(item);
    }
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitFeeStructureDto();
    result.init(json);
    return result;
  }
}
class StudentKitFeeParticularsDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.feeParticularId = _data["feeParticularId"];
      this.amount = _data["amount"];
      this.classId = _data["classId"];
      this.particularName = _data["particularName"];
      this.isPublish = _data["isPublish"];
      this.sortBy = _data["sortBy"];
      this.isFeePaymentAlreadyDone = _data["isFeePaymentAlreadyDone"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitFeeParticularsDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["feeParticularId"] = this.feeParticularId;
    data["amount"] = this.amount;
    data["classId"] = this.classId;
    data["particularName"] = this.particularName;
    data["isPublish"] = this.isPublish;
    data["sortBy"] = this.sortBy;
    data["isFeePaymentAlreadyDone"] = this.isFeePaymentAlreadyDone;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitFeeParticularsDto();
    result.init(json);
    return result;
  }
}
class PaymentAnalyticsExportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["paymentAnalyticsExportSchool"])) {
        this.paymentAnalyticsExportSchool = [];
        for (let item of _data["paymentAnalyticsExportSchool"]) this.paymentAnalyticsExportSchool.push(PaymentAnalyticsSchoolExportDto.fromJS(item));
      }
      if (Array.isArray(_data["paymentAnalyticsExportGrade"])) {
        this.paymentAnalyticsExportGrade = [];
        for (let item of _data["paymentAnalyticsExportGrade"]) this.paymentAnalyticsExportGrade.push(PaymentAnalyticsGradeExportDto.fromJS(item));
      }
      if (Array.isArray(_data["paymentAnalyticsExportDivision"])) {
        this.paymentAnalyticsExportDivision = [];
        for (let item of _data["paymentAnalyticsExportDivision"]) this.paymentAnalyticsExportDivision.push(PaymentAnalyticsDivisionExportDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentAnalyticsExportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.paymentAnalyticsExportSchool)) {
      data["paymentAnalyticsExportSchool"] = [];
      for (let item of this.paymentAnalyticsExportSchool) data["paymentAnalyticsExportSchool"].push(item.toJSON());
    }
    if (Array.isArray(this.paymentAnalyticsExportGrade)) {
      data["paymentAnalyticsExportGrade"] = [];
      for (let item of this.paymentAnalyticsExportGrade) data["paymentAnalyticsExportGrade"].push(item.toJSON());
    }
    if (Array.isArray(this.paymentAnalyticsExportDivision)) {
      data["paymentAnalyticsExportDivision"] = [];
      for (let item of this.paymentAnalyticsExportDivision) data["paymentAnalyticsExportDivision"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PaymentAnalyticsExportDto();
    result.init(json);
    return result;
  }
}
class PaymentAnalyticsSchoolExportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolName = _data["schoolName"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.rollNumber = _data["rollNumber"];
      this.studentName = _data["studentName"];
      this.isRTEStudent = _data["isRTEStudent"];
      this.isNewStudent = _data["isNewStudent"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.receivableFee = _data["receivableFee"];
      this.collectionInPercentage = _data["collectionInPercentage"];
      this.contactNo = _data["contactNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentAnalyticsSchoolExportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolName"] = this.schoolName;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["rollNumber"] = this.rollNumber;
    data["studentName"] = this.studentName;
    data["isRTEStudent"] = this.isRTEStudent;
    data["isNewStudent"] = this.isNewStudent;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["receivableFee"] = this.receivableFee;
    data["collectionInPercentage"] = this.collectionInPercentage;
    data["contactNo"] = this.contactNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PaymentAnalyticsSchoolExportDto();
    result.init(json);
    return result;
  }
}
class PaymentAnalyticsGradeExportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.rollNumber = _data["rollNumber"];
      this.studentName = _data["studentName"];
      this.isRTEStudent = _data["isRTEStudent"];
      this.isNewStudent = _data["isNewStudent"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.receivableFee = _data["receivableFee"];
      this.collectionInPercentage = _data["collectionInPercentage"];
      this.contactNo = _data["contactNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentAnalyticsGradeExportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["rollNumber"] = this.rollNumber;
    data["studentName"] = this.studentName;
    data["isRTEStudent"] = this.isRTEStudent;
    data["isNewStudent"] = this.isNewStudent;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["receivableFee"] = this.receivableFee;
    data["collectionInPercentage"] = this.collectionInPercentage;
    data["contactNo"] = this.contactNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PaymentAnalyticsGradeExportDto();
    result.init(json);
    return result;
  }
}
class PaymentAnalyticsDivisionExportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.rollNumber = _data["rollNumber"];
      this.studentName = _data["studentName"];
      this.isRTEStudent = _data["isRTEStudent"];
      this.isNewStudent = _data["isNewStudent"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.collectionInPercentage = _data["collectionInPercentage"];
      this.receivableFee = _data["receivableFee"];
      this.contactNo = _data["contactNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PaymentAnalyticsDivisionExportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["rollNumber"] = this.rollNumber;
    data["studentName"] = this.studentName;
    data["isRTEStudent"] = this.isRTEStudent;
    data["isNewStudent"] = this.isNewStudent;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["collectionInPercentage"] = this.collectionInPercentage;
    data["receivableFee"] = this.receivableFee;
    data["contactNo"] = this.contactNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PaymentAnalyticsDivisionExportDto();
    result.init(json);
    return result;
  }
}
class ResponseExportStudentDataDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["students"])) {
        this.students = [];
        for (let item of _data["students"]) this.students.push(StudentExportDataDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ResponseExportStudentDataDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.students)) {
      data["students"] = [];
      for (let item of this.students) data["students"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ResponseExportStudentDataDto();
    result.init(json);
    return result;
  }
}
class StudentExportDataDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.admissionNo = _data["admissionNo"];
      this.rollNumber = _data["rollNumber"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.dateOfAdmission = _data["dateOfAdmission"];
      this.cbscStudentId = _data["cbscStudentId"];
      this.gender = _data["gender"];
      this.adharNo = _data["adharNo"];
      this.religion = _data["religion"];
      this.category = _data["category"];
      this.cast = _data["cast"];
      this.subCast = _data["subCast"];
      this.nationality = _data["nationality"];
      this.motherTounge = _data["motherTounge"];
      this.emergencyContactPersonName = _data["emergencyContactPersonName"];
      this.emergencyContactNumber = _data["emergencyContactNumber"];
      this.familyDoctorName = _data["familyDoctorName"];
      this.familyDoctorContactNumber = _data["familyDoctorContactNumber"];
      this.birthPlace = _data["birthPlace"];
      this.birthDate = _data["birthDate"];
      this.birthDateInWords = _data["birthDateInWords"];
      this.birthCountryName = _data["birthCountryName"];
      this.birthStateName = _data["birthStateName"];
      this.birthDistrictName = _data["birthDistrictName"];
      this.birthTalukaName = _data["birthTalukaName"];
      this.currentAddressLine1 = _data["currentAddressLine1"];
      this.currentAddressLine2 = _data["currentAddressLine2"];
      this.currentZipcode = _data["currentZipcode"];
      this.currentCountryName = _data["currentCountryName"];
      this.currentStateName = _data["currentStateName"];
      this.currentDistrictName = _data["currentDistrictName"];
      this.currentTalukaName = _data["currentTalukaName"];
      this.bloodGroup = _data["bloodGroup"];
      this.height = _data["height"];
      this.weight = _data["weight"];
      this.medicalHistory = _data["medicalHistory"];
      this.lastSchoolAttended = _data["lastSchoolAttended"];
      this.lastSchoolStandard = _data["lastSchoolStandard"];
      this.lastSchoolDivision = _data["lastSchoolDivision"];
      this.progressNoteFromLastSchool = _data["progressNoteFromLastSchool"];
      this.conductNoteFromLastSchool = _data["conductNoteFromLastSchool"];
      this.reasonOfLeavingSchoolLastSchool = _data["reasonOfLeavingSchoolLastSchool"];
      this.dateOfLeavingLastSchool = _data["dateOfLeavingLastSchool"];
      this.remarkFromLastSchool = _data["remarkFromLastSchool"];
      this.isNewStudent = _data["isNewStudent"];
      this.isArchive = _data["isArchive"];
      this.isRTEStudent = _data["isRTEStudent"];
      this.isConsationApplicable = _data["isConsationApplicable"];
      this.consationAmount = _data["consationAmount"];
      this.academicYearName = _data["academicYearName"];
      this.previousAcademicYearPendingFeeAmount = _data["previousAcademicYearPendingFeeAmount"];
      this.isAppAccess = _data["isAppAccess"];
      this.appAccessMobileNo = _data["appAccessMobileNo"];
      this.fatherFirstName = _data["fatherFirstName"];
      this.fatherMiddleName = _data["fatherMiddleName"];
      this.fatherLastName = _data["fatherLastName"];
      this.fatherGender = _data["fatherGender"];
      this.fatherMobileNo = _data["fatherMobileNo"];
      this.fatherConactNo = _data["fatherConactNo"];
      this.fatherEmailId = _data["fatherEmailId"];
      this.fatherAddressLine1 = _data["fatherAddressLine1"];
      this.fatherAddressLine2 = _data["fatherAddressLine2"];
      this.fatherCountryName = _data["fatherCountryName"];
      this.fatherStateName = _data["fatherStateName"];
      this.fatherDistrictName = _data["fatherDistrictName"];
      this.fatherTalukaName = _data["fatherTalukaName"];
      this.fatherPincode = _data["fatherPincode"];
      this.fatherAdharNumber = _data["fatherAdharNumber"];
      this.fatherEducation = _data["fatherEducation"];
      this.fatherBirthDate = _data["fatherBirthDate"];
      this.fatherOccupation = _data["fatherOccupation"];
      this.fatherAnnualIncome = _data["fatherAnnualIncome"];
      this.fatherBloodGroup = _data["fatherBloodGroup"];
      this.motherFirstName = _data["motherFirstName"];
      this.motherMiddleName = _data["motherMiddleName"];
      this.motherLastName = _data["motherLastName"];
      this.motherGender = _data["motherGender"];
      this.motherMobileNo = _data["motherMobileNo"];
      this.motherConactNo = _data["motherConactNo"];
      this.motherEmailId = _data["motherEmailId"];
      this.motherAddressLine1 = _data["motherAddressLine1"];
      this.motherAddressLine2 = _data["motherAddressLine2"];
      this.motherCountryName = _data["motherCountryName"];
      this.motherStateName = _data["motherStateName"];
      this.motherDistrictName = _data["motherDistrictName"];
      this.motherTalukaName = _data["motherTalukaName"];
      this.motherPincode = _data["motherPincode"];
      this.motherAdharNumber = _data["motherAdharNumber"];
      this.motherEducation = _data["motherEducation"];
      this.motherBirthDate = _data["motherBirthDate"];
      this.motherOccupation = _data["motherOccupation"];
      this.motherAnnualIncome = _data["motherAnnualIncome"];
      this.motherBloodGroup = _data["motherBloodGroup"];
      this.guardianFirstName = _data["guardianFirstName"];
      this.guardianMiddleName = _data["guardianMiddleName"];
      this.guardianLastName = _data["guardianLastName"];
      this.guardianGender = _data["guardianGender"];
      this.guardianMobileNo = _data["guardianMobileNo"];
      this.guardianConactNo = _data["guardianConactNo"];
      this.guardianEmailId = _data["guardianEmailId"];
      this.guardianAddressLine1 = _data["guardianAddressLine1"];
      this.guardianAddressLine2 = _data["guardianAddressLine2"];
      this.guardianCountryName = _data["guardianCountryName"];
      this.guardianStateName = _data["guardianStateName"];
      this.guardianDistrictName = _data["guardianDistrictName"];
      this.guardianTalukaName = _data["guardianTalukaName"];
      this.guardianPincode = _data["guardianPincode"];
      this.guardianAdharNumber = _data["guardianAdharNumber"];
      this.guardianEducation = _data["guardianEducation"];
      this.guardianBirthDate = _data["guardianBirthDate"];
      this.guardianOccupation = _data["guardianOccupation"];
      this.guardianAnnualIncome = _data["guardianAnnualIncome"];
      this.guardianBloodGroup = _data["guardianBloodGroup"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentExportDataDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["admissionNo"] = this.admissionNo;
    data["rollNumber"] = this.rollNumber;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["dateOfAdmission"] = this.dateOfAdmission;
    data["cbscStudentId"] = this.cbscStudentId;
    data["gender"] = this.gender;
    data["adharNo"] = this.adharNo;
    data["religion"] = this.religion;
    data["category"] = this.category;
    data["cast"] = this.cast;
    data["subCast"] = this.subCast;
    data["nationality"] = this.nationality;
    data["motherTounge"] = this.motherTounge;
    data["emergencyContactPersonName"] = this.emergencyContactPersonName;
    data["emergencyContactNumber"] = this.emergencyContactNumber;
    data["familyDoctorName"] = this.familyDoctorName;
    data["familyDoctorContactNumber"] = this.familyDoctorContactNumber;
    data["birthPlace"] = this.birthPlace;
    data["birthDate"] = this.birthDate;
    data["birthDateInWords"] = this.birthDateInWords;
    data["birthCountryName"] = this.birthCountryName;
    data["birthStateName"] = this.birthStateName;
    data["birthDistrictName"] = this.birthDistrictName;
    data["birthTalukaName"] = this.birthTalukaName;
    data["currentAddressLine1"] = this.currentAddressLine1;
    data["currentAddressLine2"] = this.currentAddressLine2;
    data["currentZipcode"] = this.currentZipcode;
    data["currentCountryName"] = this.currentCountryName;
    data["currentStateName"] = this.currentStateName;
    data["currentDistrictName"] = this.currentDistrictName;
    data["currentTalukaName"] = this.currentTalukaName;
    data["bloodGroup"] = this.bloodGroup;
    data["height"] = this.height;
    data["weight"] = this.weight;
    data["medicalHistory"] = this.medicalHistory;
    data["lastSchoolAttended"] = this.lastSchoolAttended;
    data["lastSchoolStandard"] = this.lastSchoolStandard;
    data["lastSchoolDivision"] = this.lastSchoolDivision;
    data["progressNoteFromLastSchool"] = this.progressNoteFromLastSchool;
    data["conductNoteFromLastSchool"] = this.conductNoteFromLastSchool;
    data["reasonOfLeavingSchoolLastSchool"] = this.reasonOfLeavingSchoolLastSchool;
    data["dateOfLeavingLastSchool"] = this.dateOfLeavingLastSchool;
    data["remarkFromLastSchool"] = this.remarkFromLastSchool;
    data["isNewStudent"] = this.isNewStudent;
    data["isArchive"] = this.isArchive;
    data["isRTEStudent"] = this.isRTEStudent;
    data["isConsationApplicable"] = this.isConsationApplicable;
    data["consationAmount"] = this.consationAmount;
    data["academicYearName"] = this.academicYearName;
    data["previousAcademicYearPendingFeeAmount"] = this.previousAcademicYearPendingFeeAmount;
    data["isAppAccess"] = this.isAppAccess;
    data["appAccessMobileNo"] = this.appAccessMobileNo;
    data["fatherFirstName"] = this.fatherFirstName;
    data["fatherMiddleName"] = this.fatherMiddleName;
    data["fatherLastName"] = this.fatherLastName;
    data["fatherGender"] = this.fatherGender;
    data["fatherMobileNo"] = this.fatherMobileNo;
    data["fatherConactNo"] = this.fatherConactNo;
    data["fatherEmailId"] = this.fatherEmailId;
    data["fatherAddressLine1"] = this.fatherAddressLine1;
    data["fatherAddressLine2"] = this.fatherAddressLine2;
    data["fatherCountryName"] = this.fatherCountryName;
    data["fatherStateName"] = this.fatherStateName;
    data["fatherDistrictName"] = this.fatherDistrictName;
    data["fatherTalukaName"] = this.fatherTalukaName;
    data["fatherPincode"] = this.fatherPincode;
    data["fatherAdharNumber"] = this.fatherAdharNumber;
    data["fatherEducation"] = this.fatherEducation;
    data["fatherBirthDate"] = this.fatherBirthDate;
    data["fatherOccupation"] = this.fatherOccupation;
    data["fatherAnnualIncome"] = this.fatherAnnualIncome;
    data["fatherBloodGroup"] = this.fatherBloodGroup;
    data["motherFirstName"] = this.motherFirstName;
    data["motherMiddleName"] = this.motherMiddleName;
    data["motherLastName"] = this.motherLastName;
    data["motherGender"] = this.motherGender;
    data["motherMobileNo"] = this.motherMobileNo;
    data["motherConactNo"] = this.motherConactNo;
    data["motherEmailId"] = this.motherEmailId;
    data["motherAddressLine1"] = this.motherAddressLine1;
    data["motherAddressLine2"] = this.motherAddressLine2;
    data["motherCountryName"] = this.motherCountryName;
    data["motherStateName"] = this.motherStateName;
    data["motherDistrictName"] = this.motherDistrictName;
    data["motherTalukaName"] = this.motherTalukaName;
    data["motherPincode"] = this.motherPincode;
    data["motherAdharNumber"] = this.motherAdharNumber;
    data["motherEducation"] = this.motherEducation;
    data["motherBirthDate"] = this.motherBirthDate;
    data["motherOccupation"] = this.motherOccupation;
    data["motherAnnualIncome"] = this.motherAnnualIncome;
    data["motherBloodGroup"] = this.motherBloodGroup;
    data["guardianFirstName"] = this.guardianFirstName;
    data["guardianMiddleName"] = this.guardianMiddleName;
    data["guardianLastName"] = this.guardianLastName;
    data["guardianGender"] = this.guardianGender;
    data["guardianMobileNo"] = this.guardianMobileNo;
    data["guardianConactNo"] = this.guardianConactNo;
    data["guardianEmailId"] = this.guardianEmailId;
    data["guardianAddressLine1"] = this.guardianAddressLine1;
    data["guardianAddressLine2"] = this.guardianAddressLine2;
    data["guardianCountryName"] = this.guardianCountryName;
    data["guardianStateName"] = this.guardianStateName;
    data["guardianDistrictName"] = this.guardianDistrictName;
    data["guardianTalukaName"] = this.guardianTalukaName;
    data["guardianPincode"] = this.guardianPincode;
    data["guardianAdharNumber"] = this.guardianAdharNumber;
    data["guardianEducation"] = this.guardianEducation;
    data["guardianBirthDate"] = this.guardianBirthDate;
    data["guardianOccupation"] = this.guardianOccupation;
    data["guardianAnnualIncome"] = this.guardianAnnualIncome;
    data["guardianBloodGroup"] = this.guardianBloodGroup;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentExportDataDto();
    result.init(json);
    return result;
  }
}
class StudentKitPaymentAnalyticsExportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["studentKitPaymentAnalyticsExportSchool"])) {
        this.studentKitPaymentAnalyticsExportSchool = [];
        for (let item of _data["studentKitPaymentAnalyticsExportSchool"]) this.studentKitPaymentAnalyticsExportSchool.push(StudentKitPaymentAnalyticsSchoolExportDto.fromJS(item));
      }
      if (Array.isArray(_data["studentKitPaymentAnalyticsExportGrade"])) {
        this.studentKitPaymentAnalyticsExportGrade = [];
        for (let item of _data["studentKitPaymentAnalyticsExportGrade"]) this.studentKitPaymentAnalyticsExportGrade.push(StudentKitPaymentAnalyticsGradeExportDto.fromJS(item));
      }
      if (Array.isArray(_data["studentKitPaymentAnalyticsExportDivision"])) {
        this.studentKitPaymentAnalyticsExportDivision = [];
        for (let item of _data["studentKitPaymentAnalyticsExportDivision"]) this.studentKitPaymentAnalyticsExportDivision.push(StudentKitPaymentAnalyticsDivisionExportDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitPaymentAnalyticsExportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.studentKitPaymentAnalyticsExportSchool)) {
      data["studentKitPaymentAnalyticsExportSchool"] = [];
      for (let item of this.studentKitPaymentAnalyticsExportSchool) data["studentKitPaymentAnalyticsExportSchool"].push(item.toJSON());
    }
    if (Array.isArray(this.studentKitPaymentAnalyticsExportGrade)) {
      data["studentKitPaymentAnalyticsExportGrade"] = [];
      for (let item of this.studentKitPaymentAnalyticsExportGrade) data["studentKitPaymentAnalyticsExportGrade"].push(item.toJSON());
    }
    if (Array.isArray(this.studentKitPaymentAnalyticsExportDivision)) {
      data["studentKitPaymentAnalyticsExportDivision"] = [];
      for (let item of this.studentKitPaymentAnalyticsExportDivision) data["studentKitPaymentAnalyticsExportDivision"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitPaymentAnalyticsExportDto();
    result.init(json);
    return result;
  }
}
class StudentKitPaymentAnalyticsSchoolExportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolName = _data["schoolName"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.rollNumber = _data["rollNumber"];
      this.studentName = _data["studentName"];
      this.isRTEStudent = _data["isRTEStudent"];
      this.isNewStudent = _data["isNewStudent"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.receivableFee = _data["receivableFee"];
      this.collectionInPercentage = _data["collectionInPercentage"];
      this.contactNo = _data["contactNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitPaymentAnalyticsSchoolExportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolName"] = this.schoolName;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["rollNumber"] = this.rollNumber;
    data["studentName"] = this.studentName;
    data["isRTEStudent"] = this.isRTEStudent;
    data["isNewStudent"] = this.isNewStudent;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["receivableFee"] = this.receivableFee;
    data["collectionInPercentage"] = this.collectionInPercentage;
    data["contactNo"] = this.contactNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitPaymentAnalyticsSchoolExportDto();
    result.init(json);
    return result;
  }
}
class StudentKitPaymentAnalyticsGradeExportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.rollNumber = _data["rollNumber"];
      this.studentName = _data["studentName"];
      this.isRTEStudent = _data["isRTEStudent"];
      this.isNewStudent = _data["isNewStudent"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.receivableFee = _data["receivableFee"];
      this.collectionInPercentage = _data["collectionInPercentage"];
      this.contactNo = _data["contactNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitPaymentAnalyticsGradeExportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["rollNumber"] = this.rollNumber;
    data["studentName"] = this.studentName;
    data["isRTEStudent"] = this.isRTEStudent;
    data["isNewStudent"] = this.isNewStudent;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["receivableFee"] = this.receivableFee;
    data["collectionInPercentage"] = this.collectionInPercentage;
    data["contactNo"] = this.contactNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitPaymentAnalyticsGradeExportDto();
    result.init(json);
    return result;
  }
}
class StudentKitPaymentAnalyticsDivisionExportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.rollNumber = _data["rollNumber"];
      this.studentName = _data["studentName"];
      this.isRTEStudent = _data["isRTEStudent"];
      this.isNewStudent = _data["isNewStudent"];
      this.totalFee = _data["totalFee"];
      this.discountedFee = _data["discountedFee"];
      this.effectiveFee = _data["effectiveFee"];
      this.collectionTillDate = _data["collectionTillDate"];
      this.collectionInPercentage = _data["collectionInPercentage"];
      this.receivableFee = _data["receivableFee"];
      this.contactNo = _data["contactNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentKitPaymentAnalyticsDivisionExportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["rollNumber"] = this.rollNumber;
    data["studentName"] = this.studentName;
    data["isRTEStudent"] = this.isRTEStudent;
    data["isNewStudent"] = this.isNewStudent;
    data["totalFee"] = this.totalFee;
    data["discountedFee"] = this.discountedFee;
    data["effectiveFee"] = this.effectiveFee;
    data["collectionTillDate"] = this.collectionTillDate;
    data["collectionInPercentage"] = this.collectionInPercentage;
    data["receivableFee"] = this.receivableFee;
    data["contactNo"] = this.contactNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentKitPaymentAnalyticsDivisionExportDto();
    result.init(json);
    return result;
  }
}
class ResponseExportTeacherDataDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["teachers"])) {
        this.teachers = [];
        for (let item of _data["teachers"]) this.teachers.push(TeacherExportDataDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ResponseExportTeacherDataDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.teachers)) {
      data["teachers"] = [];
      for (let item of this.teachers) data["teachers"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ResponseExportTeacherDataDto();
    result.init(json);
    return result;
  }
}
class TeacherExportDataDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.gender = _data["gender"];
      this.mobileNumber = _data["mobileNumber"];
      this.contactNumber = _data["contactNumber"];
      this.emailId = _data["emailId"];
      this.addressLine1 = _data["addressLine1"];
      this.addressLine2 = _data["addressLine2"];
      this.countryName = _data["countryName"];
      this.stateName = _data["stateName"];
      this.districtName = _data["districtName"];
      this.talukaName = _data["talukaName"];
      this.pincode = _data["pincode"];
      this.adharNumber = _data["adharNumber"];
      this.education = _data["education"];
      this.birthDate = _data["birthDate"];
      this.bloodGroup = _data["bloodGroup"];
      this.isAppAccess = _data["isAppAccess"];
      this.appAccessMobileNo = _data["appAccessMobileNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherExportDataDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["gender"] = this.gender;
    data["mobileNumber"] = this.mobileNumber;
    data["contactNumber"] = this.contactNumber;
    data["emailId"] = this.emailId;
    data["addressLine1"] = this.addressLine1;
    data["addressLine2"] = this.addressLine2;
    data["countryName"] = this.countryName;
    data["stateName"] = this.stateName;
    data["districtName"] = this.districtName;
    data["talukaName"] = this.talukaName;
    data["pincode"] = this.pincode;
    data["adharNumber"] = this.adharNumber;
    data["education"] = this.education;
    data["birthDate"] = this.birthDate;
    data["bloodGroup"] = this.bloodGroup;
    data["isAppAccess"] = this.isAppAccess;
    data["appAccessMobileNo"] = this.appAccessMobileNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherExportDataDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentAnalyticsExportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["transportPaymentAnalyticsExportSchool"])) {
        this.transportPaymentAnalyticsExportSchool = [];
        for (let item of _data["transportPaymentAnalyticsExportSchool"]) this.transportPaymentAnalyticsExportSchool.push(TransportPaymentAnalyticsSchoolExportDto.fromJS(item));
      }
      if (Array.isArray(_data["transportPaymentAnalyticsExportGrade"])) {
        this.transportPaymentAnalyticsExportGrade = [];
        for (let item of _data["transportPaymentAnalyticsExportGrade"]) this.transportPaymentAnalyticsExportGrade.push(TransportPaymentAnalyticsGradeExportDto.fromJS(item));
      }
      if (Array.isArray(_data["transportPaymentAnalyticsExportDivision"])) {
        this.transportPaymentAnalyticsExportDivision = [];
        for (let item of _data["transportPaymentAnalyticsExportDivision"]) this.transportPaymentAnalyticsExportDivision.push(TransportPaymentAnalyticsDivisionExportDto.fromJS(item));
      }
      if (Array.isArray(_data["transportPaymentAnalyticsExportStaffList"])) {
        this.transportPaymentAnalyticsExportStaffList = [];
        for (let item of _data["transportPaymentAnalyticsExportStaffList"]) this.transportPaymentAnalyticsExportStaffList.push(TransportPaymentAnalyticsStaffListExportDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentAnalyticsExportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.transportPaymentAnalyticsExportSchool)) {
      data["transportPaymentAnalyticsExportSchool"] = [];
      for (let item of this.transportPaymentAnalyticsExportSchool) data["transportPaymentAnalyticsExportSchool"].push(item.toJSON());
    }
    if (Array.isArray(this.transportPaymentAnalyticsExportGrade)) {
      data["transportPaymentAnalyticsExportGrade"] = [];
      for (let item of this.transportPaymentAnalyticsExportGrade) data["transportPaymentAnalyticsExportGrade"].push(item.toJSON());
    }
    if (Array.isArray(this.transportPaymentAnalyticsExportDivision)) {
      data["transportPaymentAnalyticsExportDivision"] = [];
      for (let item of this.transportPaymentAnalyticsExportDivision) data["transportPaymentAnalyticsExportDivision"].push(item.toJSON());
    }
    if (Array.isArray(this.transportPaymentAnalyticsExportStaffList)) {
      data["transportPaymentAnalyticsExportStaffList"] = [];
      for (let item of this.transportPaymentAnalyticsExportStaffList) data["transportPaymentAnalyticsExportStaffList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentAnalyticsExportDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentAnalyticsSchoolExportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolName = _data["schoolName"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.rollNumber = _data["rollNumber"];
      this.studentName = _data["studentName"];
      this.transportTotalFee = _data["transportTotalFee"];
      this.transportDiscountedFee = _data["transportDiscountedFee"];
      this.transportEffectiveFee = _data["transportEffectiveFee"];
      this.transportCollectionTillDate = _data["transportCollectionTillDate"];
      this.transportReceivableFee = _data["transportReceivableFee"];
      this.transportCollectionInPercentage = _data["transportCollectionInPercentage"];
      this.contactNo = _data["contactNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentAnalyticsSchoolExportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolName"] = this.schoolName;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["rollNumber"] = this.rollNumber;
    data["studentName"] = this.studentName;
    data["transportTotalFee"] = this.transportTotalFee;
    data["transportDiscountedFee"] = this.transportDiscountedFee;
    data["transportEffectiveFee"] = this.transportEffectiveFee;
    data["transportCollectionTillDate"] = this.transportCollectionTillDate;
    data["transportReceivableFee"] = this.transportReceivableFee;
    data["transportCollectionInPercentage"] = this.transportCollectionInPercentage;
    data["contactNo"] = this.contactNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentAnalyticsSchoolExportDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentAnalyticsGradeExportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.rollNumber = _data["rollNumber"];
      this.studentName = _data["studentName"];
      this.transportTotalFee = _data["transportTotalFee"];
      this.transportDiscountedFee = _data["transportDiscountedFee"];
      this.transportEffectiveFee = _data["transportEffectiveFee"];
      this.transportCollectionTillDate = _data["transportCollectionTillDate"];
      this.transportReceivableFee = _data["transportReceivableFee"];
      this.transportCollectionInPercentage = _data["transportCollectionInPercentage"];
      this.contactNo = _data["contactNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentAnalyticsGradeExportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["rollNumber"] = this.rollNumber;
    data["studentName"] = this.studentName;
    data["transportTotalFee"] = this.transportTotalFee;
    data["transportDiscountedFee"] = this.transportDiscountedFee;
    data["transportEffectiveFee"] = this.transportEffectiveFee;
    data["transportCollectionTillDate"] = this.transportCollectionTillDate;
    data["transportReceivableFee"] = this.transportReceivableFee;
    data["transportCollectionInPercentage"] = this.transportCollectionInPercentage;
    data["contactNo"] = this.contactNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentAnalyticsGradeExportDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentAnalyticsDivisionExportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.rollNumber = _data["rollNumber"];
      this.studentName = _data["studentName"];
      this.transportTotalFee = _data["transportTotalFee"];
      this.transportDiscountedFee = _data["transportDiscountedFee"];
      this.transportEffectiveFee = _data["transportEffectiveFee"];
      this.transportCollectionTillDate = _data["transportCollectionTillDate"];
      this.transportReceivableFee = _data["transportReceivableFee"];
      this.transportCollectionInPercentage = _data["transportCollectionInPercentage"];
      this.contactNo = _data["contactNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentAnalyticsDivisionExportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["rollNumber"] = this.rollNumber;
    data["studentName"] = this.studentName;
    data["transportTotalFee"] = this.transportTotalFee;
    data["transportDiscountedFee"] = this.transportDiscountedFee;
    data["transportEffectiveFee"] = this.transportEffectiveFee;
    data["transportCollectionTillDate"] = this.transportCollectionTillDate;
    data["transportReceivableFee"] = this.transportReceivableFee;
    data["transportCollectionInPercentage"] = this.transportCollectionInPercentage;
    data["contactNo"] = this.contactNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentAnalyticsDivisionExportDto();
    result.init(json);
    return result;
  }
}
class TransportPaymentAnalyticsStaffListExportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.consumerName = _data["consumerName"];
      this.roleName = _data["roleName"];
      this.academicYearName = _data["academicYearName"];
      this.transportTotalFee = _data["transportTotalFee"];
      this.transportDiscountedFee = _data["transportDiscountedFee"];
      this.transportEffectiveFee = _data["transportEffectiveFee"];
      this.transportCollectionTillDate = _data["transportCollectionTillDate"];
      this.transportReceivableFee = _data["transportReceivableFee"];
      this.transportCollectionInPercentage = _data["transportCollectionInPercentage"];
      this.contactNo = _data["contactNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TransportPaymentAnalyticsStaffListExportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["consumerName"] = this.consumerName;
    data["roleName"] = this.roleName;
    data["academicYearName"] = this.academicYearName;
    data["transportTotalFee"] = this.transportTotalFee;
    data["transportDiscountedFee"] = this.transportDiscountedFee;
    data["transportEffectiveFee"] = this.transportEffectiveFee;
    data["transportCollectionTillDate"] = this.transportCollectionTillDate;
    data["transportReceivableFee"] = this.transportReceivableFee;
    data["transportCollectionInPercentage"] = this.transportCollectionInPercentage;
    data["contactNo"] = this.contactNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TransportPaymentAnalyticsStaffListExportDto();
    result.init(json);
    return result;
  }
}
class DivisionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.divisionId = _data["divisionId"];
      this.divisionName = _data["divisionName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DivisionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["divisionId"] = this.divisionId;
    data["divisionName"] = this.divisionName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DivisionDto();
    result.init(json);
    return result;
  }
}
class DivisionUpdateleteRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.exits = _data["exits"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DivisionUpdateleteRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["exits"] = this.exits;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DivisionUpdateleteRespose();
    result.init(json);
    return result;
  }
}
class DivisionDeleteRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DivisionDeleteRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DivisionDeleteRespose();
    result.init(json);
    return result;
  }
}
class DashboardCountDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentCount = _data["studentCount"];
      this.teacherCount = _data["teacherCount"];
      this.cabDriverCount = _data["cabDriverCount"];
      this.staffCount = _data["staffCount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DashboardCountDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentCount"] = this.studentCount;
    data["teacherCount"] = this.teacherCount;
    data["cabDriverCount"] = this.cabDriverCount;
    data["staffCount"] = this.staffCount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DashboardCountDto();
    result.init(json);
    return result;
  }
}
class DashBoardStaffDetailsDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["dashBoardStaffDetails"])) {
        this.dashBoardStaffDetails = [];
        for (let item of _data["dashBoardStaffDetails"]) this.dashBoardStaffDetails.push(DashBoardStaffDetails.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DashBoardStaffDetailsDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.dashBoardStaffDetails)) {
      data["dashBoardStaffDetails"] = [];
      for (let item of this.dashBoardStaffDetails) data["dashBoardStaffDetails"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DashBoardStaffDetailsDto();
    result.init(json);
    return result;
  }
}
class DashBoardStaffDetails {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.staffName = _data["staffName"];
      this.role = _data["role"];
      this.mobileNumber = _data["mobileNumber"];
      this.address = _data["address"];
      this.email = _data["email"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DashBoardStaffDetails();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["staffName"] = this.staffName;
    data["role"] = this.role;
    data["mobileNumber"] = this.mobileNumber;
    data["address"] = this.address;
    data["email"] = this.email;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DashBoardStaffDetails();
    result.init(json);
    return result;
  }
}
class GirlsBoysCountDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["girlsBoysCount"])) {
        this.girlsBoysCount = [];
        for (let item of _data["girlsBoysCount"]) this.girlsBoysCount.push(GirlsBoysCount.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GirlsBoysCountDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.girlsBoysCount)) {
      data["girlsBoysCount"] = [];
      for (let item of this.girlsBoysCount) data["girlsBoysCount"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GirlsBoysCountDto();
    result.init(json);
    return result;
  }
}
class GirlsBoysCount {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      this.girlsCount = _data["girlsCount"];
      this.boysCount = _data["boysCount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new GirlsBoysCount();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["totalCount"] = this.totalCount;
    data["girlsCount"] = this.girlsCount;
    data["boysCount"] = this.boysCount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new GirlsBoysCount();
    result.init(json);
    return result;
  }
}
class AdminDashboardCountDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.addmissionCount = _data["addmissionCount"] ? AddmissionCount.fromJS(_data["addmissionCount"]) : undefined;
      this.attendancePercentage = _data["attendancePercentage"] ? AttendancePercentage.fromJS(_data["attendancePercentage"]) : undefined;
      this.girlsBoysCount = _data["girlsBoysCount"] ? GirlsBoysCount.fromJS(_data["girlsBoysCount"]) : undefined;
      this.feeCollectionPercentage = _data["feeCollectionPercentage"] ? FeeCollectionPercentage.fromJS(_data["feeCollectionPercentage"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AdminDashboardCountDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["addmissionCount"] = this.addmissionCount ? this.addmissionCount.toJSON() : undefined;
    data["attendancePercentage"] = this.attendancePercentage ? this.attendancePercentage.toJSON() : undefined;
    data["girlsBoysCount"] = this.girlsBoysCount ? this.girlsBoysCount.toJSON() : undefined;
    data["feeCollectionPercentage"] = this.feeCollectionPercentage ? this.feeCollectionPercentage.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AdminDashboardCountDto();
    result.init(json);
    return result;
  }
}
class AddmissionCount {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.todaysAddmissions = _data["todaysAddmissions"];
      this.monthlyAddmissions = _data["monthlyAddmissions"];
      this.tillDateAddmissions = _data["tillDateAddmissions"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AddmissionCount();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["todaysAddmissions"] = this.todaysAddmissions;
    data["monthlyAddmissions"] = this.monthlyAddmissions;
    data["tillDateAddmissions"] = this.tillDateAddmissions;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AddmissionCount();
    result.init(json);
    return result;
  }
}
class AttendancePercentage {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.todaysAttendance = _data["todaysAttendance"];
      this.monthlyAttendance = _data["monthlyAttendance"];
      this.tillDateAttendance = _data["tillDateAttendance"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AttendancePercentage();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["todaysAttendance"] = this.todaysAttendance;
    data["monthlyAttendance"] = this.monthlyAttendance;
    data["tillDateAttendance"] = this.tillDateAttendance;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AttendancePercentage();
    result.init(json);
    return result;
  }
}
class FeeCollectionPercentage {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.todaysCollection = _data["todaysCollection"];
      this.monthlyCollection = _data["monthlyCollection"];
      this.tillDateCollection = _data["tillDateCollection"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new FeeCollectionPercentage();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["todaysCollection"] = this.todaysCollection;
    data["monthlyCollection"] = this.monthlyCollection;
    data["tillDateCollection"] = this.tillDateCollection;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new FeeCollectionPercentage();
    result.init(json);
    return result;
  }
}
class IdealTeacherListResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["schoolTimeSlotList"])) {
        this.schoolTimeSlotList = [];
        for (let item of _data["schoolTimeSlotList"]) this.schoolTimeSlotList.push(IdealTeachersWithHrsAndMinsDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new IdealTeacherListResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.schoolTimeSlotList)) {
      data["schoolTimeSlotList"] = [];
      for (let item of this.schoolTimeSlotList) data["schoolTimeSlotList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new IdealTeacherListResponseDto();
    result.init(json);
    return result;
  }
}
class IdealTeachersWithHrsAndMinsDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.startingHour = _data["startingHour"];
      this.startingMinute = _data["startingMinute"];
      this.endingHour = _data["endingHour"];
      this.endingMinute = _data["endingMinute"];
      if (Array.isArray(_data["idealTeacherList"])) {
        this.idealTeacherList = [];
        for (let item of _data["idealTeacherList"]) this.idealTeacherList.push(IdealTeacher.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new IdealTeachersWithHrsAndMinsDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["startingHour"] = this.startingHour;
    data["startingMinute"] = this.startingMinute;
    data["endingHour"] = this.endingHour;
    data["endingMinute"] = this.endingMinute;
    if (Array.isArray(this.idealTeacherList)) {
      data["idealTeacherList"] = [];
      for (let item of this.idealTeacherList) data["idealTeacherList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new IdealTeachersWithHrsAndMinsDto();
    result.init(json);
    return result;
  }
}
class IdealTeacher {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.startingHour = _data["startingHour"];
      this.startingMinute = _data["startingMinute"];
      this.endingHour = _data["endingHour"];
      this.endingMinute = _data["endingMinute"];
      this.teacherId = _data["teacherId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.teacherName = _data["teacherName"];
      this.mobileNumber = _data["mobileNumber"];
      this.profileImageUrl = _data["profileImageUrl"];
      this.subjectNames = _data["subjectNames"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new IdealTeacher();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["startingHour"] = this.startingHour;
    data["startingMinute"] = this.startingMinute;
    data["endingHour"] = this.endingHour;
    data["endingMinute"] = this.endingMinute;
    data["teacherId"] = this.teacherId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["teacherName"] = this.teacherName;
    data["mobileNumber"] = this.mobileNumber;
    data["profileImageUrl"] = this.profileImageUrl;
    data["subjectNames"] = this.subjectNames;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new IdealTeacher();
    result.init(json);
    return result;
  }
}
class TeacherDashboardCountDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.girlsBoysCount = _data["girlsBoysCount"] ? GirlsBoysCount.fromJS(_data["girlsBoysCount"]) : undefined;
      this.attendancePercentage = _data["attendancePercentage"] ? AttendancePercentage.fromJS(_data["attendancePercentage"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherDashboardCountDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["girlsBoysCount"] = this.girlsBoysCount ? this.girlsBoysCount.toJSON() : undefined;
    data["attendancePercentage"] = this.attendancePercentage ? this.attendancePercentage.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherDashboardCountDto();
    result.init(json);
    return result;
  }
}
class ClerkDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.clerkId = _data["clerkId"];
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.fullName = _data["fullName"];
      this.gender = _data["gender"];
      this.contactNumber = _data["contactNumber"];
      this.mobileNumber = _data["mobileNumber"];
      this.emailId = _data["emailId"];
      this.addressLine1 = _data["addressLine1"];
      this.addressLine2 = _data["addressLine2"];
      this.talukaId = _data["talukaId"];
      this.districtId = _data["districtId"];
      this.stateId = _data["stateId"];
      this.talukaName = _data["talukaName"];
      this.districtName = _data["districtName"];
      this.stateName = _data["stateName"];
      this.countryName = _data["countryName"];
      this.adharNumber = _data["adharNumber"];
      this.countryId = _data["countryId"];
      this.zipCode = _data["zipCode"];
      this.address = _data["address"];
      this.education = _data["education"];
      this.bloodGroup = _data["bloodGroup"];
      this.profileImageURL = _data["profileImageURL"];
      this.userId = _data["userId"];
      this.ngbBirthDate = _data["ngbBirthDate"] ? SchoolNgbDateModel.fromJS(_data["ngbBirthDate"]) : undefined;
      this.birthDate = _data["birthDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["birthDate"].toString()) : undefined;
      this.profileBase64Image = _data["profileBase64Image"];
      this.profileImageContentType = _data["profileImageContentType"];
      this.isAppAccess = _data["isAppAccess"];
      this.appAccessMobileNo = _data["appAccessMobileNo"];
      this.appAccessOneTimePassword = _data["appAccessOneTimePassword"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClerkDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["clerkId"] = this.clerkId;
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["fullName"] = this.fullName;
    data["gender"] = this.gender;
    data["contactNumber"] = this.contactNumber;
    data["mobileNumber"] = this.mobileNumber;
    data["emailId"] = this.emailId;
    data["addressLine1"] = this.addressLine1;
    data["addressLine2"] = this.addressLine2;
    data["talukaId"] = this.talukaId;
    data["districtId"] = this.districtId;
    data["stateId"] = this.stateId;
    data["talukaName"] = this.talukaName;
    data["districtName"] = this.districtName;
    data["stateName"] = this.stateName;
    data["countryName"] = this.countryName;
    data["adharNumber"] = this.adharNumber;
    data["countryId"] = this.countryId;
    data["zipCode"] = this.zipCode;
    data["address"] = this.address;
    data["education"] = this.education;
    data["bloodGroup"] = this.bloodGroup;
    data["profileImageURL"] = this.profileImageURL;
    data["userId"] = this.userId;
    data["ngbBirthDate"] = this.ngbBirthDate ? this.ngbBirthDate.toJSON() : undefined;
    data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : undefined;
    data["profileBase64Image"] = this.profileBase64Image;
    data["profileImageContentType"] = this.profileImageContentType;
    data["isAppAccess"] = this.isAppAccess;
    data["appAccessMobileNo"] = this.appAccessMobileNo;
    data["appAccessOneTimePassword"] = this.appAccessOneTimePassword;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClerkDto();
    result.init(json);
    return result;
  }
}
class ClerkDeleteRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClerkDeleteRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClerkDeleteRespose();
    result.init(json);
    return result;
  }
}
class ClassTeacherResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["classTeacherList"])) {
        this.classTeacherList = [];
        for (let item of _data["classTeacherList"]) this.classTeacherList.push(ClassTeacherDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClassTeacherResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.classTeacherList)) {
      data["classTeacherList"] = [];
      for (let item of this.classTeacherList) data["classTeacherList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClassTeacherResponseDto();
    result.init(json);
    return result;
  }
}
class ClassTeacherDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.id = _data["id"];
      this.className = _data["className"];
      this.classTeacherName = _data["classTeacherName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClassTeacherDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["id"] = this.id;
    data["className"] = this.className;
    data["classTeacherName"] = this.classTeacherName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClassTeacherDto();
    result.init(json);
    return result;
  }
}
class ClassWiseStudentResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["classWiseStudentList"])) {
        this.classWiseStudentList = [];
        for (let item of _data["classWiseStudentList"]) this.classWiseStudentList.push(ClassWiseStudentDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClassWiseStudentResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.classWiseStudentList)) {
      data["classWiseStudentList"] = [];
      for (let item of this.classWiseStudentList) data["classWiseStudentList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClassWiseStudentResponseDto();
    result.init(json);
    return result;
  }
}
class ClassWiseStudentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.classTeacherId = _data["classTeacherId"];
      this.studentId = _data["studentId"];
      this.className = _data["className"];
      this.fullName = _data["fullName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClassWiseStudentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["classTeacherId"] = this.classTeacherId;
    data["studentId"] = this.studentId;
    data["className"] = this.className;
    data["fullName"] = this.fullName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClassWiseStudentDto();
    result.init(json);
    return result;
  }
}
class ClassTimeTableSelectResponseDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.classId = _data["classId"];
      this.className = _data["className"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      if (Array.isArray(_data["classTimeTable"])) {
        this.classTimeTable = [];
        for (let item of _data["classTimeTable"]) this.classTimeTable.push(ClassTimeTableDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClassTimeTableSelectResponseDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["classId"] = this.classId;
    data["className"] = this.className;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    if (Array.isArray(this.classTimeTable)) {
      data["classTimeTable"] = [];
      for (let item of this.classTimeTable) data["classTimeTable"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClassTimeTableSelectResponseDto();
    result.init(json);
    return result;
  }
}
class ClassTimeTableDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.classTimeTableId = _data["classTimeTableId"];
      this.classId = _data["classId"];
      this.className = _data["className"];
      this.classTimeTableName = _data["classTimeTableName"];
      this.userId = _data["userId"];
      this.academicYearId = _data["academicYearId"];
      this.isSkipTimeTableValidation = _data["isSkipTimeTableValidation"];
      if (Array.isArray(_data["lstClassTimeTableRow"])) {
        this.lstClassTimeTableRow = [];
        for (let item of _data["lstClassTimeTableRow"]) this.lstClassTimeTableRow.push(ClassTimeTableRowDetailDto.fromJS(item));
      }
      this.isActive = _data["isActive"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClassTimeTableDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["classTimeTableId"] = this.classTimeTableId;
    data["classId"] = this.classId;
    data["className"] = this.className;
    data["classTimeTableName"] = this.classTimeTableName;
    data["userId"] = this.userId;
    data["academicYearId"] = this.academicYearId;
    data["isSkipTimeTableValidation"] = this.isSkipTimeTableValidation;
    if (Array.isArray(this.lstClassTimeTableRow)) {
      data["lstClassTimeTableRow"] = [];
      for (let item of this.lstClassTimeTableRow) data["lstClassTimeTableRow"].push(item.toJSON());
    }
    data["isActive"] = this.isActive;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClassTimeTableDto();
    result.init(json);
    return result;
  }
}
class ClassTimeTableRowDetailDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.classTimeTableId = _data["classTimeTableId"];
      this.periodTypeId = _data["periodTypeId"];
      this.startingHour = _data["startingHour"];
      this.startingMinute = _data["startingMinute"];
      this.endingHour = _data["endingHour"];
      this.endingMinute = _data["endingMinute"];
      this.sequenceId = _data["sequenceId"];
      if (Array.isArray(_data["lstClassTimeTableColumn"])) {
        this.lstClassTimeTableColumn = [];
        for (let item of _data["lstClassTimeTableColumn"]) this.lstClassTimeTableColumn.push(ClassTimeTableColumnDetailDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClassTimeTableRowDetailDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["classTimeTableId"] = this.classTimeTableId;
    data["periodTypeId"] = this.periodTypeId;
    data["startingHour"] = this.startingHour;
    data["startingMinute"] = this.startingMinute;
    data["endingHour"] = this.endingHour;
    data["endingMinute"] = this.endingMinute;
    data["sequenceId"] = this.sequenceId;
    if (Array.isArray(this.lstClassTimeTableColumn)) {
      data["lstClassTimeTableColumn"] = [];
      for (let item of this.lstClassTimeTableColumn) data["lstClassTimeTableColumn"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClassTimeTableRowDetailDto();
    result.init(json);
    return result;
  }
}
class ClassTimeTableColumnDetailDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.classTimeTableId = _data["classTimeTableId"];
      this.day = _data["day"];
      this.dayName = _data["dayName"];
      this.subjectId = _data["subjectId"];
      this.subjectName = _data["subjectName"];
      this.teacherName = _data["teacherName"];
      this.teacherId = _data["teacherId"];
      this.sequenceId = _data["sequenceId"];
      this.className = _data["className"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClassTimeTableColumnDetailDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["classTimeTableId"] = this.classTimeTableId;
    data["day"] = this.day;
    data["dayName"] = this.dayName;
    data["subjectId"] = this.subjectId;
    data["subjectName"] = this.subjectName;
    data["teacherName"] = this.teacherName;
    data["teacherId"] = this.teacherId;
    data["sequenceId"] = this.sequenceId;
    data["className"] = this.className;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClassTimeTableColumnDetailDto();
    result.init(json);
    return result;
  }
}
class CreateTimeTableResponse {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.isSuccess = _data["isSuccess"];
      if (Array.isArray(_data["lstOverlapPeriod"])) {
        this.lstOverlapPeriod = [];
        for (let item of _data["lstOverlapPeriod"]) this.lstOverlapPeriod.push(TeacherOverlapComparisonErrorDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CreateTimeTableResponse();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["isSuccess"] = this.isSuccess;
    if (Array.isArray(this.lstOverlapPeriod)) {
      data["lstOverlapPeriod"] = [];
      for (let item of this.lstOverlapPeriod) data["lstOverlapPeriod"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CreateTimeTableResponse();
    result.init(json);
    return result;
  }
}
class TeacherOverlapComparisonErrorDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.teacherId = _data["teacherId"];
      this.teacherName = _data["teacherName"];
      this.day = _data["day"];
      this.dayName = _data["dayName"];
      this.subjectIdToSave = _data["subjectIdToSave"];
      this.subjectNameToSave = _data["subjectNameToSave"];
      this.existingSubjectId = _data["existingSubjectId"];
      this.existingSubjectName = _data["existingSubjectName"];
      this.startingHour = _data["startingHour"];
      this.startingMinute = _data["startingMinute"];
      this.endingHour = _data["endingHour"];
      this.endingMinute = _data["endingMinute"];
      this.className = _data["className"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherOverlapComparisonErrorDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["teacherId"] = this.teacherId;
    data["teacherName"] = this.teacherName;
    data["day"] = this.day;
    data["dayName"] = this.dayName;
    data["subjectIdToSave"] = this.subjectIdToSave;
    data["subjectNameToSave"] = this.subjectNameToSave;
    data["existingSubjectId"] = this.existingSubjectId;
    data["existingSubjectName"] = this.existingSubjectName;
    data["startingHour"] = this.startingHour;
    data["startingMinute"] = this.startingMinute;
    data["endingHour"] = this.endingHour;
    data["endingMinute"] = this.endingMinute;
    data["className"] = this.className;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherOverlapComparisonErrorDto();
    result.init(json);
    return result;
  }
}
class TeacherClassTimeTableRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.teacherId = _data["teacherId"];
      if (Array.isArray(_data["classId"])) {
        this.classId = [];
        for (let item of _data["classId"]) this.classId.push(item);
      }
      this.academicYearId = _data["academicYearId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherClassTimeTableRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["teacherId"] = this.teacherId;
    if (Array.isArray(this.classId)) {
      data["classId"] = [];
      for (let item of this.classId) data["classId"].push(item);
    }
    data["academicYearId"] = this.academicYearId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new TeacherClassTimeTableRequestDto();
    result.init(json);
    return result;
  }
}
class StudentClassTimeTableRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.classId = _data["classId"];
      this.academicYearId = _data["academicYearId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentClassTimeTableRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["classId"] = this.classId;
    data["academicYearId"] = this.academicYearId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentClassTimeTableRequestDto();
    result.init(json);
    return result;
  }
}
class MarkTimeTableActiveRequestModel {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["lstActiveTimeTableId"])) {
        this.lstActiveTimeTableId = [];
        for (let item of _data["lstActiveTimeTableId"]) this.lstActiveTimeTableId.push(MarkTimeTableActiveSelectModel.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new MarkTimeTableActiveRequestModel();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.lstActiveTimeTableId)) {
      data["lstActiveTimeTableId"] = [];
      for (let item of this.lstActiveTimeTableId) data["lstActiveTimeTableId"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new MarkTimeTableActiveRequestModel();
    result.init(json);
    return result;
  }
}
class MarkTimeTableActiveSelectModel {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.classTimeTableId = _data["classTimeTableId"];
      this.isActive = _data["isActive"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new MarkTimeTableActiveSelectModel();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["classTimeTableId"] = this.classTimeTableId;
    data["isActive"] = this.isActive;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new MarkTimeTableActiveSelectModel();
    result.init(json);
    return result;
  }
}
class ClassTeacherDataDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["getGradeDivisionList"])) {
        this.getGradeDivisionList = [];
        for (let item of _data["getGradeDivisionList"]) this.getGradeDivisionList.push(ClassTeacherListDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClassTeacherDataDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.getGradeDivisionList)) {
      data["getGradeDivisionList"] = [];
      for (let item of this.getGradeDivisionList) data["getGradeDivisionList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClassTeacherDataDto();
    result.init(json);
    return result;
  }
}
class ClassTeacherListDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ClassTeacherListDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ClassTeacherListDto();
    result.init(json);
    return result;
  }
}
class CertificateDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.bonafiedDetails = _data["bonafiedDetails"] ? BonafiedDto.fromJS(_data["bonafiedDetails"]) : undefined;
      this.leavingCertificateDetails = _data["leavingCertificateDetails"] ? LeavingCertificateDto.fromJS(_data["leavingCertificateDetails"]) : undefined;
      this.characterCertificateDetails = _data["characterCertificateDetails"] ? CharacterCertificateDto.fromJS(_data["characterCertificateDetails"]) : undefined;
      this.idCardDetails = _data["idCardDetails"] ? IdCardDto.fromJS(_data["idCardDetails"]) : undefined;
      this.certificateAuditDetails = _data["certificateAuditDetails"] ? CertificateAuditDto.fromJS(_data["certificateAuditDetails"]) : undefined;
      this.certificateIdModelResponse = _data["certificateIdModelResponse"] ? CertificateIdModelResponse.fromJS(_data["certificateIdModelResponse"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CertificateDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["bonafiedDetails"] = this.bonafiedDetails ? this.bonafiedDetails.toJSON() : undefined;
    data["leavingCertificateDetails"] = this.leavingCertificateDetails ? this.leavingCertificateDetails.toJSON() : undefined;
    data["characterCertificateDetails"] = this.characterCertificateDetails ? this.characterCertificateDetails.toJSON() : undefined;
    data["idCardDetails"] = this.idCardDetails ? this.idCardDetails.toJSON() : undefined;
    data["certificateAuditDetails"] = this.certificateAuditDetails ? this.certificateAuditDetails.toJSON() : undefined;
    data["certificateIdModelResponse"] = this.certificateIdModelResponse ? this.certificateIdModelResponse.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CertificateDto();
    result.init(json);
    return result;
  }
}
class BonafiedDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolName = _data["schoolName"];
      this.schoolContactNo1 = _data["schoolContactNo1"];
      this.schoolEmail = _data["schoolEmail"];
      this.affiliationNumber = _data["affiliationNumber"];
      this.schoolPermission = _data["schoolPermission"];
      this.registrationNumber = _data["registrationNumber"];
      this.section = _data["section"];
      this.schoolType = _data["schoolType"];
      this.logoUrl = _data["logoUrl"];
      this.schoolLogoUrl = _data["schoolLogoUrl"];
      this.studentLogoUrl = _data["studentLogoUrl"];
      this.schoolMediumId = _data["schoolMediumId"];
      this.name = _data["name"];
      this.divisionName = _data["divisionName"];
      this.gradeName = _data["gradeName"];
      this.category = _data["category"];
      this.cast = _data["cast"];
      this.subCast = _data["subCast"];
      this.gender = _data["gender"];
      this.birthDate = _data["birthDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["birthDate"].toString()) : undefined;
      this.ngbBirthDate = _data["ngbBirthDate"] ? SchoolNgbDateModel.fromJS(_data["ngbBirthDate"]) : undefined;
      this.birthTalukaName = _data["birthTalukaName"];
      this.birthPlace = _data["birthPlace"];
      this.birthDistrictName = _data["birthDistrictName"];
      this.birthStateName = _data["birthStateName"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.schoolProfileImage = _data["schoolProfileImage"];
      this.schoolProfileImageContentType = _data["schoolProfileImageContentType"];
      this.profileImage = _data["profileImage"];
      this.profileImageUrl = _data["profileImageUrl"];
      this.profileImageContentType = _data["profileImageContentType"];
      this.academicYearKey = _data["academicYearKey"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new BonafiedDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolName"] = this.schoolName;
    data["schoolContactNo1"] = this.schoolContactNo1;
    data["schoolEmail"] = this.schoolEmail;
    data["affiliationNumber"] = this.affiliationNumber;
    data["schoolPermission"] = this.schoolPermission;
    data["registrationNumber"] = this.registrationNumber;
    data["section"] = this.section;
    data["schoolType"] = this.schoolType;
    data["logoUrl"] = this.logoUrl;
    data["schoolLogoUrl"] = this.schoolLogoUrl;
    data["studentLogoUrl"] = this.studentLogoUrl;
    data["schoolMediumId"] = this.schoolMediumId;
    data["name"] = this.name;
    data["divisionName"] = this.divisionName;
    data["gradeName"] = this.gradeName;
    data["category"] = this.category;
    data["cast"] = this.cast;
    data["subCast"] = this.subCast;
    data["gender"] = this.gender;
    data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : undefined;
    data["ngbBirthDate"] = this.ngbBirthDate ? this.ngbBirthDate.toJSON() : undefined;
    data["birthTalukaName"] = this.birthTalukaName;
    data["birthPlace"] = this.birthPlace;
    data["birthDistrictName"] = this.birthDistrictName;
    data["birthStateName"] = this.birthStateName;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["schoolProfileImage"] = this.schoolProfileImage;
    data["schoolProfileImageContentType"] = this.schoolProfileImageContentType;
    data["profileImage"] = this.profileImage;
    data["profileImageUrl"] = this.profileImageUrl;
    data["profileImageContentType"] = this.profileImageContentType;
    data["academicYearKey"] = this.academicYearKey;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new BonafiedDto();
    result.init(json);
    return result;
  }
}
class LeavingCertificateDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolName = _data["schoolName"];
      this.schoolContactNo1 = _data["schoolContactNo1"];
      this.schoolEmail = _data["schoolEmail"];
      this.affiliationNumber = _data["affiliationNumber"];
      this.schoolPermission = _data["schoolPermission"];
      this.registrationNumber = _data["registrationNumber"];
      this.cbscStudentId = _data["cbscStudentId"];
      this.udiseNumber = _data["udiseNumber"];
      this.section = _data["section"];
      this.logoUrl = _data["logoUrl"];
      this.schoolLogoUrl = _data["schoolLogoUrl"];
      this.studentLogoUrl = _data["studentLogoUrl"];
      this.authorisedBy = _data["authorisedBy"];
      this.logoImage = _data["logoImage"];
      this.logoImageContentType = _data["logoImageContentType"];
      this.board = _data["board"];
      this.cast = _data["cast"];
      this.subCast = _data["subCast"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.studentId = _data["studentId"];
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.adharNo = _data["adharNo"];
      this.hscOrSSCIndexNo = _data["hscOrSSCIndexNo"];
      this.schoolMediumTypeName = _data["schoolMediumTypeName"];
      this.motherName = _data["motherName"];
      this.nationality = _data["nationality"];
      this.religion = _data["religion"];
      this.birthDate = _data["birthDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["birthDate"].toString()) : undefined;
      this.ngbBirthDate = _data["ngbBirthDate"] ? SchoolNgbDateModel.fromJS(_data["ngbBirthDate"]) : undefined;
      this.birthTalukaName = _data["birthTalukaName"];
      this.birthPlace = _data["birthPlace"];
      this.birthDistrictName = _data["birthDistrictName"];
      this.birthStateName = _data["birthStateName"];
      this.birthDateInWords = _data["birthDateInWords"];
      this.birthCountryName = _data["birthCountryName"];
      this.lastSchoolAttended = _data["lastSchoolAttended"];
      this.lastSchoolStandard = _data["lastSchoolStandard"];
      this.dateOfAdmission = _data["dateOfAdmission"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["dateOfAdmission"].toString()) : undefined;
      this.ngbDateOfAdmission = _data["ngbDateOfAdmission"] ? SchoolNgbDateModel.fromJS(_data["ngbDateOfAdmission"]) : undefined;
      this.gradeName = _data["gradeName"];
      this.gradeNameAdmission = _data["gradeNameAdmission"];
      this.reasonOfLeavingLastSchool = _data["reasonOfLeavingLastSchool"];
      this.motherTounge = _data["motherTounge"];
      this.dateOfLeavingLastSchool = _data["dateOfLeavingLastSchool"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["dateOfLeavingLastSchool"].toString()) : undefined;
      this.ngbDateOfLeavingLastSchool = _data["ngbDateOfLeavingLastSchool"] ? SchoolNgbDateModel.fromJS(_data["ngbDateOfLeavingLastSchool"]) : undefined;
      this.serialNumber = _data["serialNumber"];
      this.ngbDateOfLeavingSchoolCurrent = _data["ngbDateOfLeavingSchoolCurrent"] ? SchoolNgbDateModel.fromJS(_data["ngbDateOfLeavingSchoolCurrent"]) : undefined;
      this.dateOfLeavingSchoolCurrent = _data["dateOfLeavingSchoolCurrent"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["dateOfLeavingSchoolCurrent"].toString()) : undefined;
      this.ngbDateSignCurrent = _data["ngbDateSignCurrent"] ? SchoolNgbDateModel.fromJS(_data["ngbDateSignCurrent"]) : undefined;
      this.dateSignCurrent = _data["dateSignCurrent"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["dateSignCurrent"].toString()) : undefined;
      this.conductCurrent = _data["conductCurrent"];
      this.progressCurrent = _data["progressCurrent"];
      this.standardInWhichStudyingCurrent = _data["standardInWhichStudyingCurrent"];
      this.reasonOfLeavingSchoolCurrent = _data["reasonOfLeavingSchoolCurrent"];
      this.remarkCurrent = _data["remarkCurrent"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.statusId = _data["statusId"];
      this.leavingCertificateAuditsId = _data["leavingCertificateAuditsId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new LeavingCertificateDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolName"] = this.schoolName;
    data["schoolContactNo1"] = this.schoolContactNo1;
    data["schoolEmail"] = this.schoolEmail;
    data["affiliationNumber"] = this.affiliationNumber;
    data["schoolPermission"] = this.schoolPermission;
    data["registrationNumber"] = this.registrationNumber;
    data["cbscStudentId"] = this.cbscStudentId;
    data["udiseNumber"] = this.udiseNumber;
    data["section"] = this.section;
    data["logoUrl"] = this.logoUrl;
    data["schoolLogoUrl"] = this.schoolLogoUrl;
    data["studentLogoUrl"] = this.studentLogoUrl;
    data["authorisedBy"] = this.authorisedBy;
    data["logoImage"] = this.logoImage;
    data["logoImageContentType"] = this.logoImageContentType;
    data["board"] = this.board;
    data["cast"] = this.cast;
    data["subCast"] = this.subCast;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["studentId"] = this.studentId;
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["adharNo"] = this.adharNo;
    data["hscOrSSCIndexNo"] = this.hscOrSSCIndexNo;
    data["schoolMediumTypeName"] = this.schoolMediumTypeName;
    data["motherName"] = this.motherName;
    data["nationality"] = this.nationality;
    data["religion"] = this.religion;
    data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : undefined;
    data["ngbBirthDate"] = this.ngbBirthDate ? this.ngbBirthDate.toJSON() : undefined;
    data["birthTalukaName"] = this.birthTalukaName;
    data["birthPlace"] = this.birthPlace;
    data["birthDistrictName"] = this.birthDistrictName;
    data["birthStateName"] = this.birthStateName;
    data["birthDateInWords"] = this.birthDateInWords;
    data["birthCountryName"] = this.birthCountryName;
    data["lastSchoolAttended"] = this.lastSchoolAttended;
    data["lastSchoolStandard"] = this.lastSchoolStandard;
    data["dateOfAdmission"] = this.dateOfAdmission ? this.dateOfAdmission.toISOString() : undefined;
    data["ngbDateOfAdmission"] = this.ngbDateOfAdmission ? this.ngbDateOfAdmission.toJSON() : undefined;
    data["gradeName"] = this.gradeName;
    data["gradeNameAdmission"] = this.gradeNameAdmission;
    data["reasonOfLeavingLastSchool"] = this.reasonOfLeavingLastSchool;
    data["motherTounge"] = this.motherTounge;
    data["dateOfLeavingLastSchool"] = this.dateOfLeavingLastSchool ? this.dateOfLeavingLastSchool.toISOString() : undefined;
    data["ngbDateOfLeavingLastSchool"] = this.ngbDateOfLeavingLastSchool ? this.ngbDateOfLeavingLastSchool.toJSON() : undefined;
    data["serialNumber"] = this.serialNumber;
    data["ngbDateOfLeavingSchoolCurrent"] = this.ngbDateOfLeavingSchoolCurrent ? this.ngbDateOfLeavingSchoolCurrent.toJSON() : undefined;
    data["dateOfLeavingSchoolCurrent"] = this.dateOfLeavingSchoolCurrent ? this.dateOfLeavingSchoolCurrent.toISOString() : undefined;
    data["ngbDateSignCurrent"] = this.ngbDateSignCurrent ? this.ngbDateSignCurrent.toJSON() : undefined;
    data["dateSignCurrent"] = this.dateSignCurrent ? this.dateSignCurrent.toISOString() : undefined;
    data["conductCurrent"] = this.conductCurrent;
    data["progressCurrent"] = this.progressCurrent;
    data["standardInWhichStudyingCurrent"] = this.standardInWhichStudyingCurrent;
    data["reasonOfLeavingSchoolCurrent"] = this.reasonOfLeavingSchoolCurrent;
    data["remarkCurrent"] = this.remarkCurrent;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["statusId"] = this.statusId;
    data["leavingCertificateAuditsId"] = this.leavingCertificateAuditsId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new LeavingCertificateDto();
    result.init(json);
    return result;
  }
}
class CharacterCertificateDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.schoolName = _data["schoolName"];
      this.studentName = _data["studentName"];
      this.gender = _data["gender"];
      this.parentName = _data["parentName"];
      this.place = _data["place"];
      this.schoolLogoUrl = _data["schoolLogoUrl"];
      this.studentLogoUrl = _data["studentLogoUrl"];
      this.totalDayCount = _data["totalDayCount"];
      this.studentAddress = _data["studentAddress"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CharacterCertificateDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["schoolName"] = this.schoolName;
    data["studentName"] = this.studentName;
    data["gender"] = this.gender;
    data["parentName"] = this.parentName;
    data["place"] = this.place;
    data["schoolLogoUrl"] = this.schoolLogoUrl;
    data["studentLogoUrl"] = this.studentLogoUrl;
    data["totalDayCount"] = this.totalDayCount;
    data["studentAddress"] = this.studentAddress;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CharacterCertificateDto();
    result.init(json);
    return result;
  }
}
class IdCardDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolName = _data["schoolName"];
      this.academicYearName = _data["academicYearName"];
      this.name = _data["name"];
      this.birthDate = _data["birthDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["birthDate"].toString()) : undefined;
      this.ngbBirthDate = _data["ngbBirthDate"] ? SchoolNgbDateModel.fromJS(_data["ngbBirthDate"]) : undefined;
      this.bloodGroup = _data["bloodGroup"];
      this.address = _data["address"];
      this.divisionName = _data["divisionName"];
      this.gradeName = _data["gradeName"];
      this.emergencyContactNumber = _data["emergencyContactNumber"];
      this.profileImageUrl = _data["profileImageUrl"];
      this.logoUrl = _data["logoUrl"];
      this.schoolLogoUrl = _data["schoolLogoUrl"];
      this.studentLogoUrl = _data["studentLogoUrl"];
      this.profileImage = _data["profileImage"];
      this.logoImage = _data["logoImage"];
      this.profileImageContentType = _data["profileImageContentType"];
      this.logoImageContentType = _data["logoImageContentType"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new IdCardDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolName"] = this.schoolName;
    data["academicYearName"] = this.academicYearName;
    data["name"] = this.name;
    data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : undefined;
    data["ngbBirthDate"] = this.ngbBirthDate ? this.ngbBirthDate.toJSON() : undefined;
    data["bloodGroup"] = this.bloodGroup;
    data["address"] = this.address;
    data["divisionName"] = this.divisionName;
    data["gradeName"] = this.gradeName;
    data["emergencyContactNumber"] = this.emergencyContactNumber;
    data["profileImageUrl"] = this.profileImageUrl;
    data["logoUrl"] = this.logoUrl;
    data["schoolLogoUrl"] = this.schoolLogoUrl;
    data["studentLogoUrl"] = this.studentLogoUrl;
    data["profileImage"] = this.profileImage;
    data["logoImage"] = this.logoImage;
    data["profileImageContentType"] = this.profileImageContentType;
    data["logoImageContentType"] = this.logoImageContentType;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new IdCardDto();
    result.init(json);
    return result;
  }
}
class CertificateAuditDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.certificateAuditsId = _data["certificateAuditsId"];
      this.certificateTemplateId = _data["certificateTemplateId"];
      this.studentId = _data["studentId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.academicYearId = _data["academicYearId"];
      this.isPublished = _data["isPublished"];
      this.remark = _data["remark"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CertificateAuditDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["certificateAuditsId"] = this.certificateAuditsId;
    data["certificateTemplateId"] = this.certificateTemplateId;
    data["studentId"] = this.studentId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["academicYearId"] = this.academicYearId;
    data["isPublished"] = this.isPublished;
    data["remark"] = this.remark;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CertificateAuditDto();
    result.init(json);
    return result;
  }
}
class CertificateIdModelResponse {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.certificateAuditsId = _data["certificateAuditsId"];
      this.studentId = _data["studentId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CertificateIdModelResponse();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["certificateAuditsId"] = this.certificateAuditsId;
    data["studentId"] = this.studentId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CertificateIdModelResponse();
    result.init(json);
    return result;
  }
}
class StudentNameModelResponse {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["studentNames"])) {
        this.studentNames = [];
        for (let item of _data["studentNames"]) this.studentNames.push(StudentNameDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentNameModelResponse();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.studentNames)) {
      data["studentNames"] = [];
      for (let item of this.studentNames) data["studentNames"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentNameModelResponse();
    result.init(json);
    return result;
  }
}
class StudentNameDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.academicYearId = _data["academicYearId"];
      this.fullName = _data["fullName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentNameDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["academicYearId"] = this.academicYearId;
    data["fullName"] = this.fullName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentNameDto();
    result.init(json);
    return result;
  }
}
class LeavingCertificateHistory {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["leavingCertificateList"])) {
        this.leavingCertificateList = [];
        for (let item of _data["leavingCertificateList"]) this.leavingCertificateList.push(LeavingCertificateGridDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new LeavingCertificateHistory();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.leavingCertificateList)) {
      data["leavingCertificateList"] = [];
      for (let item of this.leavingCertificateList) data["leavingCertificateList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new LeavingCertificateHistory();
    result.init(json);
    return result;
  }
}
class LeavingCertificateGridDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.leavingCertificateAuditsId = _data["leavingCertificateAuditsId"];
      this.statusId = _data["statusId"];
      this.serialNumber = _data["serialNumber"];
      this.studentName = _data["studentName"];
      this.createdDate = _data["createdDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["createdDate"].toString()) : undefined;
      this.generalRegistrationNo = _data["generalRegistrationNo"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new LeavingCertificateGridDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["leavingCertificateAuditsId"] = this.leavingCertificateAuditsId;
    data["statusId"] = this.statusId;
    data["serialNumber"] = this.serialNumber;
    data["studentName"] = this.studentName;
    data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new LeavingCertificateGridDto();
    result.init(json);
    return result;
  }
}
class CabDriverDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.cabDriverId = _data["cabDriverId"];
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.fullName = _data["fullName"];
      this.address = _data["address"];
      this.gender = _data["gender"];
      this.contactNumber = _data["contactNumber"];
      this.mobileNumber = _data["mobileNumber"];
      this.emailId = _data["emailId"];
      this.addressLine1 = _data["addressLine1"];
      this.addressLine2 = _data["addressLine2"];
      this.talukaId = _data["talukaId"];
      this.districtId = _data["districtId"];
      this.stateId = _data["stateId"];
      this.talukaName = _data["talukaName"];
      this.districtName = _data["districtName"];
      this.stateName = _data["stateName"];
      this.countryName = _data["countryName"];
      this.adharNumber = _data["adharNumber"];
      this.countryId = _data["countryId"];
      this.zipCode = _data["zipCode"];
      this.drivingLicenceNumber = _data["drivingLicenceNumber"];
      this.education = _data["education"];
      this.bloodGroup = _data["bloodGroup"];
      this.profileImageURL = _data["profileImageURL"];
      this.userId = _data["userId"];
      this.ngbValidTill = _data["ngbValidTill"] ? SchoolNgbDateModel.fromJS(_data["ngbValidTill"]) : undefined;
      this.validTill = _data["validTill"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["validTill"].toString()) : undefined;
      this.ngbBirthDate = _data["ngbBirthDate"] ? SchoolNgbDateModel.fromJS(_data["ngbBirthDate"]) : undefined;
      this.birthDate = _data["birthDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["birthDate"].toString()) : undefined;
      this.profileBase64Image = _data["profileBase64Image"];
      this.profileImageContentType = _data["profileImageContentType"];
      this.isAppAccess = _data["isAppAccess"];
      this.appAccessMobileNo = _data["appAccessMobileNo"];
      this.appAccessOneTimePassword = _data["appAccessOneTimePassword"];
      this.schoolId = _data["schoolId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabDriverDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["cabDriverId"] = this.cabDriverId;
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["fullName"] = this.fullName;
    data["address"] = this.address;
    data["gender"] = this.gender;
    data["contactNumber"] = this.contactNumber;
    data["mobileNumber"] = this.mobileNumber;
    data["emailId"] = this.emailId;
    data["addressLine1"] = this.addressLine1;
    data["addressLine2"] = this.addressLine2;
    data["talukaId"] = this.talukaId;
    data["districtId"] = this.districtId;
    data["stateId"] = this.stateId;
    data["talukaName"] = this.talukaName;
    data["districtName"] = this.districtName;
    data["stateName"] = this.stateName;
    data["countryName"] = this.countryName;
    data["adharNumber"] = this.adharNumber;
    data["countryId"] = this.countryId;
    data["zipCode"] = this.zipCode;
    data["drivingLicenceNumber"] = this.drivingLicenceNumber;
    data["education"] = this.education;
    data["bloodGroup"] = this.bloodGroup;
    data["profileImageURL"] = this.profileImageURL;
    data["userId"] = this.userId;
    data["ngbValidTill"] = this.ngbValidTill ? this.ngbValidTill.toJSON() : undefined;
    data["validTill"] = this.validTill ? this.validTill.toISOString() : undefined;
    data["ngbBirthDate"] = this.ngbBirthDate ? this.ngbBirthDate.toJSON() : undefined;
    data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : undefined;
    data["profileBase64Image"] = this.profileBase64Image;
    data["profileImageContentType"] = this.profileImageContentType;
    data["isAppAccess"] = this.isAppAccess;
    data["appAccessMobileNo"] = this.appAccessMobileNo;
    data["appAccessOneTimePassword"] = this.appAccessOneTimePassword;
    data["schoolId"] = this.schoolId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabDriverDto();
    result.init(json);
    return result;
  }
}
class CabDriverDeleteRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabDriverDeleteRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabDriverDeleteRespose();
    result.init(json);
    return result;
  }
}
class CabDriverProfileAppDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.cabDriverId = _data["cabDriverId"];
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.mobileNumber = _data["mobileNumber"];
      this.cabDriverFullName = _data["cabDriverFullName"];
      this.emailId = _data["emailId"];
      this.addressLine1 = _data["addressLine1"];
      this.addressLine2 = _data["addressLine2"];
      this.talukaId = _data["talukaId"];
      this.districtId = _data["districtId"];
      this.stateId = _data["stateId"];
      this.talukaName = _data["talukaName"];
      this.districtName = _data["districtName"];
      this.stateName = _data["stateName"];
      this.countryName = _data["countryName"];
      this.countryId = _data["countryId"];
      this.zipCode = _data["zipCode"];
      this.education = _data["education"];
      this.bloodGroup = _data["bloodGroup"];
      this.userId = _data["userId"];
      this.profileImageURL = _data["profileImageURL"];
      this.ngbBirthDate = _data["ngbBirthDate"] ? SchoolNgbDateModel.fromJS(_data["ngbBirthDate"]) : undefined;
      this.birthDate = _data["birthDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["birthDate"].toString()) : undefined;
      this.profileBase64Image = _data["profileBase64Image"];
      this.profileImageContentType = _data["profileImageContentType"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabDriverProfileAppDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["cabDriverId"] = this.cabDriverId;
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["mobileNumber"] = this.mobileNumber;
    data["cabDriverFullName"] = this.cabDriverFullName;
    data["emailId"] = this.emailId;
    data["addressLine1"] = this.addressLine1;
    data["addressLine2"] = this.addressLine2;
    data["talukaId"] = this.talukaId;
    data["districtId"] = this.districtId;
    data["stateId"] = this.stateId;
    data["talukaName"] = this.talukaName;
    data["districtName"] = this.districtName;
    data["stateName"] = this.stateName;
    data["countryName"] = this.countryName;
    data["countryId"] = this.countryId;
    data["zipCode"] = this.zipCode;
    data["education"] = this.education;
    data["bloodGroup"] = this.bloodGroup;
    data["userId"] = this.userId;
    data["profileImageURL"] = this.profileImageURL;
    data["ngbBirthDate"] = this.ngbBirthDate ? this.ngbBirthDate.toJSON() : undefined;
    data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : undefined;
    data["profileBase64Image"] = this.profileBase64Image;
    data["profileImageContentType"] = this.profileImageContentType;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabDriverProfileAppDto();
    result.init(json);
    return result;
  }
}
class CabDriverRouteListDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["cabDriverRouteList"])) {
        this.cabDriverRouteList = [];
        for (let item of _data["cabDriverRouteList"]) this.cabDriverRouteList.push(CabDriverAppRouteDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabDriverRouteListDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.cabDriverRouteList)) {
      data["cabDriverRouteList"] = [];
      for (let item of this.cabDriverRouteList) data["cabDriverRouteList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabDriverRouteListDto();
    result.init(json);
    return result;
  }
}
class CabDriverAppRouteDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.routeId = _data["routeId"];
      this.routeName = _data["routeName"];
      this.cabDriverId = _data["cabDriverId"];
      this.schoolCode = _data["schoolCode"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabDriverAppRouteDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["routeId"] = this.routeId;
    data["routeName"] = this.routeName;
    data["cabDriverId"] = this.cabDriverId;
    data["schoolCode"] = this.schoolCode;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabDriverAppRouteDto();
    result.init(json);
    return result;
  }
}
class CabdriverAppStoppageStudentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.tripId = _data["tripId"];
      if (Array.isArray(_data["cabDriverStoppageList"])) {
        this.cabDriverStoppageList = [];
        for (let item of _data["cabDriverStoppageList"]) this.cabDriverStoppageList.push(CabdriverAppStoppageDto.fromJS(item));
      }
      if (Array.isArray(_data["cabDriverStudentList"])) {
        this.cabDriverStudentList = [];
        for (let item of _data["cabDriverStudentList"]) this.cabDriverStudentList.push(CabdriverAppStudentDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabdriverAppStoppageStudentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["tripId"] = this.tripId;
    if (Array.isArray(this.cabDriverStoppageList)) {
      data["cabDriverStoppageList"] = [];
      for (let item of this.cabDriverStoppageList) data["cabDriverStoppageList"].push(item.toJSON());
    }
    if (Array.isArray(this.cabDriverStudentList)) {
      data["cabDriverStudentList"] = [];
      for (let item of this.cabDriverStudentList) data["cabDriverStudentList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabdriverAppStoppageStudentDto();
    result.init(json);
    return result;
  }
}
class CabdriverAppStoppageDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.tripId = _data["tripId"];
      this.routeId = _data["routeId"];
      this.stoppageName = _data["stoppageName"];
      this.stoppageId = _data["stoppageId"];
      this.orderNo = _data["orderNo"];
      this.totalStudent = _data["totalStudent"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabdriverAppStoppageDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["tripId"] = this.tripId;
    data["routeId"] = this.routeId;
    data["stoppageName"] = this.stoppageName;
    data["stoppageId"] = this.stoppageId;
    data["orderNo"] = this.orderNo;
    data["totalStudent"] = this.totalStudent;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabdriverAppStoppageDto();
    result.init(json);
    return result;
  }
}
class CabdriverAppStudentDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.routeId = _data["routeId"];
      this.studentName = _data["studentName"];
      this.className = _data["className"];
      this.emergencyContactNumber = _data["emergencyContactNumber"];
      this.gender = _data["gender"];
      this.contactNumber = _data["contactNumber"];
      this.stoppageName = _data["stoppageName"];
      this.profileImageURL = _data["profileImageURL"];
      this.stoppageId = _data["stoppageId"];
      this.consumerId = _data["consumerId"];
      this.roleId = _data["roleId"];
      this.studentId = _data["studentId"];
      this.isAlreadyPickedDropped = _data["isAlreadyPickedDropped"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabdriverAppStudentDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["routeId"] = this.routeId;
    data["studentName"] = this.studentName;
    data["className"] = this.className;
    data["emergencyContactNumber"] = this.emergencyContactNumber;
    data["gender"] = this.gender;
    data["contactNumber"] = this.contactNumber;
    data["stoppageName"] = this.stoppageName;
    data["profileImageURL"] = this.profileImageURL;
    data["stoppageId"] = this.stoppageId;
    data["consumerId"] = this.consumerId;
    data["roleId"] = this.roleId;
    data["studentId"] = this.studentId;
    data["isAlreadyPickedDropped"] = this.isAlreadyPickedDropped;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabdriverAppStudentDto();
    result.init(json);
    return result;
  }
}
class CabDriverTripDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.routeId = _data["routeId"];
      this.tripId = _data["tripId"];
      this.tripType = _data["tripType"];
      this.isTripEnd = _data["isTripEnd"];
      this.studentId = _data["studentId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabDriverTripDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["routeId"] = this.routeId;
    data["tripId"] = this.tripId;
    data["tripType"] = this.tripType;
    data["isTripEnd"] = this.isTripEnd;
    data["studentId"] = this.studentId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabDriverTripDto();
    result.init(json);
    return result;
  }
}
class CabDriverAppTripDetailsDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.tripDetailId = _data["tripDetailId"];
      this.tripId = _data["tripId"];
      this.studentId = _data["studentId"];
      this.pickUpDateTime = _data["pickUpDateTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["pickUpDateTime"].toString()) : undefined;
      this.dropOffDateTime = _data["dropOffDateTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["dropOffDateTime"].toString()) : undefined;
      this.tripType = _data["tripType"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabDriverAppTripDetailsDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["tripDetailId"] = this.tripDetailId;
    data["tripId"] = this.tripId;
    data["studentId"] = this.studentId;
    data["pickUpDateTime"] = this.pickUpDateTime ? this.pickUpDateTime.toISOString() : undefined;
    data["dropOffDateTime"] = this.dropOffDateTime ? this.dropOffDateTime.toISOString() : undefined;
    data["tripType"] = this.tripType;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabDriverAppTripDetailsDto();
    result.init(json);
    return result;
  }
}
class StudentInformationDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.studentName = _data["studentName"];
      this.gender = _data["gender"];
      this.className = _data["className"];
      this.emergencyContactNumber = _data["emergencyContactNumber"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StudentInformationDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["studentName"] = this.studentName;
    data["gender"] = this.gender;
    data["className"] = this.className;
    data["emergencyContactNumber"] = this.emergencyContactNumber;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new StudentInformationDto();
    result.init(json);
    return result;
  }
}
class CabDriverLocationDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.tripId = _data["tripId"];
      this.lat = _data["lat"];
      this.long = _data["long"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabDriverLocationDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["tripId"] = this.tripId;
    data["lat"] = this.lat;
    data["long"] = this.long;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabDriverLocationDto();
    result.init(json);
    return result;
  }
}
class CabDriverTripNotificationResponceDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["notificationStudentList"])) {
        this.notificationStudentList = [];
        for (let item of _data["notificationStudentList"]) this.notificationStudentList.push(CabDriverTripNotificationDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabDriverTripNotificationResponceDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.notificationStudentList)) {
      data["notificationStudentList"] = [];
      for (let item of this.notificationStudentList) data["notificationStudentList"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabDriverTripNotificationResponceDto();
    result.init(json);
    return result;
  }
}
class CabDriverTripNotificationDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentId = _data["studentId"];
      this.studentName = _data["studentName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabDriverTripNotificationDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentId"] = this.studentId;
    data["studentName"] = this.studentName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabDriverTripNotificationDto();
    result.init(json);
    return result;
  }
}
class CabDriverActiveTripDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.tripId = _data["tripId"];
      this.tripType = _data["tripType"];
      this.tripStatus = _data["tripStatus"];
      this.routeId = _data["routeId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabDriverActiveTripDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["tripId"] = this.tripId;
    data["tripType"] = this.tripType;
    data["tripStatus"] = this.tripStatus;
    data["routeId"] = this.routeId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabDriverActiveTripDto();
    result.init(json);
    return result;
  }
}
class CabDriverActiveTripRequestDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.userId = _data["userId"];
      this.routeId = _data["routeId"];
      this.tripType = _data["tripType"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CabDriverActiveTripRequestDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["userId"] = this.userId;
    data["routeId"] = this.routeId;
    data["tripType"] = this.tripType;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CabDriverActiveTripRequestDto();
    result.init(json);
    return result;
  }
}
class AdminDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.adminId = _data["adminId"];
      this.firstName = _data["firstName"];
      this.middleName = _data["middleName"];
      this.lastName = _data["lastName"];
      this.fullName = _data["fullName"];
      this.address = _data["address"];
      this.gender = _data["gender"];
      this.contactNumber = _data["contactNumber"];
      this.mobileNumber = _data["mobileNumber"];
      this.emailId = _data["emailId"];
      this.addressLine1 = _data["addressLine1"];
      this.addressLine2 = _data["addressLine2"];
      this.talukaId = _data["talukaId"];
      this.districtId = _data["districtId"];
      this.stateId = _data["stateId"];
      this.talukaName = _data["talukaName"];
      this.districtName = _data["districtName"];
      this.stateName = _data["stateName"];
      this.countryName = _data["countryName"];
      this.adharNumber = _data["adharNumber"];
      this.countryId = _data["countryId"];
      this.zipCode = _data["zipCode"];
      this.education = _data["education"];
      this.bloodGroup = _data["bloodGroup"];
      this.profileImageURL = _data["profileImageURL"];
      this.userId = _data["userId"];
      this.ngbBirthDate = _data["ngbBirthDate"] ? SchoolNgbDateModel.fromJS(_data["ngbBirthDate"]) : undefined;
      this.birthDate = _data["birthDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["birthDate"].toString()) : undefined;
      this.profileBase64Image = _data["profileBase64Image"];
      this.profileImageContentType = _data["profileImageContentType"];
      this.isAppAccess = _data["isAppAccess"];
      this.appAccessMobileNo = _data["appAccessMobileNo"];
      this.appAccessOneTimePassword = _data["appAccessOneTimePassword"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AdminDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["adminId"] = this.adminId;
    data["firstName"] = this.firstName;
    data["middleName"] = this.middleName;
    data["lastName"] = this.lastName;
    data["fullName"] = this.fullName;
    data["address"] = this.address;
    data["gender"] = this.gender;
    data["contactNumber"] = this.contactNumber;
    data["mobileNumber"] = this.mobileNumber;
    data["emailId"] = this.emailId;
    data["addressLine1"] = this.addressLine1;
    data["addressLine2"] = this.addressLine2;
    data["talukaId"] = this.talukaId;
    data["districtId"] = this.districtId;
    data["stateId"] = this.stateId;
    data["talukaName"] = this.talukaName;
    data["districtName"] = this.districtName;
    data["stateName"] = this.stateName;
    data["countryName"] = this.countryName;
    data["adharNumber"] = this.adharNumber;
    data["countryId"] = this.countryId;
    data["zipCode"] = this.zipCode;
    data["education"] = this.education;
    data["bloodGroup"] = this.bloodGroup;
    data["profileImageURL"] = this.profileImageURL;
    data["userId"] = this.userId;
    data["ngbBirthDate"] = this.ngbBirthDate ? this.ngbBirthDate.toJSON() : undefined;
    data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : undefined;
    data["profileBase64Image"] = this.profileBase64Image;
    data["profileImageContentType"] = this.profileImageContentType;
    data["isAppAccess"] = this.isAppAccess;
    data["appAccessMobileNo"] = this.appAccessMobileNo;
    data["appAccessOneTimePassword"] = this.appAccessOneTimePassword;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AdminDto();
    result.init(json);
    return result;
  }
}
class AdminDeleteRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.affectedRows = _data["affectedRows"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AdminDeleteRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["affectedRows"] = this.affectedRows;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AdminDeleteRespose();
    result.init(json);
    return result;
  }
}
class AdhocParticularMasterDtoInsertRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.exits = _data["exits"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AdhocParticularMasterDtoInsertRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["exits"] = this.exits;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AdhocParticularMasterDtoInsertRespose();
    result.init(json);
    return result;
  }
}
class AdhocParticularMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.adhocParticularMasterId = _data["adhocParticularMasterId"];
      this.particular = _data["particular"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AdhocParticularMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["adhocParticularMasterId"] = this.adhocParticularMasterId;
    data["particular"] = this.particular;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AdhocParticularMasterDto();
    result.init(json);
    return result;
  }
}
class AdhocParticularMasterDtoListRespose {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["particulars"])) {
        this.particulars = [];
        for (let item of _data["particulars"]) this.particulars.push(AdhocParticularMasterDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AdhocParticularMasterDtoListRespose();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.particulars)) {
      data["particulars"] = [];
      for (let item of this.particulars) data["particulars"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AdhocParticularMasterDtoListRespose();
    result.init(json);
    return result;
  }
}
class AdhocFeePaymentSelectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.fullName = _data["fullName"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.isNewStudent = _data["isNewStudent"];
      this.isRTEStudent = _data["isRTEStudent"];
      this.appAccessMobileNo = _data["appAccessMobileNo"];
      this.academicYearId = _data["academicYearId"];
      this.rollNumber = _data["rollNumber"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AdhocFeePaymentSelectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["fullName"] = this.fullName;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["isNewStudent"] = this.isNewStudent;
    data["isRTEStudent"] = this.isRTEStudent;
    data["appAccessMobileNo"] = this.appAccessMobileNo;
    data["academicYearId"] = this.academicYearId;
    data["rollNumber"] = this.rollNumber;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AdhocFeePaymentSelectDto();
    result.init(json);
    return result;
  }
}
class AdhocFeePaymentUpsertDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.academicYearId = _data["academicYearId"];
      this.gradeId = _data["gradeId"];
      this.divisionId = _data["divisionId"];
      this.studentId = _data["studentId"];
      this.onlineTransactionId = _data["onlineTransactionId"];
      this.onlineTransactionDateTime = _data["onlineTransactionDateTime"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["onlineTransactionDateTime"].toString()) : undefined;
      this.ngbOnlineTransactionDateTime = _data["ngbOnlineTransactionDateTime"] ? SchoolNgbDateModel.fromJS(_data["ngbOnlineTransactionDateTime"]) : undefined;
      this.onlinePaymentRequest = _data["onlinePaymentRequest"];
      this.onlinePaymentResponse = _data["onlinePaymentResponse"];
      this.paidToBank = _data["paidToBank"];
      this.totalFee = _data["totalFee"];
      this.particularId = _data["particularId"];
      this.paymentTypeId = _data["paymentTypeId"];
      this.chequeNumber = _data["chequeNumber"];
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.ngbChequeDate = _data["ngbChequeDate"] ? SchoolNgbDateModel.fromJS(_data["ngbChequeDate"]) : undefined;
      this.chequeBank = _data["chequeBank"];
      this.chequeAmount = _data["chequeAmount"];
      this.isChequeClear = _data["isChequeClear"];
      this.userId = _data["userId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AdhocFeePaymentUpsertDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["academicYearId"] = this.academicYearId;
    data["gradeId"] = this.gradeId;
    data["divisionId"] = this.divisionId;
    data["studentId"] = this.studentId;
    data["onlineTransactionId"] = this.onlineTransactionId;
    data["onlineTransactionDateTime"] = this.onlineTransactionDateTime ? this.onlineTransactionDateTime.toISOString() : undefined;
    data["ngbOnlineTransactionDateTime"] = this.ngbOnlineTransactionDateTime ? this.ngbOnlineTransactionDateTime.toJSON() : undefined;
    data["onlinePaymentRequest"] = this.onlinePaymentRequest;
    data["onlinePaymentResponse"] = this.onlinePaymentResponse;
    data["paidToBank"] = this.paidToBank;
    data["totalFee"] = this.totalFee;
    data["particularId"] = this.particularId;
    data["paymentTypeId"] = this.paymentTypeId;
    data["chequeNumber"] = this.chequeNumber;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["ngbChequeDate"] = this.ngbChequeDate ? this.ngbChequeDate.toJSON() : undefined;
    data["chequeBank"] = this.chequeBank;
    data["chequeAmount"] = this.chequeAmount;
    data["isChequeClear"] = this.isChequeClear;
    data["userId"] = this.userId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AdhocFeePaymentUpsertDto();
    result.init(json);
    return result;
  }
}
class AdhocFeePaymentHistorySelectDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.schoolName = _data["schoolName"];
      this.schoolAddress = _data["schoolAddress"];
      this.academicYearId = _data["academicYearId"];
      this.studentName = _data["studentName"];
      this.gradeName = _data["gradeName"];
      this.divisionName = _data["divisionName"];
      this.rollNumber = _data["rollNumber"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.paymentTypeName = _data["paymentTypeName"];
      this.paymentDate = _data["paymentDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["paymentDate"].toString()) : undefined;
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.chequeBank = _data["chequeBank"];
      this.transactionId = _data["transactionId"];
      this.invoiceNumber = _data["invoiceNumber"];
      this.totalFee = _data["totalFee"];
      this.particular = _data["particular"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AdhocFeePaymentHistorySelectDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["schoolName"] = this.schoolName;
    data["schoolAddress"] = this.schoolAddress;
    data["academicYearId"] = this.academicYearId;
    data["studentName"] = this.studentName;
    data["gradeName"] = this.gradeName;
    data["divisionName"] = this.divisionName;
    data["rollNumber"] = this.rollNumber;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["paymentTypeName"] = this.paymentTypeName;
    data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : undefined;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["chequeBank"] = this.chequeBank;
    data["transactionId"] = this.transactionId;
    data["invoiceNumber"] = this.invoiceNumber;
    data["totalFee"] = this.totalFee;
    data["particular"] = this.particular;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AdhocFeePaymentHistorySelectDto();
    result.init(json);
    return result;
  }
}
class AdhocFeePaymentDaywiseReportDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.cashDaywiseAdhocPaymentReport = _data["cashDaywiseAdhocPaymentReport"] ? CashDaywiseAdhocPaymentReport.fromJS(_data["cashDaywiseAdhocPaymentReport"]) : undefined;
      this.chequeDaywiseAdhocPaymentReport = _data["chequeDaywiseAdhocPaymentReport"] ? ChequeDaywiseAdhocPaymentReport.fromJS(_data["chequeDaywiseAdhocPaymentReport"]) : undefined;
      this.ddDaywiseAdhocPaymentReport = _data["ddDaywiseAdhocPaymentReport"] ? DDDaywiseAdhocPaymentReport.fromJS(_data["ddDaywiseAdhocPaymentReport"]) : undefined;
      this.upiAdhocPaymentDaywiseReport = _data["upiAdhocPaymentDaywiseReport"] ? UpiAdhocPaymentDaywiseReport.fromJS(_data["upiAdhocPaymentDaywiseReport"]) : undefined;
      this.netBankingAdhocDaywisePaymentReport = _data["netBankingAdhocDaywisePaymentReport"] ? NetBankingAdhocDaywisePaymentReport.fromJS(_data["netBankingAdhocDaywisePaymentReport"]) : undefined;
      this.cardDaywiseAdhocPaymentReport = _data["cardDaywiseAdhocPaymentReport"] ? CardDaywiseAdhocPaymentReport.fromJS(_data["cardDaywiseAdhocPaymentReport"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AdhocFeePaymentDaywiseReportDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["cashDaywiseAdhocPaymentReport"] = this.cashDaywiseAdhocPaymentReport ? this.cashDaywiseAdhocPaymentReport.toJSON() : undefined;
    data["chequeDaywiseAdhocPaymentReport"] = this.chequeDaywiseAdhocPaymentReport ? this.chequeDaywiseAdhocPaymentReport.toJSON() : undefined;
    data["ddDaywiseAdhocPaymentReport"] = this.ddDaywiseAdhocPaymentReport ? this.ddDaywiseAdhocPaymentReport.toJSON() : undefined;
    data["upiAdhocPaymentDaywiseReport"] = this.upiAdhocPaymentDaywiseReport ? this.upiAdhocPaymentDaywiseReport.toJSON() : undefined;
    data["netBankingAdhocDaywisePaymentReport"] = this.netBankingAdhocDaywisePaymentReport ? this.netBankingAdhocDaywisePaymentReport.toJSON() : undefined;
    data["cardDaywiseAdhocPaymentReport"] = this.cardDaywiseAdhocPaymentReport ? this.cardDaywiseAdhocPaymentReport.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new AdhocFeePaymentDaywiseReportDto();
    result.init(json);
    return result;
  }
}
class CashDaywiseAdhocPaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["cashDaywiseAdhocPaymentReportList"])) {
        this.cashDaywiseAdhocPaymentReportList = [];
        for (let item of _data["cashDaywiseAdhocPaymentReportList"]) this.cashDaywiseAdhocPaymentReportList.push(DaywiseAdhocPaymentReport.fromJS(item));
      }
      this.cashAdhocDaywisePaymentReportTotal = _data["cashAdhocDaywisePaymentReportTotal"] ? DaywiseAdhocPaymentReportTotal.fromJS(_data["cashAdhocDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CashDaywiseAdhocPaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.cashDaywiseAdhocPaymentReportList)) {
      data["cashDaywiseAdhocPaymentReportList"] = [];
      for (let item of this.cashDaywiseAdhocPaymentReportList) data["cashDaywiseAdhocPaymentReportList"].push(item.toJSON());
    }
    data["cashAdhocDaywisePaymentReportTotal"] = this.cashAdhocDaywisePaymentReportTotal ? this.cashAdhocDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CashDaywiseAdhocPaymentReport();
    result.init(json);
    return result;
  }
}
class DaywiseAdhocPaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.studentName = _data["studentName"];
      this.class = _data["class"];
      this.generalRegistrationNo = _data["generalRegistrationNo"];
      this.chequeNumber = _data["chequeNumber"];
      this.chequeDate = _data["chequeDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["chequeDate"].toString()) : undefined;
      this.chequeBank = _data["chequeBank"];
      this.academicYearName = _data["academicYearName"];
      this.paymentAmount = _data["paymentAmount"];
      this.invoiceNumber = _data["invoiceNumber"];
      this.transactionDate = _data["transactionDate"] ? moment__WEBPACK_IMPORTED_MODULE_0__(_data["transactionDate"].toString()) : undefined;
      this.paymentMode = _data["paymentMode"];
      this.chequeUnclearedAmount = _data["chequeUnclearedAmount"];
      this.transactionBy = _data["transactionBy"];
      this.transactionId = _data["transactionId"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DaywiseAdhocPaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["studentName"] = this.studentName;
    data["class"] = this.class;
    data["generalRegistrationNo"] = this.generalRegistrationNo;
    data["chequeNumber"] = this.chequeNumber;
    data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : undefined;
    data["chequeBank"] = this.chequeBank;
    data["academicYearName"] = this.academicYearName;
    data["paymentAmount"] = this.paymentAmount;
    data["invoiceNumber"] = this.invoiceNumber;
    data["transactionDate"] = this.transactionDate ? this.transactionDate.toISOString() : undefined;
    data["paymentMode"] = this.paymentMode;
    data["chequeUnclearedAmount"] = this.chequeUnclearedAmount;
    data["transactionBy"] = this.transactionBy;
    data["transactionId"] = this.transactionId;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DaywiseAdhocPaymentReport();
    result.init(json);
    return result;
  }
}
class DaywiseAdhocPaymentReportTotal {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.totalPaymentAmount = _data["totalPaymentAmount"];
      this.totalChequeUnclearedAmount = _data["totalChequeUnclearedAmount"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DaywiseAdhocPaymentReportTotal();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["totalPaymentAmount"] = this.totalPaymentAmount;
    data["totalChequeUnclearedAmount"] = this.totalChequeUnclearedAmount;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DaywiseAdhocPaymentReportTotal();
    result.init(json);
    return result;
  }
}
class ChequeDaywiseAdhocPaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["chequeDaywiseAdhocPaymentReportList"])) {
        this.chequeDaywiseAdhocPaymentReportList = [];
        for (let item of _data["chequeDaywiseAdhocPaymentReportList"]) this.chequeDaywiseAdhocPaymentReportList.push(DaywiseAdhocPaymentReport.fromJS(item));
      }
      this.chequeDaywiseAdhocPaymentReportTotal = _data["chequeDaywiseAdhocPaymentReportTotal"] ? DaywiseAdhocPaymentReportTotal.fromJS(_data["chequeDaywiseAdhocPaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ChequeDaywiseAdhocPaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.chequeDaywiseAdhocPaymentReportList)) {
      data["chequeDaywiseAdhocPaymentReportList"] = [];
      for (let item of this.chequeDaywiseAdhocPaymentReportList) data["chequeDaywiseAdhocPaymentReportList"].push(item.toJSON());
    }
    data["chequeDaywiseAdhocPaymentReportTotal"] = this.chequeDaywiseAdhocPaymentReportTotal ? this.chequeDaywiseAdhocPaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ChequeDaywiseAdhocPaymentReport();
    result.init(json);
    return result;
  }
}
class DDDaywiseAdhocPaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["ddDaywiseAdhocPaymentReportList"])) {
        this.ddDaywiseAdhocPaymentReportList = [];
        for (let item of _data["ddDaywiseAdhocPaymentReportList"]) this.ddDaywiseAdhocPaymentReportList.push(DaywiseAdhocPaymentReport.fromJS(item));
      }
      this.ddDaywiseAdhocPaymentReportTotal = _data["ddDaywiseAdhocPaymentReportTotal"] ? DaywiseAdhocPaymentReportTotal.fromJS(_data["ddDaywiseAdhocPaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DDDaywiseAdhocPaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.ddDaywiseAdhocPaymentReportList)) {
      data["ddDaywiseAdhocPaymentReportList"] = [];
      for (let item of this.ddDaywiseAdhocPaymentReportList) data["ddDaywiseAdhocPaymentReportList"].push(item.toJSON());
    }
    data["ddDaywiseAdhocPaymentReportTotal"] = this.ddDaywiseAdhocPaymentReportTotal ? this.ddDaywiseAdhocPaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DDDaywiseAdhocPaymentReport();
    result.init(json);
    return result;
  }
}
class UpiAdhocPaymentDaywiseReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["upiAdhocPaymentDaywisePaymentReportList"])) {
        this.upiAdhocPaymentDaywisePaymentReportList = [];
        for (let item of _data["upiAdhocPaymentDaywisePaymentReportList"]) this.upiAdhocPaymentDaywisePaymentReportList.push(DaywiseAdhocPaymentReport.fromJS(item));
      }
      this.upiAdhocPaymentDaywisePaymentReportTotal = _data["upiAdhocPaymentDaywisePaymentReportTotal"] ? DaywiseAdhocPaymentReportTotal.fromJS(_data["upiAdhocPaymentDaywisePaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new UpiAdhocPaymentDaywiseReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.upiAdhocPaymentDaywisePaymentReportList)) {
      data["upiAdhocPaymentDaywisePaymentReportList"] = [];
      for (let item of this.upiAdhocPaymentDaywisePaymentReportList) data["upiAdhocPaymentDaywisePaymentReportList"].push(item.toJSON());
    }
    data["upiAdhocPaymentDaywisePaymentReportTotal"] = this.upiAdhocPaymentDaywisePaymentReportTotal ? this.upiAdhocPaymentDaywisePaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new UpiAdhocPaymentDaywiseReport();
    result.init(json);
    return result;
  }
}
class NetBankingAdhocDaywisePaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["netBankingDaywiseAdhocPaymentReportList"])) {
        this.netBankingDaywiseAdhocPaymentReportList = [];
        for (let item of _data["netBankingDaywiseAdhocPaymentReportList"]) this.netBankingDaywiseAdhocPaymentReportList.push(DaywiseAdhocPaymentReport.fromJS(item));
      }
      this.netBankingDaywiseAdhocPaymentReportTotal = _data["netBankingDaywiseAdhocPaymentReportTotal"] ? DaywiseAdhocPaymentReportTotal.fromJS(_data["netBankingDaywiseAdhocPaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new NetBankingAdhocDaywisePaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.netBankingDaywiseAdhocPaymentReportList)) {
      data["netBankingDaywiseAdhocPaymentReportList"] = [];
      for (let item of this.netBankingDaywiseAdhocPaymentReportList) data["netBankingDaywiseAdhocPaymentReportList"].push(item.toJSON());
    }
    data["netBankingDaywiseAdhocPaymentReportTotal"] = this.netBankingDaywiseAdhocPaymentReportTotal ? this.netBankingDaywiseAdhocPaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new NetBankingAdhocDaywisePaymentReport();
    result.init(json);
    return result;
  }
}
class CardDaywiseAdhocPaymentReport {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["cardDaywiseAdhocPaymentReportList"])) {
        this.cardDaywiseAdhocPaymentReportList = [];
        for (let item of _data["cardDaywiseAdhocPaymentReportList"]) this.cardDaywiseAdhocPaymentReportList.push(DaywiseAdhocPaymentReport.fromJS(item));
      }
      this.cardDaywiseAdhocPaymentReportTotal = _data["cardDaywiseAdhocPaymentReportTotal"] ? DaywiseAdhocPaymentReportTotal.fromJS(_data["cardDaywiseAdhocPaymentReportTotal"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CardDaywiseAdhocPaymentReport();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.cardDaywiseAdhocPaymentReportList)) {
      data["cardDaywiseAdhocPaymentReportList"] = [];
      for (let item of this.cardDaywiseAdhocPaymentReportList) data["cardDaywiseAdhocPaymentReportList"].push(item.toJSON());
    }
    data["cardDaywiseAdhocPaymentReportTotal"] = this.cardDaywiseAdhocPaymentReportTotal ? this.cardDaywiseAdhocPaymentReportTotal.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new CardDaywiseAdhocPaymentReport();
    result.init(json);
    return result;
  }
}
class DaywiseAdhocPaymentReportRequest {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.startDate = _data["startDate"] ? SchoolNgbDateModel.fromJS(_data["startDate"]) : undefined;
      this.endDate = _data["endDate"] ? SchoolNgbDateModel.fromJS(_data["endDate"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DaywiseAdhocPaymentReportRequest();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["startDate"] = this.startDate ? this.startDate.toJSON() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toJSON() : undefined;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new DaywiseAdhocPaymentReportRequest();
    result.init(json);
    return result;
  }
}
class PermissionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.moduleId = _data["moduleId"];
      this.roleId = _data["roleId"];
      this.permissionId = _data["permissionId"];
      this.permissionName = _data["permissionName"];
      this.permissionNameKey = _data["permissionNameKey"];
      this.isChecked = _data["isChecked"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PermissionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["moduleId"] = this.moduleId;
    data["roleId"] = this.roleId;
    data["permissionId"] = this.permissionId;
    data["permissionName"] = this.permissionName;
    data["permissionNameKey"] = this.permissionNameKey;
    data["isChecked"] = this.isChecked;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PermissionDto();
    result.init(json);
    return result;
  }
}
class RoleModuleDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.roleId = _data["roleId"];
      this.roleName = _data["roleName"];
      this.roleNameKey = _data["roleNameKey"];
      if (Array.isArray(_data["modules"])) {
        this.modules = [];
        for (let item of _data["modules"]) this.modules.push(ModulePermissionDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new RoleModuleDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["roleId"] = this.roleId;
    data["roleName"] = this.roleName;
    data["roleNameKey"] = this.roleNameKey;
    if (Array.isArray(this.modules)) {
      data["modules"] = [];
      for (let item of this.modules) data["modules"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new RoleModuleDto();
    result.init(json);
    return result;
  }
}
class ModulePermissionDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.moduleId = _data["moduleId"];
      this.moduleName = _data["moduleName"];
      this.moduleNameKey = _data["moduleNameKey"];
      this.menuUrl = _data["menuUrl"];
      if (Array.isArray(_data["modulePermissions"])) {
        this.modulePermissions = [];
        for (let item of _data["modulePermissions"]) this.modulePermissions.push(PermissionDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ModulePermissionDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["moduleId"] = this.moduleId;
    data["moduleName"] = this.moduleName;
    data["moduleNameKey"] = this.moduleNameKey;
    data["menuUrl"] = this.menuUrl;
    if (Array.isArray(this.modulePermissions)) {
      data["modulePermissions"] = [];
      for (let item of this.modulePermissions) data["modulePermissions"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ModulePermissionDto();
    result.init(json);
    return result;
  }
}
class RoleMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["roles"])) {
        this.roles = [];
        for (let item of _data["roles"]) this.roles.push(RoleModuleDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new RoleMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.roles)) {
      data["roles"] = [];
      for (let item of this.roles) data["roles"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new RoleMasterDto();
    result.init(json);
    return result;
  }
}
class PermissionMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["permissions"])) {
        this.permissions = [];
        for (let item of _data["permissions"]) this.permissions.push(PermissionDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PermissionMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.permissions)) {
      data["permissions"] = [];
      for (let item of this.permissions) data["permissions"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new PermissionMasterDto();
    result.init(json);
    return result;
  }
}
class ModuleMasterDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      if (Array.isArray(_data["modules"])) {
        this.modules = [];
        for (let item of _data["modules"]) this.modules.push(ModuleDto.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ModuleMasterDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.modules)) {
      data["modules"] = [];
      for (let item of this.modules) data["modules"].push(item.toJSON());
    }
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ModuleMasterDto();
    result.init(json);
    return result;
  }
}
class ModuleDto {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property)) this[property] = data[property];
      }
    }
  }
  init(_data) {
    if (_data) {
      this.moduleId = _data["moduleId"];
      this.moduleName = _data["moduleName"];
      this.moduleKey = _data["moduleKey"];
      this.menuUrl = _data["menuUrl"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ModuleDto();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["moduleId"] = this.moduleId;
    data["moduleName"] = this.moduleName;
    data["moduleKey"] = this.moduleKey;
    data["menuUrl"] = this.menuUrl;
    return data;
  }
  clone() {
    const json = this.toJSON();
    let result = new ModuleDto();
    result.init(json);
    return result;
  }
}
class ApiException extends Error {
  constructor(message, status, response, headers, result) {
    super();
    this.isApiException = true;
    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }
  static isApiException(obj) {
    return obj.isApiException === true;
  }
}
function throwException(message, status, response, headers, result) {
  if (result !== null && result !== undefined) return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(result);else return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.throwError)(new ApiException(message, status, response, headers, null));
}
function blobToText(blob) {
  return new rxjs__WEBPACK_IMPORTED_MODULE_8__.Observable(observer => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next(event.target.result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}

/***/ }),

/***/ 85217:
/*!*****************************************************!*\
  !*** ./src/app/services/storage/storage.service.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   APP_TOKEN: () => (/* binding */ APP_TOKEN),
/* harmony export */   StorageService: () => (/* binding */ StorageService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _capacitor_preferences__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/preferences */ 46493);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ 95429);




const APP_TOKEN = 'app_token';
let StorageService = class StorageService {
  constructor() {}
  setStorage(key, value) {
    _capacitor_preferences__WEBPACK_IMPORTED_MODULE_0__.Preferences.set({
      key: key,
      value: value
    });
  }
  getStorage(key) {
    // Preferences.migrate();
    return _capacitor_preferences__WEBPACK_IMPORTED_MODULE_0__.Preferences.get({
      key: key
    });
  }
  removeStorage(key) {
    _capacitor_preferences__WEBPACK_IMPORTED_MODULE_0__.Preferences.remove({
      key: key
    });
  }
  clearStorage() {
    _capacitor_preferences__WEBPACK_IMPORTED_MODULE_0__.Preferences.clear();
  }
  getGFCMToken() {
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(this.getStorage(APP_TOKEN));
  }
  static #_ = this.ctorParameters = () => [];
};
StorageService = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable)({
  providedIn: 'root'
})], StorageService);


/***/ }),

/***/ 4286:
/*!******************************************!*\
  !*** ./src/app/services/user-service.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UserService: () => (/* binding */ UserService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ 59452);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 95429);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 98764);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ 70271);
/* harmony import */ var _school_api_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./school-api-service */ 37020);
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/environments/environment */ 45312);
/* harmony import */ var crypto_js___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto-js/ */ 75720);
/* harmony import */ var crypto_js___WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto_js___WEBPACK_IMPORTED_MODULE_2__);







let UserService = class UserService {
  constructor(authServiceProxy) {
    this.authServiceProxy = authServiceProxy;
  }
  getUser(isReload = false) {
    if (!isReload && this.user) {
      // If the user object is already cached, return it as an observable
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(this.user);
    } else {
      let roleId = this.CurrentUserRoleId;
      let decryptedString = crypto_js___WEBPACK_IMPORTED_MODULE_2__.AES.decrypt(roleId, src_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.ENCRYPTION_PASSWORD).toString(crypto_js___WEBPACK_IMPORTED_MODULE_2__.enc.Utf8);
      let id = null;
      if (decryptedString != null && decryptedString != "" && decryptedString != undefined) {
        id = parseInt(decryptedString);
      }
      this.userPromise = this.authServiceProxy.getUserRoleModulePermissionDetail(id).toPromise();
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.from)(this.userPromise).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.tap)(user => this.user = user));
    }
  }
  refreshUser() {
    let roleId = localStorage.getItem("id");
    let decryptedString = crypto_js___WEBPACK_IMPORTED_MODULE_2__.AES.decrypt(roleId, src_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.ENCRYPTION_PASSWORD).toString(crypto_js___WEBPACK_IMPORTED_MODULE_2__.enc.Utf8);
    let id = null;
    if (decryptedString != null && decryptedString != "" && decryptedString != undefined) {
      id = parseInt(decryptedString);
    }
    this.userPromise = this.authServiceProxy.getUserRoleModulePermissionDetail(id).toPromise();
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.from)(this.userPromise).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.tap)(user => this.user = user));
  }
  hasRole(role) {
    // Check if the current user has a specific role
    return this.getUser().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.map)(user => user?.roleDetails?.map(x => x.roleName).includes(role)));
  }
  hasPermission(permission) {
    // Check if the current user has a specific permission
    return this.getUser().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.map)(user => user?.roleDetails?.flatMap(a => a.allowedModules?.flatMap(b => b.allowedPermissions?.map(c => c.permissionName))).includes(permission)));
  }
  hasModule(module) {
    // Check if the current user has access to a specific module
    return this.getUser().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.map)(user => this.buildModulePermissionDictionary(user).has(module)));
  }
  hasModulePermission(module, permission) {
    // Check if the current user has access to a specific module
    return this.getUser().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.map)(user => this.checkModulePermissionExist(user, module, permission)));
  }
  checkModulePermissionExist(user, module, permission) {
    const permissionDictionary = this.buildModulePermissionDictionary(user);
    if (permissionDictionary.has(module)) {
      return this.getBooleanValue(permissionDictionary.get(module)?.includes(permission));
    } else {
      return false;
    }
  }
  buildModulePermissionDictionary(user) {
    const permissionDictionary = new Map();
    user?.roleDetails?.flatMap(x => x.allowedModules).forEach(obj => this.getModulePermissionDictionary(obj, permissionDictionary));
    return permissionDictionary;
  }
  getModulePermissionDictionary(obj, result) {
    result.set(this.getStringValue(obj?.moduleName), this.getArrayValue(obj?.allowedPermissions).map(x => x.permissionName));
    if (obj?.childModules) {
      obj.childModules.forEach(child => this.getModulePermissionDictionary(child, result));
    }
  }
  getStringValue(a) {
    if (a !== undefined) {
      return a;
    }
    return '';
  }
  getBooleanValue(a) {
    if (a !== undefined) {
      return a;
    }
    return false;
  }
  getArrayValue(a) {
    if (a !== undefined) {
      return a;
    }
    return [];
  }
  isAuthenticated() {
    // Check if a token exists in local storage
    const token = localStorage.getItem('token');
    return token && token != 'null';
  }
  getAcademicYear() {
    let encryptedAcademicYearId = localStorage.getItem('academicYearId');
    if (encryptedAcademicYearId && encryptedAcademicYearId.length > 0) {
      let decryptedString = crypto_js___WEBPACK_IMPORTED_MODULE_2__.AES.decrypt(encryptedAcademicYearId, src_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.ENCRYPTION_PASSWORD).toString(crypto_js___WEBPACK_IMPORTED_MODULE_2__.enc.Utf8);
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.of)(parseInt(decryptedString));
    } else {
      return this.getUser().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.map)(user => user?.academicYearId));
    }
  }
  setAcademicYear(academicYearId) {
    let encryptedString = crypto_js___WEBPACK_IMPORTED_MODULE_2__.AES.encrypt(academicYearId.toString(), src_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.ENCRYPTION_PASSWORD).toString();
    localStorage.setItem('academicYearId', encryptedString);
  }
  getSchoolCode() {
    return this.getUser().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.map)(user => user?.schoolCode));
  }
  getSchoolId() {
    return this.getUser().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.map)(user => user?.schoolId));
  }
  setSchoolId(schoolId) {
    if (this.user) {
      this.user.schoolId = schoolId;
    }
  }
  set UserToken(token) {
    this.userToken = token;
    localStorage.setItem('token', this.userToken);
  }
  get UserToken() {
    if (this.userToken) {
      return this.userToken;
    } else {
      return localStorage.getItem('token');
    }
  }
  set CurrentUserRoleId(roleId) {
    this.currentRole = roleId;
    localStorage.setItem('id', roleId);
  }
  get CurrentUserRoleId() {
    if (this.currentRole) {
      return this.currentRole;
    } else {
      this.currentRole = localStorage.getItem('id');
      return this.currentRole;
    }
  }
  getUserIdByRole() {
    return this.getUser().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.map)(user => user?.userIdByRole));
  }
  get CurrentSiblingId() {
    if (this.currentSibling) {
      return this.currentSibling;
    } else {
      this.currentSibling = parseInt(localStorage.getItem('siblingId'));
      return this.currentSibling;
    }
  }
  set CurrentSiblingId(siblingId) {
    this.currentSibling = siblingId;
    localStorage.setItem('siblingId', this.currentSibling.toString());
  }
  get CurrentSiblingClassId() {
    if (this.currentSiblingClass) {
      return this.currentSiblingClass;
    } else {
      this.currentSiblingClass = parseInt(localStorage.getItem('siblingClassId'));
      return this.currentSiblingClass;
    }
  }
  set CurrentSiblingClassId(classId) {
    this.currentSiblingClass = classId;
    localStorage.setItem('siblingClassId', this.currentSiblingClass.toString());
  }
  static #_ = this.ctorParameters = () => [{
    type: _school_api_service__WEBPACK_IMPORTED_MODULE_0__.AuthServiceProxy
  }];
};
UserService = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.Injectable)({
  providedIn: 'root'
})], UserService);


/***/ }),

/***/ 93887:
/*!*****************************************!*\
  !*** ./src/app/shared/shared.module.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SharedModule: () => (/* binding */ SharedModule)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _ckeditor_ckeditor5_angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ckeditor/ckeditor5-angular */ 34225);
/* harmony import */ var _rxweb_reactive_form_validators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @rxweb/reactive-form-validators */ 61661);




let SharedModule = class SharedModule {};
SharedModule = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule)({
  imports: [_ckeditor_ckeditor5_angular__WEBPACK_IMPORTED_MODULE_2__.CKEditorModule, _rxweb_reactive_form_validators__WEBPACK_IMPORTED_MODULE_3__.RxReactiveFormsModule],
  declarations: [],
  exports: [_ckeditor_ckeditor5_angular__WEBPACK_IMPORTED_MODULE_2__.CKEditorModule]
})], SharedModule);


/***/ }),

/***/ 57394:
/*!*********************************************!*\
  !*** ./src/app/translate-config.service.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TranslateConfigService: () => (/* binding */ TranslateConfigService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 24398);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ngx-translate/core */ 90852);



let TranslateConfigService = class TranslateConfigService {
  constructor(translate) {
    this.translate = translate;
    this.currentLang = localStorage.getItem('lang');
  }
  getDefaultLanguage() {
    if (this.currentLang) {
      this.translate.setDefaultLang(this.currentLang);
    } else {
      localStorage.setItem('lang', this.translate.getBrowserLang());
      this.currentLang = this.translate.getBrowserLang();
      this.translate.setDefaultLang(this.currentLang);
    }
    return this.currentLang;
  }
  setLanguage(setLang) {
    this.translate.use(setLang);
    localStorage.setItem('lang', setLang);
  }
  getCurrentLang() {
    return localStorage.getItem('lang');
  }
  static #_ = this.ctorParameters = () => [{
    type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_0__.TranslateService
  }];
};
TranslateConfigService = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable)({
  providedIn: 'root'
})], TranslateConfigService);


/***/ }),

/***/ 45312:
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   environment: () => (/* binding */ environment)
/* harmony export */ });
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
const environment = {
  production: false,
  //API_BASE_URL:"https://localhost:7068",
  API_BASE_URL: "https://logicalhuntapps.online",
  //API_BASE_URL:"https://api.schoolhub360.com",
  ENCRYPTION_PASSWORD: "LogicalHunt@2023",
  CLIENT_IPADDRESS_SERVICE: "https://api.ipify.org?format=json",
  GOOGLEMAPSAPIKEY: 'AIzaSyC6PmVPw5ypaEUpC9mhWPNDx3xYxzCETEM',
  APP_VERSION: "28"
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.

/***/ }),

/***/ 84429:
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37580);
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ 52476);
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app/app.module */ 50635);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environments/environment */ 45312);




if (_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.production) {
  (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.enableProdMode)();
}
(0,_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_3__.platformBrowserDynamic)().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_0__.AppModule).catch(err => console.log(err));

/***/ }),

/***/ 88996:
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ lazy ^\.\/.*\.entry\.js$ include: \.entry\.js$ exclude: \.system\.entry\.js$ namespace object ***!
  \******************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./ion-accordion_2.entry.js": [
		37518,
		"common",
		"node_modules_ionic_core_dist_esm_ion-accordion_2_entry_js"
	],
	"./ion-action-sheet.entry.js": [
		41981,
		"common",
		"node_modules_ionic_core_dist_esm_ion-action-sheet_entry_js"
	],
	"./ion-alert.entry.js": [
		71603,
		"common",
		"node_modules_ionic_core_dist_esm_ion-alert_entry_js"
	],
	"./ion-app_8.entry.js": [
		82273,
		"common",
		"node_modules_ionic_core_dist_esm_ion-app_8_entry_js"
	],
	"./ion-avatar_3.entry.js": [
		19642,
		"node_modules_ionic_core_dist_esm_ion-avatar_3_entry_js"
	],
	"./ion-back-button.entry.js": [
		32095,
		"common",
		"node_modules_ionic_core_dist_esm_ion-back-button_entry_js"
	],
	"./ion-backdrop.entry.js": [
		72335,
		"node_modules_ionic_core_dist_esm_ion-backdrop_entry_js"
	],
	"./ion-breadcrumb_2.entry.js": [
		78221,
		"common",
		"node_modules_ionic_core_dist_esm_ion-breadcrumb_2_entry_js"
	],
	"./ion-button_2.entry.js": [
		47184,
		"node_modules_ionic_core_dist_esm_ion-button_2_entry_js"
	],
	"./ion-card_5.entry.js": [
		38759,
		"node_modules_ionic_core_dist_esm_ion-card_5_entry_js"
	],
	"./ion-checkbox.entry.js": [
		24248,
		"node_modules_ionic_core_dist_esm_ion-checkbox_entry_js"
	],
	"./ion-chip.entry.js": [
		69863,
		"node_modules_ionic_core_dist_esm_ion-chip_entry_js"
	],
	"./ion-col_3.entry.js": [
		51769,
		"node_modules_ionic_core_dist_esm_ion-col_3_entry_js"
	],
	"./ion-datetime-button.entry.js": [
		2569,
		"default-node_modules_ionic_core_dist_esm_data-bb424ba8_js",
		"node_modules_ionic_core_dist_esm_ion-datetime-button_entry_js"
	],
	"./ion-datetime_3.entry.js": [
		76534,
		"default-node_modules_ionic_core_dist_esm_data-bb424ba8_js",
		"common",
		"node_modules_ionic_core_dist_esm_ion-datetime_3_entry_js"
	],
	"./ion-fab_3.entry.js": [
		25458,
		"common",
		"node_modules_ionic_core_dist_esm_ion-fab_3_entry_js"
	],
	"./ion-img.entry.js": [
		70654,
		"node_modules_ionic_core_dist_esm_ion-img_entry_js"
	],
	"./ion-infinite-scroll_2.entry.js": [
		36034,
		"common",
		"node_modules_ionic_core_dist_esm_ion-infinite-scroll_2_entry_js"
	],
	"./ion-input.entry.js": [
		20761,
		"default-node_modules_ionic_core_dist_esm_form-controller-21dd62b1_js-node_modules_ionic_core_-a176d1",
		"common",
		"node_modules_ionic_core_dist_esm_ion-input_entry_js"
	],
	"./ion-item-option_3.entry.js": [
		6492,
		"common",
		"node_modules_ionic_core_dist_esm_ion-item-option_3_entry_js"
	],
	"./ion-item_8.entry.js": [
		29557,
		"common",
		"node_modules_ionic_core_dist_esm_ion-item_8_entry_js"
	],
	"./ion-loading.entry.js": [
		68353,
		"common",
		"node_modules_ionic_core_dist_esm_ion-loading_entry_js"
	],
	"./ion-menu_3.entry.js": [
		51024,
		"common",
		"node_modules_ionic_core_dist_esm_ion-menu_3_entry_js"
	],
	"./ion-modal.entry.js": [
		29160,
		"common",
		"node_modules_ionic_core_dist_esm_ion-modal_entry_js"
	],
	"./ion-nav_2.entry.js": [
		60393,
		"node_modules_ionic_core_dist_esm_ion-nav_2_entry_js"
	],
	"./ion-picker-column-internal.entry.js": [
		23970,
		"common",
		"node_modules_ionic_core_dist_esm_ion-picker-column-internal_entry_js"
	],
	"./ion-picker-internal.entry.js": [
		20437,
		"node_modules_ionic_core_dist_esm_ion-picker-internal_entry_js"
	],
	"./ion-popover.entry.js": [
		16772,
		"common",
		"node_modules_ionic_core_dist_esm_ion-popover_entry_js"
	],
	"./ion-progress-bar.entry.js": [
		34810,
		"node_modules_ionic_core_dist_esm_ion-progress-bar_entry_js"
	],
	"./ion-radio_2.entry.js": [
		14639,
		"common",
		"node_modules_ionic_core_dist_esm_ion-radio_2_entry_js"
	],
	"./ion-range.entry.js": [
		90628,
		"common",
		"node_modules_ionic_core_dist_esm_ion-range_entry_js"
	],
	"./ion-refresher_2.entry.js": [
		10852,
		"common",
		"node_modules_ionic_core_dist_esm_ion-refresher_2_entry_js"
	],
	"./ion-reorder_2.entry.js": [
		61479,
		"common",
		"node_modules_ionic_core_dist_esm_ion-reorder_2_entry_js"
	],
	"./ion-ripple-effect.entry.js": [
		24065,
		"node_modules_ionic_core_dist_esm_ion-ripple-effect_entry_js"
	],
	"./ion-route_4.entry.js": [
		57971,
		"node_modules_ionic_core_dist_esm_ion-route_4_entry_js"
	],
	"./ion-searchbar.entry.js": [
		93184,
		"common",
		"node_modules_ionic_core_dist_esm_ion-searchbar_entry_js"
	],
	"./ion-segment_2.entry.js": [
		469,
		"common",
		"node_modules_ionic_core_dist_esm_ion-segment_2_entry_js"
	],
	"./ion-select_3.entry.js": [
		78471,
		"common",
		"node_modules_ionic_core_dist_esm_ion-select_3_entry_js"
	],
	"./ion-spinner.entry.js": [
		40388,
		"common",
		"node_modules_ionic_core_dist_esm_ion-spinner_entry_js"
	],
	"./ion-split-pane.entry.js": [
		42392,
		"node_modules_ionic_core_dist_esm_ion-split-pane_entry_js"
	],
	"./ion-tab-bar_2.entry.js": [
		36059,
		"common",
		"node_modules_ionic_core_dist_esm_ion-tab-bar_2_entry_js"
	],
	"./ion-tab_2.entry.js": [
		5427,
		"node_modules_ionic_core_dist_esm_ion-tab_2_entry_js"
	],
	"./ion-text.entry.js": [
		50198,
		"node_modules_ionic_core_dist_esm_ion-text_entry_js"
	],
	"./ion-textarea.entry.js": [
		1735,
		"default-node_modules_ionic_core_dist_esm_form-controller-21dd62b1_js-node_modules_ionic_core_-a176d1",
		"node_modules_ionic_core_dist_esm_ion-textarea_entry_js"
	],
	"./ion-toast.entry.js": [
		7510,
		"common",
		"node_modules_ionic_core_dist_esm_ion-toast_entry_js"
	],
	"./ion-toggle.entry.js": [
		45297,
		"common",
		"node_modules_ionic_core_dist_esm_ion-toggle_entry_js"
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(() => {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = () => (Object.keys(map));
webpackAsyncContext.id = 88996;
module.exports = webpackAsyncContext;

/***/ }),

/***/ 54140:
/*!************************************************************************************************************************************************************!*\
  !*** ./node_modules/@stencil/core/internal/client/ lazy ^\.\/.*\.entry\.js.*$ include: \.entry\.js$ exclude: \.system\.entry\.js$ strict namespace object ***!
  \************************************************************************************************************************************************************/
/***/ ((module) => {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(() => {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = () => ([]);
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = 54140;
module.exports = webpackEmptyAsyncContext;

/***/ }),

/***/ 37282:
/*!***********************************************!*\
  !*** ./src/app/app.component.scss?ngResource ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 53142);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ 35950);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, ``, "",{"version":3,"sources":[],"names":[],"mappings":"","sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 27229:
/*!**********************************************************************************!*\
  !*** ./src/app/pages/public/empty-screen/empty-screen.component.scss?ngResource ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 53142);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/api.js */ 35950);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `div {
  background-position: center;
  background-size: cover;
  background-repeat: no-repeat;
  width: 100%;
  height: 100%;
}
div ion-grid {
  transform: translateY(60vh);
}
div ion-grid ion-row ion-col ion-label {
  font-size: 1.8rem;
  font-weight: bold;
}
div ion-grid ion-row ion-col p {
  font-size: 0.9rem;
  font-weight: 400;
}
div ion-grid ion-row ion-col p.subtitle {
  margin-top: 4vh !important;
  margin-bottom: 8px !important;
}
div ion-grid ion-row ion-col p.description {
  margin-top: 8px !important;
}
div ion-grid ion-row ion-col ion-button {
  --box-shadow: -1px 11px 13px -6px rgb(87, 86, 86);
}`, "",{"version":3,"sources":["webpack://./src/app/pages/public/empty-screen/empty-screen.component.scss"],"names":[],"mappings":"AAAA;EACI,2BAAA;EACA,sBAAA;EACA,4BAAA;EACA,WAAA;EACA,YAAA;AACJ;AAAI;EACE,2BAAA;AAEN;AACU;EACE,iBAAA;EACA,iBAAA;AACZ;AACU;EACE,iBAAA;EACA,gBAAA;AACZ;AACU;EACE,0BAAA;EACA,6BAAA;AACZ;AACU;EACE,0BAAA;AACZ;AACU;EACE,iDAAA;AACZ","sourcesContent":["div {\n    background-position: center;\n    background-size: cover;\n    background-repeat: no-repeat;\n    width: 100%;\n    height: 100%;\n    ion-grid {\n      transform: translateY(60vh);\n      ion-row {\n        ion-col {\n          ion-label {\n            font-size: 1.8rem;\n            font-weight: bold;\n          }\n          p {\n            font-size: 0.9rem;\n            font-weight: 400;\n          }\n          p.subtitle {\n            margin-top: 4vh !important;\n            margin-bottom: 8px !important;\n          }\n          p.description {\n            margin-top: 8px !important;\n          }\n          ion-button {\n            --box-shadow: -1px 11px 13px -6px rgb(87, 86, 86);\n          }\n        }\n      }\n    }\n  }"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 51887:
/*!***************************************************************************************!*\
  !*** ./src/app/pages/teacherApp/tabs/header/teacher-header.component.scss?ngResource ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 53142);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../../../node_modules/css-loader/dist/runtime/api.js */ 35950);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `ion-menu::part(backdrop) {
  background-color: rgba(0, 0, 0, 0.3);
}

ion-menu::part(container) {
  border-radius: 25px 0px 0px 0;
  box-shadow: 4px 0px 16px rgba(255, 0, 255, 0.18);
}

.menu-header {
  background: #fff;
  background-image: url('menu-bg.png');
  background-position: center;
  background-repeat: no-repeat;
  height: 165px;
  background-size: cover;
  border-top-left-radius: 25px;
  border-top-right-radius: 0;
  display: flex;
  align-items: flex-start;
  justify-content: center;
  padding-top: 15px;
}
.menu-header div {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.menu-header p {
  font-size: 16px;
  color: #fff;
  margin-top: 10px;
}

ion-menu-toggle ion-item {
  --background:#fff !important;
  --inner-border-width: 0 !important;
  border-radius: 10px;
  font-size: 14px;
  font-weight: normal;
}
ion-menu-toggle ion-item ion-icon {
  color: #9577DC;
  margin-inline-end: 15px;
  font-size: 24px;
}
ion-menu-toggle ion-item ion-label {
  font-weight: 400;
  font-size: 16px;
  color: #000;
}
ion-menu-toggle ion-item.active-menu {
  --background:#9577DC !important;
  --color:#fff !important;
}
ion-menu-toggle ion-item.active-menu ion-icon {
  color: #fff !important;
}

ion-list, .list-ios {
  height: calc(100vh - 249px);
  padding-top: 0;
  background-color: #fff !important;
}

.logout-btn {
  font-size: 16px;
  height: 40px;
  --border-radius: 50px;
  --box-shadow: none;
  --background: linear-gradient(135deg, #da8e63, #c754aa);
  --color: var(--white-color);
}`, "",{"version":3,"sources":["webpack://./src/app/pages/teacherApp/tabs/header/teacher-header.component.scss"],"names":[],"mappings":"AAAA;EACI,oCAAA;AACJ;;AAEE;EACE,6BAAA;EAEA,gDAAA;AAAJ;;AAGE;EACE,gBAAA;EACA,oCAAA;EACA,2BAAA;EACA,4BAAA;EACA,aAAA;EACA,sBAAA;EACA,4BAAA;EACA,0BAAA;EACA,aAAA;EACA,uBAAA;EACA,uBAAA;EACA,iBAAA;AAAJ;AACI;EACE,aAAA;EACA,sBAAA;EACA,uBAAA;EACA,mBAAA;AACN;AACI;EACE,eAAA;EACA,WAAA;EACA,gBAAA;AACN;;AAKI;EACE,4BAAA;EACA,kCAAA;EACA,mBAAA;EACA,eAAA;EACA,mBAAA;AAFN;AAGM;EACE,cAAA;EACA,uBAAA;EACA,eAAA;AADR;AAGM;EACE,gBAAA;EACA,eAAA;EACA,WAAA;AADR;AAGM;EACE,+BAAA;EACA,uBAAA;AADR;AAEQ;EACE,sBAAA;AAAV;;AAME;EACE,2BAAA;EACA,cAAA;EACA,iCAAA;AAHJ;;AAKE;EACE,eAAA;EACA,YAAA;EACA,qBAAA;EACA,kBAAA;EAEA,uDAAA;EACE,2BAAA;AAHN","sourcesContent":["ion-menu::part(backdrop) {\n    background-color: rgba(0, 0, 0, 0.3);\n  }\n  \n  ion-menu::part(container) {\n    border-radius: 25px 0px 0px 0;\n  \n    box-shadow: 4px 0px 16px rgba(255, 0, 255, 0.18);\n  }\n\n  .menu-header {\n    background: #fff;\n    background-image: url('../../../../../assets/menu-bg.png');\n    background-position: center;\n    background-repeat: no-repeat;\n    height: 165px;\n    background-size: cover;\n    border-top-left-radius: 25px;\n    border-top-right-radius: 0;\n    display: flex;\n    align-items:flex-start;\n    justify-content: center;\n    padding-top: 15px;\n    div {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n    }\n    p {\n      font-size: 16px;\n      color: #fff;\n      margin-top: 10px;\n    }\n  }\n\n\n  ion-menu-toggle {\n    ion-item {\n      --background:#fff !important;\n      --inner-border-width: 0 !important;\n      border-radius: 10px;\n      font-size:14px;\n      font-weight: normal;\n      ion-icon {\n        color:#9577DC;\n        margin-inline-end: 15px;\n        font-size: 24px;\n      }\n      ion-label {\n        font-weight: 400;\n        font-size:16px;\n        color: #000;\n      }\n      &.active-menu {\n        --background:#9577DC !important;\n        --color:#fff !important;\n        ion-icon {\n          color:#fff !important;\n        }\n      }\n    }\n  }\n\n  ion-list, .list-ios {\n    height: calc(100vh - 249px);\n    padding-top: 0;\n    background-color: #fff !important;\n  }\n  .logout-btn {\n    font-size: 16px;\n    height: 40px;\n    --border-radius: 50px;\n    --box-shadow: none;\n    //--background: var(--orange-bg-color);\n    --background: linear-gradient(135deg, #da8e63, #c754aa);\n      --color: var(--white-color);\n  }"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 14180:
/*!*************************************************************************!*\
  !*** ./src/app/pages/teacherApp/tabs/teacher-tabs.page.scss?ngResource ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Imports
var ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ 53142);
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/api.js */ 35950);
var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.h-tab {
  bottom: 8px !important;
}

ion-tab-bar {
  --background:#ffffff !important;
  box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.2);
  bottom: 0px;
  position: relative;
  border-radius: 0px;
  width: 100%;
  border-top: none;
  margin: 0 auto;
  height: 55px;
  border-top: 1px solid #ccc;
}

ion-tab-button {
  --color: #fff;
  --color-selected: #5a41a0;
  --padding-bottom: 4px;
  --padding-top: 0px;
}
ion-tab-button::before {
  background-color: transparent;
  display: block;
  content: "";
  margin: 0 auto;
  width: 20px;
  height: 2px;
}
ion-tab-button.tab-selected::before {
  background-color: #5a41a0;
}
ion-tab-button ion-icon {
  font-size: 20px;
  color: #5a41a0;
}
ion-tab-button ion-label {
  font-size: 12px;
  color: #5a41a0;
  font-weight: 500;
}`, "",{"version":3,"sources":["webpack://./src/app/pages/teacherApp/tabs/teacher-tabs.page.scss"],"names":[],"mappings":"AAEA;EACE,sBAAA;AADF;;AAIA;EAGE,+BAAA;EACA,0CAAA;EACA,WAAA;EACA,kBAAA;EACA,kBAAA;EACA,WAAA;EACA,gBAAA;EACA,cAAA;EACA,YAAA;EACA,0BAAA;AAHF;;AAMA;EACE,aAAA;EACA,yBAAA;EACA,qBAAA;EACA,kBAAA;AAHF;AAKE;EACE,6BAAA;EACA,cAAA;EACA,WAAA;EACA,cAAA;EACA,WAAA;EACA,WAAA;AAHJ;AAME;EACE,yBAAA;AAJJ;AAME;EACE,eAAA;EACA,cAAA;AAJJ;AAME;EACE,eAAA;EACA,cAAA;EACA,gBAAA;AAJJ","sourcesContent":["\n\n.h-tab {\n  bottom: 8px !important;\n}\n\nion-tab-bar {\n  //--background: linear-gradient(135deg, #da8e63, #c754aa);\n  //--background: linear-gradient(#da8e63 0%, #c754aa 100%);\n  --background:#ffffff !important;\n  box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.2);\n  bottom: 0px;\n  position: relative;\n  border-radius: 0px;\n  width: 100%;\n  border-top: none;\n  margin: 0 auto;\n  height: 55px;\n  border-top:1px solid #ccc\n}\n\nion-tab-button {\n  --color: #fff;\n  --color-selected: #5a41a0;\n  --padding-bottom: 4px;\n  --padding-top: 0px;\n\n  &::before {\n    background-color: transparent;\n    display: block;\n    content: \"\";\n    margin: 0 auto;\n    width: 20px;\n    height: 2px;\n  }\n\n  &.tab-selected::before {\n    background-color: #5a41a0;\n  }\n  ion-icon {\n    font-size: 20px;\n    color: #5a41a0;\n  }\n  ion-label {\n    font-size: 12px;\n    color: #5a41a0;\n    font-weight: 500;\n\n  }\n}\n"],"sourceRoot":""}]);
// Exports
module.exports = ___CSS_LOADER_EXPORT___.toString();


/***/ }),

/***/ 35358:
/*!***************************************************!*\
  !*** ./node_modules/moment/locale/ sync ^\.\/.*$ ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./af": 85637,
	"./af.js": 85637,
	"./ar": 6777,
	"./ar-dz": 74508,
	"./ar-dz.js": 74508,
	"./ar-kw": 67504,
	"./ar-kw.js": 67504,
	"./ar-ly": 95373,
	"./ar-ly.js": 95373,
	"./ar-ma": 92412,
	"./ar-ma.js": 92412,
	"./ar-ps": 78823,
	"./ar-ps.js": 78823,
	"./ar-sa": 36670,
	"./ar-sa.js": 36670,
	"./ar-tn": 36448,
	"./ar-tn.js": 36448,
	"./ar.js": 6777,
	"./az": 23009,
	"./az.js": 23009,
	"./be": 28299,
	"./be.js": 28299,
	"./bg": 4685,
	"./bg.js": 4685,
	"./bm": 11171,
	"./bm.js": 11171,
	"./bn": 23590,
	"./bn-bd": 5841,
	"./bn-bd.js": 5841,
	"./bn.js": 23590,
	"./bo": 54309,
	"./bo.js": 54309,
	"./br": 54130,
	"./br.js": 54130,
	"./bs": 8033,
	"./bs.js": 8033,
	"./ca": 55294,
	"./ca.js": 55294,
	"./cs": 53028,
	"./cs.js": 53028,
	"./cv": 5807,
	"./cv.js": 5807,
	"./cy": 70342,
	"./cy.js": 70342,
	"./da": 38269,
	"./da.js": 38269,
	"./de": 11489,
	"./de-at": 42123,
	"./de-at.js": 42123,
	"./de-ch": 17757,
	"./de-ch.js": 17757,
	"./de.js": 11489,
	"./dv": 28152,
	"./dv.js": 28152,
	"./el": 7687,
	"./el.js": 7687,
	"./en-au": 46668,
	"./en-au.js": 46668,
	"./en-ca": 76798,
	"./en-ca.js": 76798,
	"./en-gb": 53615,
	"./en-gb.js": 53615,
	"./en-ie": 91364,
	"./en-ie.js": 91364,
	"./en-il": 79907,
	"./en-il.js": 79907,
	"./en-in": 70533,
	"./en-in.js": 70533,
	"./en-nz": 33190,
	"./en-nz.js": 33190,
	"./en-sg": 51096,
	"./en-sg.js": 51096,
	"./eo": 3962,
	"./eo.js": 3962,
	"./es": 37726,
	"./es-do": 65010,
	"./es-do.js": 65010,
	"./es-mx": 63654,
	"./es-mx.js": 63654,
	"./es-us": 59043,
	"./es-us.js": 59043,
	"./es.js": 37726,
	"./et": 25343,
	"./et.js": 25343,
	"./eu": 90728,
	"./eu.js": 90728,
	"./fa": 60787,
	"./fa.js": 60787,
	"./fi": 71771,
	"./fi.js": 71771,
	"./fil": 45335,
	"./fil.js": 45335,
	"./fo": 69761,
	"./fo.js": 69761,
	"./fr": 1670,
	"./fr-ca": 28991,
	"./fr-ca.js": 28991,
	"./fr-ch": 97280,
	"./fr-ch.js": 97280,
	"./fr.js": 1670,
	"./fy": 24203,
	"./fy.js": 24203,
	"./ga": 69858,
	"./ga.js": 69858,
	"./gd": 38605,
	"./gd.js": 38605,
	"./gl": 27365,
	"./gl.js": 27365,
	"./gom-deva": 33896,
	"./gom-deva.js": 33896,
	"./gom-latn": 95587,
	"./gom-latn.js": 95587,
	"./gu": 97950,
	"./gu.js": 97950,
	"./he": 92029,
	"./he.js": 92029,
	"./hi": 51897,
	"./hi.js": 51897,
	"./hr": 29816,
	"./hr.js": 29816,
	"./hu": 22253,
	"./hu.js": 22253,
	"./hy-am": 28196,
	"./hy-am.js": 28196,
	"./id": 51307,
	"./id.js": 51307,
	"./is": 95474,
	"./is.js": 95474,
	"./it": 23099,
	"./it-ch": 45807,
	"./it-ch.js": 45807,
	"./it.js": 23099,
	"./ja": 19127,
	"./ja.js": 19127,
	"./jv": 30182,
	"./jv.js": 30182,
	"./ka": 10758,
	"./ka.js": 10758,
	"./kk": 93444,
	"./kk.js": 93444,
	"./km": 72034,
	"./km.js": 72034,
	"./kn": 46223,
	"./kn.js": 46223,
	"./ko": 83064,
	"./ko.js": 83064,
	"./ku": 8714,
	"./ku-kmr": 10961,
	"./ku-kmr.js": 10961,
	"./ku.js": 8714,
	"./ky": 12062,
	"./ky.js": 12062,
	"./lb": 84796,
	"./lb.js": 84796,
	"./lo": 19279,
	"./lo.js": 19279,
	"./lt": 106,
	"./lt.js": 106,
	"./lv": 11840,
	"./lv.js": 11840,
	"./me": 42240,
	"./me.js": 42240,
	"./mi": 13588,
	"./mi.js": 13588,
	"./mk": 15518,
	"./mk.js": 15518,
	"./ml": 37823,
	"./ml.js": 37823,
	"./mn": 98657,
	"./mn.js": 98657,
	"./mr": 61285,
	"./mr.js": 61285,
	"./ms": 43014,
	"./ms-my": 86253,
	"./ms-my.js": 86253,
	"./ms.js": 43014,
	"./mt": 20167,
	"./mt.js": 20167,
	"./my": 47940,
	"./my.js": 47940,
	"./nb": 50014,
	"./nb.js": 50014,
	"./ne": 49023,
	"./ne.js": 49023,
	"./nl": 34208,
	"./nl-be": 71412,
	"./nl-be.js": 71412,
	"./nl.js": 34208,
	"./nn": 81354,
	"./nn.js": 81354,
	"./oc-lnc": 40870,
	"./oc-lnc.js": 40870,
	"./pa-in": 80389,
	"./pa-in.js": 80389,
	"./pl": 7342,
	"./pl.js": 7342,
	"./pt": 34774,
	"./pt-br": 73003,
	"./pt-br.js": 73003,
	"./pt.js": 34774,
	"./ro": 85333,
	"./ro.js": 85333,
	"./ru": 73451,
	"./ru.js": 73451,
	"./sd": 43921,
	"./sd.js": 43921,
	"./se": 59682,
	"./se.js": 59682,
	"./si": 80582,
	"./si.js": 80582,
	"./sk": 4348,
	"./sk.js": 4348,
	"./sl": 95337,
	"./sl.js": 95337,
	"./sq": 39358,
	"./sq.js": 39358,
	"./sr": 50683,
	"./sr-cyrl": 69382,
	"./sr-cyrl.js": 69382,
	"./sr.js": 50683,
	"./ss": 51156,
	"./ss.js": 51156,
	"./sv": 29855,
	"./sv.js": 29855,
	"./sw": 18536,
	"./sw.js": 18536,
	"./ta": 15373,
	"./ta.js": 15373,
	"./te": 37809,
	"./te.js": 37809,
	"./tet": 61297,
	"./tet.js": 61297,
	"./tg": 92527,
	"./tg.js": 92527,
	"./th": 85862,
	"./th.js": 85862,
	"./tk": 79331,
	"./tk.js": 79331,
	"./tl-ph": 44387,
	"./tl-ph.js": 44387,
	"./tlh": 3592,
	"./tlh.js": 3592,
	"./tr": 79732,
	"./tr.js": 79732,
	"./tzl": 99570,
	"./tzl.js": 99570,
	"./tzm": 83553,
	"./tzm-latn": 7699,
	"./tzm-latn.js": 7699,
	"./tzm.js": 83553,
	"./ug-cn": 25674,
	"./ug-cn.js": 25674,
	"./uk": 69974,
	"./uk.js": 69974,
	"./ur": 45773,
	"./ur.js": 45773,
	"./uz": 357,
	"./uz-latn": 77135,
	"./uz-latn.js": 77135,
	"./uz.js": 357,
	"./vi": 20043,
	"./vi.js": 20043,
	"./x-pseudo": 40767,
	"./x-pseudo.js": 40767,
	"./yo": 80150,
	"./yo.js": 80150,
	"./zh-cn": 21828,
	"./zh-cn.js": 21828,
	"./zh-hk": 86644,
	"./zh-hk.js": 86644,
	"./zh-mo": 79305,
	"./zh-mo.js": 79305,
	"./zh-tw": 31860,
	"./zh-tw.js": 31860
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 35358;

/***/ }),

/***/ 61584:
/*!***********************************************!*\
  !*** ./src/app/app.component.html?ngResource ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-app>\n \n  <!-- <ion-router-outlet *ngIf=\"isAppAccessible\"></ion-router-outlet> -->\n\n  <ion-router-outlet ></ion-router-outlet>\n\n<!-- /  <ion-card class=\"box-wrapper\" *ngIf=\"!isAppAccessible\">\n    <div class=\"box left-b\">\n\n    <span class=\"roll\">A new version of the app is available. Please update to continue using the app.</span>\n      \n    </div>\n    <div class=\"box right-b text-end\">\n      \n\n       <ion-button size=\"small\" shape=\"round\" (click)=\"redirectToPlayStore()\" color=\"success\">Download</ion-button>\n    </div>\n  </ion-card> -->\n\n</ion-app>\n<ion-modal [isOpen]=\"status == false\">\n  <ng-template>\n    <ion-content>\n      <app-empty-screen [model]=\"model\" (retry)=\"checkStatus($event)\"></app-empty-screen>\n    </ion-content>\n  </ng-template>\n</ion-modal>\n<ngx-spinner type=\"ball-scale-multiple\"></ngx-spinner>\n";

/***/ }),

/***/ 88973:
/*!**********************************************************************************!*\
  !*** ./src/app/pages/public/empty-screen/empty-screen.component.html?ngResource ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<div>\n  <ion-grid [class]=\"model?.centerAlign ? 'ion-text-center' : ''\">\n    <ion-row>\n      <ion-col [offset]=\"!model?.centerAlign ? 1 : 0\">\n        <ion-label *ngIf=\"model?.title\" [color]=\"model?.titleColor ? model.titleColor : 'light'\">\n          {{model?.title}}\n        </ion-label>\n        <p class=\"subtitle\" *ngIf=\"model?.subtitle\">\n          <ion-text [color]=\"model?.color ? model.color : 'light'\">\n            {{model?.subtitle}}\n          </ion-text>\n        </p>\n        <p class=\"description\" *ngIf=\"model?.description\">\n          <ion-text [color]=\"model?.color ? model.color : 'light'\">\n            {{model?.description}}\n          </ion-text>\n        </p>\n      </ion-col>\n    </ion-row>\n\n    <ion-row *ngIf=\"model?.button\" class=\"ion-margin-top\">\n      <ion-col [offset]=\"!model?.centerAlign ? 1 : 0\">\n        <ion-button \n          shape=\"round\" \n          [color]=\"model?.buttonColor ? model.buttonColor : 'primary'\"\n          (click)=\"retryButton()\">\n          <ion-text \n            [class]=\"model?.centerAlign ? 'ion-margin-horizontal ion-padding-horizontal' : ''\">\n            {{model?.button}}\n          </ion-text>\n        </ion-button>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n</div>";

/***/ }),

/***/ 44677:
/*!***************************************************************************************!*\
  !*** ./src/app/pages/teacherApp/tabs/header/teacher-header.component.html?ngResource ***!
  \***************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<ion-header [translucent]=\"true\"  class=\"main-header\" id=\"teacher-menu-content\">\n    <ion-toolbar  class=\"dark-toolbar\">\n        <ion-buttons slot=\"start\">\n            <ion-back-button\n            *ngIf=\"backButtonVisible()\"\n              text=\"Back\"\n              class=\"dark-color\"\n             (click)=\"GoBack()\"\n              defaultHref=\"teacher-app/teacherTab/home\"\n            >\n            </ion-back-button>\n          </ion-buttons>\n      <ion-title class=\"fw-bold dark-color header-title\">{{commonMethod.getHeaderTitle()}}</ion-title>\n      <ion-buttons slot=\"end\">\n        <ion-menu-button (click)=\"OpenMenu()\"></ion-menu-button>\n      </ion-buttons>\n    </ion-toolbar>\n  </ion-header> \n\n\n  <ion-menu side=\"end\" auto-hide=\"false\"  contentId=\"teacher-menu-content\">\n    <div class=\"menu-header\">\n      <div>\n      <ion-avatar>\n        <img *ngIf=\"profileImageURL==''\" alt=\"{{currentUserFullName}}\" \n        src=\"https://ionicframework.com/docs/img/demos/avatar.svg\" />\n        \n        <img *ngIf=\"profileImageURL!=''\" alt=\"{{currentUserFullName}}\"\n         src=\"{{profileImageURL}}\" />\n      </ion-avatar>\n      <p>{{currentUserFullName}}</p>\n    </div>\n        </div>\n    <ion-content class=\"ion-padding\">\n      <ion-list>\n           <ion-menu-toggle>\n        \n  \n          <ion-item button routerLink=\"/teacher-app/teacherTab/attendance\"  routerLinkActive=\"active-menu\">\n            <ion-icon slot=\"start\" name=\"document-text-outline\"></ion-icon>\n            <ion-label>Attendance </ion-label>\n          </ion-item>\n          <ion-item button routerLink=\"/teacher-app/teacherTab/timetable\"  routerLinkActive=\"active-menu\">\n            <ion-icon slot=\"start\" name=\"calendar-outline\"></ion-icon>\n            <ion-label>Timetable </ion-label>\n          </ion-item>\n          <ion-item button routerLink=\"/teacher-app/teacherTab/homework\"  routerLinkActive=\"active\">\n            <ion-icon slot=\"start\" name=\"book-outline\"></ion-icon>\n            <ion-label>Homework </ion-label>\n          </ion-item>\n          <ion-item button routerLink=\"/teacher-app/teacherTab/notice\"  routerLinkActive=\"active\">\n            <ion-icon slot=\"start\" name=\"notifications-outline\"></ion-icon>\n            <ion-label>Notice </ion-label>\n          </ion-item>\n          <ion-item button routerLink=\"/teacher-app/teacherTab/students\"  routerLinkActive=\"active\">\n            <ion-icon slot=\"start\" name=\"people-circle-outline\"></ion-icon>\n            <ion-label>Students </ion-label>\n          </ion-item>\n          <ion-item button routerLink=\"/teacher-app/teacherTab/calendar\"  routerLinkActive=\"active\">\n            <ion-icon slot=\"start\" name=\"calendar-number-outline\"></ion-icon>\n            <ion-label>Calendar </ion-label>\n          </ion-item>\n        \n        </ion-menu-toggle>\n      </ion-list>\n      <ion-button class=\"logout-btn\" expand=\"block\" (click)=\"logout()\" >Logout</ion-button>\n    </ion-content>\n  </ion-menu>\n";

/***/ }),

/***/ 54754:
/*!*************************************************************************!*\
  !*** ./src/app/pages/teacherApp/tabs/teacher-tabs.page.html?ngResource ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<teacher-app-header *ngIf=\"show && userService.isAuthenticated()\"></teacher-app-header>\n<ion-tabs>\n\n   <ion-tab-bar slot=\"bottom\">\n\n    <ion-tab-button tab=\"dashboard\">\n      <ion-icon name=\"grid-outline\"></ion-icon>\n      <ion-label>Dashboard</ion-label>\n    </ion-tab-button>\n\n    <ion-tab-button tab=\"home\" class=\"ion-tab-button-placeholder\">\n      <ion-icon name=\"home\"></ion-icon>\n      <ion-label>Home</ion-label>\n    </ion-tab-button>\n\n    <ion-tab-button tab=\"profile\">\n      <ion-icon name=\"person\"></ion-icon>\n      <ion-label>Profile</ion-label>\n    </ion-tab-button>\n\n  </ion-tab-bar> \n\n\n\n</ion-tabs>\n\n";

/***/ }),

/***/ 50477:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendor"], () => (__webpack_exec__(84429)));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=main.js.map